
FreeRTOS_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007170  08007170  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007178  08007178  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001449c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014514  20014514  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001480a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f40  00000000  00000000  000348b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242c8  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156bf  00000000  00000000  0005e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8cc9  00000000  00000000  000736f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c3c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005824  00000000  00000000  0014c410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fdc 	.word	0x08006fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006fdc 	.word	0x08006fdc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f2c 	.word	0x20012f2c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbd5 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8b5 	bl	80006e4 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter - use address 0xE0001000
  DWT_CTRL |= (1 << 0); 	// set 0th-bit to 1
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <main+0x94>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1f      	ldr	r2, [pc, #124]	; (80005fc <main+0x94>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]
  // SEGGER Start Call
  SEGGER_SYSVIEW_Conf();
 8000586:	f004 fad5 	bl	8004b34 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800058a:	f005 fa05 	bl	8005998 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler,"Task-1",200, "Task-1",2,&task1_handle);
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <main+0x98>)
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4918      	ldr	r1, [pc, #96]	; (8000600 <main+0x98>)
 800059e:	4819      	ldr	r0, [pc, #100]	; (8000604 <main+0x9c>)
 80005a0:	f002 fc08 	bl	8002db4 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>

  status = xTaskCreate(task2_handler,"Task-2",200, "Task-2",2,&task2_handle);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <main+0xa0>)
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	490e      	ldr	r1, [pc, #56]	; (8000608 <main+0xa0>)
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0xa4>)
 80005d2:	f002 fbef 	bl	8002db4 <xTaskCreate>
 80005d6:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x8c>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	60fb      	str	r3, [r7, #12]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x8a>

    // Start freeRTOS Scheduler
    vTaskStartScheduler();
 80005f4:	f002 fd42 	bl	800307c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x90>
 80005fa:	bf00      	nop
 80005fc:	e0001000 	.word	0xe0001000
 8000600:	08006ff4 	.word	0x08006ff4
 8000604:	080009a1 	.word	0x080009a1
 8000608:	08006ffc 	.word	0x08006ffc
 800060c:	080009b1 	.word	0x080009b1

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 ffc8 	bl	80065b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000688:	2304      	movs	r3, #4
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fe1b 	bl	80012d0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f9a0 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f87c 	bl	80017c0 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f989 	bl	80009e4 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	4ba2      	ldr	r3, [pc, #648]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4aa1      	ldr	r2, [pc, #644]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b9f      	ldr	r3, [pc, #636]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	4b9b      	ldr	r3, [pc, #620]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a9a      	ldr	r2, [pc, #616]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b98      	ldr	r3, [pc, #608]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b94      	ldr	r3, [pc, #592]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a93      	ldr	r2, [pc, #588]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b91      	ldr	r3, [pc, #580]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b8d      	ldr	r3, [pc, #564]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a8c      	ldr	r2, [pc, #560]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b8a      	ldr	r3, [pc, #552]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b86      	ldr	r3, [pc, #536]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a85      	ldr	r2, [pc, #532]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b83      	ldr	r3, [pc, #524]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b7f      	ldr	r3, [pc, #508]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a7e      	ldr	r2, [pc, #504]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b7c      	ldr	r3, [pc, #496]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	4879      	ldr	r0, [pc, #484]	; (800098c <MX_GPIO_Init+0x2a8>)
 80007a8:	f000 fd78 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	4877      	ldr	r0, [pc, #476]	; (8000990 <MX_GPIO_Init+0x2ac>)
 80007b2:	f000 fd73 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b6:	2200      	movs	r2, #0
 80007b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007bc:	4875      	ldr	r0, [pc, #468]	; (8000994 <MX_GPIO_Init+0x2b0>)
 80007be:	f000 fd6d 	bl	800129c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c2:	2308      	movs	r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	486c      	ldr	r0, [pc, #432]	; (800098c <MX_GPIO_Init+0x2a8>)
 80007da:	f000 fbc3 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4866      	ldr	r0, [pc, #408]	; (8000990 <MX_GPIO_Init+0x2ac>)
 80007f6:	f000 fbb5 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080a:	2305      	movs	r3, #5
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	485e      	ldr	r0, [pc, #376]	; (8000990 <MX_GPIO_Init+0x2ac>)
 8000816:	f000 fba5 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	485a      	ldr	r0, [pc, #360]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000830:	f000 fb98 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000834:	2310      	movs	r3, #16
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000844:	2306      	movs	r3, #6
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4852      	ldr	r0, [pc, #328]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000850:	f000 fb88 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000854:	23e0      	movs	r3, #224	; 0xe0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000864:	2305      	movs	r3, #5
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	484a      	ldr	r0, [pc, #296]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb78 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000874:	2304      	movs	r3, #4
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4845      	ldr	r0, [pc, #276]	; (800099c <MX_GPIO_Init+0x2b8>)
 8000888:	f000 fb6c 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	483c      	ldr	r0, [pc, #240]	; (800099c <MX_GPIO_Init+0x2b8>)
 80008aa:	f000 fb5b 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <MX_GPIO_Init+0x2b0>)
 80008c8:	f000 fb4c 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008de:	2306      	movs	r3, #6
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4829      	ldr	r0, [pc, #164]	; (8000990 <MX_GPIO_Init+0x2ac>)
 80008ea:	f000 fb3b 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4825      	ldr	r0, [pc, #148]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fb2e 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000908:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091a:	230a      	movs	r3, #10
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000926:	f000 fb1d 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4815      	ldr	r0, [pc, #84]	; (8000994 <MX_GPIO_Init+0x2b0>)
 800093e:	f000 fb11 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000942:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000954:	2304      	movs	r3, #4
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	480f      	ldr	r0, [pc, #60]	; (800099c <MX_GPIO_Init+0x2b8>)
 8000960:	f000 fb00 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000968:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_GPIO_Init+0x2a8>)
 800097a:	f000 faf3 	bl	8000f64 <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40021000 	.word	0x40021000
 8000990:	40020800 	.word	0x40020800
 8000994:	40020c00 	.word	0x40020c00
 8000998:	40020000 	.word	0x40020000
 800099c:	40020400 	.word	0x40020400

080009a0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)parameters);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f005 fe79 	bl	80066a0 <puts>
 80009ae:	e7fb      	b.n	80009a8 <task1_handler+0x8>

080009b0 <task2_handler>:
		//taskYIELD();
	}
}
static void task2_handler(void* parameters)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	while(1)
		{
			printf("%s\n",(char*)parameters);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f005 fe71 	bl	80066a0 <puts>
 80009be:	e7fb      	b.n	80009b8 <task2_handler+0x8>

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f9c5 	bl	8000d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40001000 	.word	0x40001000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000a2e:	f003 fccb 	bl	80043c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <HAL_InitTick+0xe4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <HAL_InitTick+0xe4>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <HAL_InitTick+0xe4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 0210 	add.w	r2, r7, #16
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 f8ae 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a86:	f001 f893 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000a8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a8c:	e004      	b.n	8000a98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8e:	f001 f88f 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000a92:	4603      	mov	r3, r0
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <HAL_InitTick+0xe8>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	0c9b      	lsrs	r3, r3, #18
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_InitTick+0xec>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <HAL_InitTick+0xf0>)
 8000aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_InitTick+0xec>)
 8000aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <HAL_InitTick+0xec>)
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_InitTick+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_InitTick+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_InitTick+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000acc:	4817      	ldr	r0, [pc, #92]	; (8000b2c <HAL_InitTick+0xec>)
 8000ace:	f001 f8b5 	bl	8001c3c <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d11b      	bne.n	8000b18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ae0:	4812      	ldr	r0, [pc, #72]	; (8000b2c <HAL_InitTick+0xec>)
 8000ae2:	f001 f905 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d111      	bne.n	8000b18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af4:	2036      	movs	r0, #54	; 0x36
 8000af6:	f000 fa27 	bl	8000f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d808      	bhi.n	8000b12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2036      	movs	r0, #54	; 0x36
 8000b06:	f000 fa03 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0xf4>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e002      	b.n	8000b18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3738      	adds	r7, #56	; 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	431bde83 	.word	0x431bde83
 8000b2c:	20000094 	.word	0x20000094
 8000b30:	40001000 	.word	0x40001000
 8000b34:	20000004 	.word	0x20000004

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM6_DAC_IRQHandler+0x10>)
 8000b6a:	f001 f931 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000094 	.word	0x20000094

08000b78 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <ITM_SendChar+0x48>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <ITM_SendChar+0x48>)
 8000b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b8c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <ITM_SendChar+0x4c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <ITM_SendChar+0x4c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b9a:	bf00      	nop
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f8      	beq.n	8000b9c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000baa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000edfc 	.word	0xe000edfc
 8000bc4:	e0000e00 	.word	0xe0000e00

08000bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffab 	bl	8000b78 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>
  }
  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_isatty>:

int _isatty(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ffd7 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f005 fc1b 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc35 	bl	8000568 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d0c:	08007180 	.word	0x08007180
  ldr r2, =_sbss
 8000d10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d14:	20014514 	.word	0x20014514

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8d8 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fe78 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe4e 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200000dc 	.word	0x200000dc

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000dc 	.word	0x200000dc

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e16b      	b.n	8001258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 815a 	bne.w	8001252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80b4 	beq.w	8001252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b60      	ldr	r3, [pc, #384]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a5f      	ldr	r2, [pc, #380]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a5b      	ldr	r2, [pc, #364]	; (8001274 <HAL_GPIO_Init+0x310>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_GPIO_Init+0x314>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d02b      	beq.n	800118a <HAL_GPIO_Init+0x226>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a51      	ldr	r2, [pc, #324]	; (800127c <HAL_GPIO_Init+0x318>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d025      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_GPIO_Init+0x31c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01f      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	; (8001284 <HAL_GPIO_Init+0x320>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x324>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x328>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x32c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x20e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x330>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x20a>
 800116a:	2307      	movs	r3, #7
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x228>
 800116e:	2308      	movs	r3, #8
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x228>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x310>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_GPIO_Init+0x334>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x334>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae90 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021400 	.word	0x40021400
 8001290:	40021800 	.word	0x40021800
 8001294:	40021c00 	.word	0x40021c00
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e267      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e242      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcfe 	bl	8000d88 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fcfa 	bl	8000d88 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e207      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcea 	bl	8000d88 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fce6 	bl	8000d88 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b51      	ldr	r3, [pc, #324]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c7      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x244>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc9f 	bl	8000d88 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc9b 	bl	8000d88 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a8      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4925      	ldr	r1, [pc, #148]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x244>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc7e 	bl	8000d88 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc7a 	bl	8000d88 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e187      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x248>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc5e 	bl	8000d88 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc5a 	bl	8000d88 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e167      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x248>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc47 	bl	8000d88 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc43 	bl	8000d88 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e150      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8097 	beq.w	8001664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b7d      	ldr	r3, [pc, #500]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a7c      	ldr	r2, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fc03 	bl	8000d88 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fbff 	bl	8000d88 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x2ea>
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a63      	ldr	r2, [pc, #396]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x30c>
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5e      	ldr	r2, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a54      	ldr	r2, [pc, #336]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbc4 	bl	8000d88 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fbc0 	bl	8000d88 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0cb      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x334>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fbae 	bl	8000d88 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fbaa 	bl	8000d88 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0b5      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a38      	ldr	r2, [pc, #224]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d05c      	beq.n	8001734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d141      	bne.n	8001706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb7e 	bl	8000d88 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb7a 	bl	8000d88 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb53 	bl	8000d88 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb4f 	bl	8000d88 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e05c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001704:	e054      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb3c 	bl	8000d88 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb38 	bl	8000d88 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e045      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
 8001732:	e03d      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e038      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x4ec>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d121      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa6a 	bl	8000d88 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa66 	bl	8000d88 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f86a 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	080070e0 	.word	0x080070e0
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b094      	sub	sp, #80	; 0x50
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	f200 80e1 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019be:	e0db      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019c4:	e0db      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
 80019fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6139      	str	r1, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a30:	4659      	mov	r1, fp
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4651      	mov	r1, sl
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ebb2 0801 	subs.w	r8, r2, r1
 8001a44:	4659      	mov	r1, fp
 8001a46:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	4699      	mov	r9, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	eb18 0303 	adds.w	r3, r8, r3
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	eb49 0303 	adc.w	r3, r9, r3
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	024b      	lsls	r3, r1, #9
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a88:	4621      	mov	r1, r4
 8001a8a:	024a      	lsls	r2, r1, #9
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a9c:	f7fe fbe2 	bl	8000264 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad6:	0150      	lsls	r0, r2, #5
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afc:	ebb2 040a 	subs.w	r4, r2, sl
 8001b00:	eb63 050b 	sbc.w	r5, r3, fp
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	00eb      	lsls	r3, r5, #3
 8001b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b12:	00e2      	lsls	r2, r4, #3
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	18e3      	adds	r3, r4, r3
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	464b      	mov	r3, r9
 8001b20:	eb45 0303 	adc.w	r3, r5, r3
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b32:	4629      	mov	r1, r5
 8001b34:	028b      	lsls	r3, r1, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	028a      	lsls	r2, r1, #10
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	61fa      	str	r2, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	f7fe fb88 	bl	8000264 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	; 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080070f0 	.word	0x080070f0

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9d8 	bl	8002030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0202 	mvn.w	r2, #2
 8001dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ee 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8e0 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8f1 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8c4 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8b6 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8c7 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0208 	mvn.w	r2, #8
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f89a 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f88c 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f89d 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d122      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d11b      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0210 	mvn.w	r2, #16
 8001ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2208      	movs	r2, #8
 8001efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f870 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f862 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f873 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0201 	mvn.w	r2, #1
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fd36 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f902 	bl	8002184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f838 	bl	800201c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0220 	mvn.w	r2, #32
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8cc 	bl	8002170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <TIM_Base_SetConfig+0x114>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d00f      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <TIM_Base_SetConfig+0x118>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00b      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <TIM_Base_SetConfig+0x11c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <TIM_Base_SetConfig+0x120>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <TIM_Base_SetConfig+0x124>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d108      	bne.n	8002082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <TIM_Base_SetConfig+0x114>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d027      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <TIM_Base_SetConfig+0x118>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d023      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <TIM_Base_SetConfig+0x11c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <TIM_Base_SetConfig+0x120>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a29      	ldr	r2, [pc, #164]	; (8002154 <TIM_Base_SetConfig+0x124>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d017      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <TIM_Base_SetConfig+0x128>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <TIM_Base_SetConfig+0x12c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00f      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_Base_SetConfig+0x130>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00b      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <TIM_Base_SetConfig+0x134>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <TIM_Base_SetConfig+0x138>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d003      	beq.n	80020e2 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a23      	ldr	r2, [pc, #140]	; (800216c <TIM_Base_SetConfig+0x13c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d108      	bne.n	80020f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <TIM_Base_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0xf8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d103      	bne.n	8002130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	615a      	str	r2, [r3, #20]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40010000 	.word	0x40010000
 8002148:	40000400 	.word	0x40000400
 800214c:	40000800 	.word	0x40000800
 8002150:	40000c00 	.word	0x40000c00
 8002154:	40010400 	.word	0x40010400
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	40001800 	.word	0x40001800
 8002168:	40001c00 	.word	0x40001c00
 800216c:	40002000 	.word	0x40002000

08002170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f103 0208 	add.w	r2, r3, #8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f103 0208 	add.w	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d103      	bne.n	800225a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e00c      	b.n	8002274 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3308      	adds	r3, #8
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e002      	b.n	8002268 <vListInsert+0x2e>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	d2f6      	bcs.n	8002262 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6852      	ldr	r2, [r2, #4]
 80022cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d103      	bne.n	80022e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueGenericReset+0x2a>
        __asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	60bb      	str	r3, [r7, #8]
    }
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800232a:	f002 f8cb 	bl	80044c4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	441a      	add	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	3b01      	subs	r3, #1
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	441a      	add	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d114      	bne.n	80023aa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01a      	beq.n	80023be <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3310      	adds	r3, #16
 800238c:	4618      	mov	r0, r3
 800238e:	f001 f927 	bl	80035e0 <xTaskRemoveFromEventList>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <xQueueGenericReset+0xcc>)
 800239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	e009      	b.n	80023be <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3310      	adds	r3, #16
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fef2 	bl	8002198 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3324      	adds	r3, #36	; 0x24
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff feed 	bl	8002198 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023be:	f002 f8b1 	bl	8004524 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	e000ed04 	.word	0xe000ed04

080023d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericCreate+0x2a>
        __asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	61bb      	str	r3, [r7, #24]
    }
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <xQueueGenericCreate+0x48>
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d101      	bne.n	800241c <xQueueGenericCreate+0x4c>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <xQueueGenericCreate+0x4e>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <xQueueGenericCreate+0x68>
        __asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	617b      	str	r3, [r7, #20]
    }
 8002434:	bf00      	nop
 8002436:	e7fe      	b.n	8002436 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800243e:	d90a      	bls.n	8002456 <xQueueGenericCreate+0x86>
        __asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	613b      	str	r3, [r7, #16]
    }
 8002452:	bf00      	nop
 8002454:	e7fe      	b.n	8002454 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	3350      	adds	r3, #80	; 0x50
 800245a:	4618      	mov	r0, r3
 800245c:	f002 f95e 	bl	800471c <pvPortMalloc>
 8002460:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3350      	adds	r3, #80	; 0x50
 8002470:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002472:	79fa      	ldrb	r2, [r7, #7]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f805 	bl	800248e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002484:	6a3b      	ldr	r3, [r7, #32]
    }
 8002486:	4618      	mov	r0, r3
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e002      	b.n	80024b0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024bc:	2101      	movs	r1, #1
 80024be:	69b8      	ldr	r0, [r7, #24]
 80024c0:	f7ff ff1e 	bl	8002300 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	2073      	movs	r0, #115	; 0x73
 80024d4:	f003 f958 	bl	8005788 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b090      	sub	sp, #64	; 0x40
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueGenericSend+0x32>
        __asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d103      	bne.n	8002520 <xQueueGenericSend+0x40>
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <xQueueGenericSend+0x44>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <xQueueGenericSend+0x46>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <xQueueGenericSend+0x60>
        __asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800253c:	bf00      	nop
 800253e:	e7fe      	b.n	800253e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x6e>
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <xQueueGenericSend+0x72>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <xQueueGenericSend+0x74>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericSend+0x8e>
        __asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	623b      	str	r3, [r7, #32]
    }
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800256e:	f001 f9d7 	bl	8003920 <xTaskGetSchedulerState>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <xQueueGenericSend+0x9e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <xQueueGenericSend+0xa2>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <xQueueGenericSend+0xa4>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericSend+0xbe>
        __asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	61fb      	str	r3, [r7, #28]
    }
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800259e:	f001 ff91 	bl	80044c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <xQueueGenericSend+0xd4>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d136      	bne.n	8002622 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fe72 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	4601      	mov	r1, r0
 80025c8:	205a      	movs	r0, #90	; 0x5a
 80025ca:	f003 f953 	bl	8005874 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d4:	f000 fa78 	bl	8002ac8 <prvCopyDataToQueue>
 80025d8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d010      	beq.n	8002604 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fffa 	bl	80035e0 <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d013      	beq.n	800261a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025f2:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <xQueueGenericSend+0x248>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e00a      	b.n	800261a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <xQueueGenericSend+0x248>)
 800260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800261a:	f001 ff83 	bl	8004524 <vPortExitCritical>
                return pdPASS;
 800261e:	2301      	movs	r3, #1
 8002620:	e07d      	b.n	800271e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d110      	bne.n	800264a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002628:	f001 ff7c 	bl	8004524 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fe36 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	460b      	mov	r3, r1
 800263e:	4601      	mov	r1, r0
 8002640:	205a      	movs	r0, #90	; 0x5a
 8002642:	f003 f917 	bl	8005874 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002646:	2300      	movs	r3, #0
 8002648:	e069      	b.n	800271e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4618      	mov	r0, r3
 8002656:	f001 f829 	bl	80036ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800265a:	2301      	movs	r3, #1
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800265e:	f001 ff61 	bl	8004524 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002662:	f000 fd71 	bl	8003148 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002666:	f001 ff2d 	bl	80044c4 <vPortEnterCritical>
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002670:	b25b      	sxtb	r3, r3
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d103      	bne.n	8002680 <xQueueGenericSend+0x1a0>
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <xQueueGenericSend+0x1b6>
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002696:	f001 ff45 	bl	8004524 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800269a:	1d3a      	adds	r2, r7, #4
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 f818 	bl	80036d8 <xTaskCheckForTimeOut>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d124      	bne.n	80026f8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026b0:	f000 fb02 	bl	8002cb8 <prvIsQueueFull>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d018      	beq.n	80026ec <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	3310      	adds	r3, #16
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ff3a 	bl	800353c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ca:	f000 fa8d 	bl	8002be8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026ce:	f000 fd49 	bl	8003164 <xTaskResumeAll>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f af62 	bne.w	800259e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <xQueueGenericSend+0x248>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	e758      	b.n	800259e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ee:	f000 fa7b 	bl	8002be8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026f2:	f000 fd37 	bl	8003164 <xTaskResumeAll>
 80026f6:	e752      	b.n	800259e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026fa:	f000 fa75 	bl	8002be8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026fe:	f000 fd31 	bl	8003164 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fdcb 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	460b      	mov	r3, r1
 8002714:	4601      	mov	r1, r0
 8002716:	205a      	movs	r0, #90	; 0x5a
 8002718:	f003 f8ac 	bl	8005874 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800271c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800271e:	4618      	mov	r0, r3
 8002720:	3738      	adds	r7, #56	; 0x38
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000ed04 	.word	0xe000ed04

0800272c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b090      	sub	sp, #64	; 0x40
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <xQueueGenericSendFromISR+0x3c>
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <xQueueGenericSendFromISR+0x40>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <xQueueGenericSendFromISR+0x42>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002784:	bf00      	nop
 8002786:	e7fe      	b.n	8002786 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d103      	bne.n	8002796 <xQueueGenericSendFromISR+0x6a>
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <xQueueGenericSendFromISR+0x6e>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueGenericSendFromISR+0x70>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	623b      	str	r3, [r7, #32]
    }
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b6:	f001 ff71 	bl	800469c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80027ba:	f3ef 8211 	mrs	r2, BASEPRI
 80027be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	61fa      	str	r2, [r7, #28]
 80027d0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <xQueueGenericSendFromISR+0xbc>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d148      	bne.n	800287a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fd50 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002800:	4601      	mov	r1, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	461a      	mov	r2, r3
 8002806:	2060      	movs	r0, #96	; 0x60
 8002808:	f002 ff64 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002812:	f000 f959 	bl	8002ac8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002816:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d112      	bne.n	8002846 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2b00      	cmp	r3, #0
 8002826:	d025      	beq.n	8002874 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282a:	3324      	adds	r3, #36	; 0x24
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fed7 	bl	80035e0 <xTaskRemoveFromEventList>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01d      	beq.n	8002874 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01a      	beq.n	8002874 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e016      	b.n	8002874 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002846:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800284a:	2b7f      	cmp	r3, #127	; 0x7f
 800284c:	d10a      	bne.n	8002864 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	617b      	str	r3, [r7, #20]
    }
 8002860:	bf00      	nop
 8002862:	e7fe      	b.n	8002862 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002868:	3301      	adds	r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	b25a      	sxtb	r2, r3
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002874:	2301      	movs	r3, #1
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002878:	e00b      	b.n	8002892 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fd0f 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002882:	4601      	mov	r1, r0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	461a      	mov	r2, r3
 8002888:	2060      	movs	r0, #96	; 0x60
 800288a:	f002 ff23 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800288e:	2300      	movs	r3, #0
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800289c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3740      	adds	r7, #64	; 0x40
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08f      	sub	sp, #60	; 0x3c
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xQueueReceive+0x30>
        __asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	623b      	str	r3, [r7, #32]
    }
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <xQueueReceive+0x3e>
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <xQueueReceive+0x42>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <xQueueReceive+0x44>
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <xQueueReceive+0x5e>
        __asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	61fb      	str	r3, [r7, #28]
    }
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002906:	f001 f80b 	bl	8003920 <xTaskGetSchedulerState>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <xQueueReceive+0x6e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <xQueueReceive+0x72>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <xQueueReceive+0x74>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <xQueueReceive+0x8e>
        __asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	61bb      	str	r3, [r7, #24]
    }
 8002932:	bf00      	nop
 8002934:	e7fe      	b.n	8002934 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002936:	f001 fdc5 	bl	80044c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02f      	beq.n	80029a6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294a:	f000 f927 	bl	8002b9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fca5 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002956:	4604      	mov	r4, r0
 8002958:	2000      	movs	r0, #0
 800295a:	f003 fca1 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2101      	movs	r1, #1
 8002964:	9100      	str	r1, [sp, #0]
 8002966:	4621      	mov	r1, r4
 8002968:	205c      	movs	r0, #92	; 0x5c
 800296a:	f002 ff83 	bl	8005874 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00f      	beq.n	800299e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	3310      	adds	r3, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fe2c 	bl	80035e0 <xTaskRemoveFromEventList>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <xQueueReceive+0x21c>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800299e:	f001 fdc1 	bl	8004524 <vPortExitCritical>
                return pdPASS;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e08a      	b.n	8002abc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d113      	bne.n	80029d4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029ac:	f001 fdba 	bl	8004524 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fc74 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 80029b8:	4604      	mov	r4, r0
 80029ba:	2000      	movs	r0, #0
 80029bc:	f003 fc70 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2101      	movs	r1, #1
 80029c6:	9100      	str	r1, [sp, #0]
 80029c8:	4621      	mov	r1, r4
 80029ca:	205c      	movs	r0, #92	; 0x5c
 80029cc:	f002 ff52 	bl	8005874 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e073      	b.n	8002abc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029da:	f107 0310 	add.w	r3, r7, #16
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fe64 	bl	80036ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029e8:	f001 fd9c 	bl	8004524 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029ec:	f000 fbac 	bl	8003148 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029f0:	f001 fd68 	bl	80044c4 <vPortEnterCritical>
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d103      	bne.n	8002a0a <xQueueReceive+0x162>
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d103      	bne.n	8002a20 <xQueueReceive+0x178>
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a20:	f001 fd80 	bl	8004524 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a24:	1d3a      	adds	r2, r7, #4
 8002a26:	f107 0310 	add.w	r3, r7, #16
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fe53 	bl	80036d8 <xTaskCheckForTimeOut>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d124      	bne.n	8002a82 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a3a:	f000 f927 	bl	8002c8c <prvIsQueueEmpty>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d018      	beq.n	8002a76 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	3324      	adds	r3, #36	; 0x24
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fd75 	bl	800353c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a54:	f000 f8c8 	bl	8002be8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a58:	f000 fb84 	bl	8003164 <xTaskResumeAll>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f47f af69 	bne.w	8002936 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <xQueueReceive+0x21c>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	e75f      	b.n	8002936 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a78:	f000 f8b6 	bl	8002be8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a7c:	f000 fb72 	bl	8003164 <xTaskResumeAll>
 8002a80:	e759      	b.n	8002936 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a84:	f000 f8b0 	bl	8002be8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a88:	f000 fb6c 	bl	8003164 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8e:	f000 f8fd 	bl	8002c8c <prvIsQueueEmpty>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f43f af4e 	beq.w	8002936 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fbff 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f003 fbfb 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	9100      	str	r1, [sp, #0]
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	205c      	movs	r0, #92	; 0x5c
 8002ab6:	f002 fedd 	bl	8005874 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002aba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3734      	adds	r7, #52	; 0x34
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd90      	pop	{r4, r7, pc}
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d14d      	bne.n	8002b8a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ff32 	bl	800395c <xTaskPriorityDisinherit>
 8002af8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e043      	b.n	8002b8a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d119      	bne.n	8002b3c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6858      	ldr	r0, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	461a      	mov	r2, r3
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	f003 fd40 	bl	8006598 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	441a      	add	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d32b      	bcc.n	8002b8a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e026      	b.n	8002b8a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68d8      	ldr	r0, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	461a      	mov	r2, r3
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	f003 fd26 	bl	8006598 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	425b      	negs	r3, r3
 8002b56:	441a      	add	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	425b      	negs	r3, r3
 8002b72:	441a      	add	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d105      	bne.n	8002b8a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b92:	697b      	ldr	r3, [r7, #20]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	441a      	add	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d303      	bcc.n	8002bd0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68d9      	ldr	r1, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f003 fcdc 	bl	8006598 <memcpy>
    }
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002bf0:	f001 fc68 	bl	80044c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bfa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bfc:	e011      	b.n	8002c22 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3324      	adds	r3, #36	; 0x24
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fce8 	bl	80035e0 <xTaskRemoveFromEventList>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c16:	f000 fdc5 	bl	80037a4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	dce9      	bgt.n	8002bfe <prvUnlockQueue+0x16>
 8002c2a:	e000      	b.n	8002c2e <prvUnlockQueue+0x46>
                        break;
 8002c2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c36:	f001 fc75 	bl	8004524 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c3a:	f001 fc43 	bl	80044c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c46:	e011      	b.n	8002c6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3310      	adds	r3, #16
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fcc3 	bl	80035e0 <xTaskRemoveFromEventList>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c60:	f000 fda0 	bl	80037a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c64:	7bbb      	ldrb	r3, [r7, #14]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	dce9      	bgt.n	8002c48 <prvUnlockQueue+0x60>
 8002c74:	e000      	b.n	8002c78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	22ff      	movs	r2, #255	; 0xff
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c80:	f001 fc50 	bl	8004524 <vPortExitCritical>
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c94:	f001 fc16 	bl	80044c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e001      	b.n	8002caa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002caa:	f001 fc3b 	bl	8004524 <vPortExitCritical>

    return xReturn;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cc0:	f001 fc00 	bl	80044c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d102      	bne.n	8002cd6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e001      	b.n	8002cda <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cda:	f001 fc23 	bl	8004524 <vPortExitCritical>

    return xReturn;
 8002cde:	68fb      	ldr	r3, [r7, #12]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e01e      	b.n	8002d36 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cf8:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <vQueueAddToRegistry+0x60>)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d115      	bne.n	8002d30 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d04:	4910      	ldr	r1, [pc, #64]	; (8002d48 <vQueueAddToRegistry+0x60>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <vQueueAddToRegistry+0x60>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 fabf 	bl	80062a0 <SEGGER_SYSVIEW_ShrinkId>
 8002d22:	4601      	mov	r1, r0
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	2071      	movs	r0, #113	; 0x71
 8002d2a:	f002 fcd3 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d2e:	e006      	b.n	8002d3e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b07      	cmp	r3, #7
 8002d3a:	d9dd      	bls.n	8002cf8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200000e0 	.word	0x200000e0

08002d4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d5c:	f001 fbb2 	bl	80044c4 <vPortEnterCritical>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d103      	bne.n	8002d76 <vQueueWaitForMessageRestricted+0x2a>
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d103      	bne.n	8002d8c <vQueueWaitForMessageRestricted+0x40>
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	f001 fbca 	bl	8004524 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fbef 	bl	8003584 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff1e 	bl	8002be8 <prvUnlockQueue>
    }
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fca7 	bl	800471c <pvPortMalloc>
 8002dce:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00e      	beq.n	8002df4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dd6:	2058      	movs	r0, #88	; 0x58
 8002dd8:	f001 fca0 	bl	800471c <pvPortMalloc>
 8002ddc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dea:	e005      	b.n	8002df8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f001 fd75 	bl	80048dc <vPortFree>
 8002df2:	e001      	b.n	8002df8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9303      	str	r3, [sp, #12]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	9302      	str	r3, [sp, #8]
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f80e 	bl	8002e36 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e1a:	69f8      	ldr	r0, [r7, #28]
 8002e1c:	f000 f8a2 	bl	8002f64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e002      	b.n	8002e2c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
    }
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b088      	sub	sp, #32
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	21a5      	movs	r1, #165	; 0xa5
 8002e50:	f003 fbb0 	bl	80065b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f023 0307 	bic.w	r3, r3, #7
 8002e6c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	617b      	str	r3, [r7, #20]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01f      	beq.n	8002ed4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	e012      	b.n	8002ec0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	7819      	ldrb	r1, [r3, #0]
 8002ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3334      	adds	r3, #52	; 0x34
 8002eaa:	460a      	mov	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d9e9      	bls.n	8002e9a <prvInitialiseNewTask+0x64>
 8002ec6:	e000      	b.n	8002eca <prvInitialiseNewTask+0x94>
            {
                break;
 8002ec8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ed2:	e003      	b.n	8002edc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d901      	bls.n	8002ee6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	3304      	adds	r3, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f96b 	bl	80021d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	3318      	adds	r3, #24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f966 	bl	80021d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f10:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	f1c3 0205 	rsb	r2, r3, #5
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	3350      	adds	r3, #80	; 0x50
 8002f26:	2204      	movs	r2, #4
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fb42 	bl	80065b4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	3354      	adds	r3, #84	; 0x54
 8002f34:	2201      	movs	r2, #1
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fb3b 	bl	80065b4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	69b8      	ldr	r0, [r7, #24]
 8002f44:	f001 f914 	bl	8004170 <pxPortInitialiseStack>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f5a:	bf00      	nop
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f64:	b5b0      	push	{r4, r5, r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f6c:	f001 faaa 	bl	80044c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <prvAddNewTaskToReadyList+0xfc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <prvAddNewTaskToReadyList+0xfc>)
 8002f78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <prvAddNewTaskToReadyList+0x100>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <prvAddNewTaskToReadyList+0x100>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <prvAddNewTaskToReadyList+0xfc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d110      	bne.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f90:	f000 fc2c 	bl	80037ec <prvInitialiseTaskLists>
 8002f94:	e00d      	b.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f96:	4b34      	ldr	r3, [pc, #208]	; (8003068 <prvAddNewTaskToReadyList+0x104>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <prvAddNewTaskToReadyList+0x100>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d802      	bhi.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fac:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <prvAddNewTaskToReadyList+0x100>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <prvAddNewTaskToReadyList+0x108>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <prvAddNewTaskToReadyList+0x108>)
 8002fba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <prvAddNewTaskToReadyList+0x108>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <prvAddNewTaskToReadyList+0x94>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f841 	bl	8006054 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461c      	mov	r4, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	1ae3      	subs	r3, r4, r3
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	462b      	mov	r3, r5
 8002ff4:	f001 fe40 	bl	8004c78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 f8ae 	bl	800615c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <prvAddNewTaskToReadyList+0x10c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4313      	orrs	r3, r2
 800300e:	4a18      	ldr	r2, [pc, #96]	; (8003070 <prvAddNewTaskToReadyList+0x10c>)
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <prvAddNewTaskToReadyList+0x110>)
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7ff f8e2 	bl	80021f2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800302e:	f001 fa79 	bl	8004524 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <prvAddNewTaskToReadyList+0x104>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <prvAddNewTaskToReadyList+0x100>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	429a      	cmp	r2, r3
 8003046:	d207      	bcs.n	8003058 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <prvAddNewTaskToReadyList+0x114>)
 800304a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bdb0      	pop	{r4, r5, r7, pc}
 8003060:	200001f8 	.word	0x200001f8
 8003064:	20000120 	.word	0x20000120
 8003068:	20000204 	.word	0x20000204
 800306c:	20000214 	.word	0x20000214
 8003070:	20000200 	.word	0x20000200
 8003074:	20000124 	.word	0x20000124
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <vTaskStartScheduler+0xac>)
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	2300      	movs	r3, #0
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2300      	movs	r3, #0
 800308c:	2282      	movs	r2, #130	; 0x82
 800308e:	4927      	ldr	r1, [pc, #156]	; (800312c <vTaskStartScheduler+0xb0>)
 8003090:	4827      	ldr	r0, [pc, #156]	; (8003130 <vTaskStartScheduler+0xb4>)
 8003092:	f7ff fe8f 	bl	8002db4 <xTaskCreate>
 8003096:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800309e:	f000 fd55 	bl	8003b4c <xTimerCreateTimerTask>
 80030a2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d129      	bne.n	80030fe <vTaskStartScheduler+0x82>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	60bb      	str	r3, [r7, #8]
    }
 80030bc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <vTaskStartScheduler+0xb8>)
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <vTaskStartScheduler+0xbc>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <vTaskStartScheduler+0xc0>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <vTaskStartScheduler+0xc4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3334      	adds	r3, #52	; 0x34
 80030d8:	2205      	movs	r2, #5
 80030da:	4914      	ldr	r1, [pc, #80]	; (800312c <vTaskStartScheduler+0xb0>)
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fa4b 	bl	8006578 <memcmp>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <vTaskStartScheduler+0x78>
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <vTaskStartScheduler+0xc4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fff3 	bl	80060d8 <SEGGER_SYSVIEW_OnTaskStartExec>
 80030f2:	e001      	b.n	80030f8 <vTaskStartScheduler+0x7c>
 80030f4:	f002 ff92 	bl	800601c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80030f8:	f001 f8c4 	bl	8004284 <xPortStartScheduler>
 80030fc:	e00e      	b.n	800311c <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d10a      	bne.n	800311c <vTaskStartScheduler+0xa0>
        __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	607b      	str	r3, [r7, #4]
    }
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <vTaskStartScheduler+0xc8>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	2000021c 	.word	0x2000021c
 800312c:	08007004 	.word	0x08007004
 8003130:	080037bd 	.word	0x080037bd
 8003134:	20000218 	.word	0x20000218
 8003138:	20000204 	.word	0x20000204
 800313c:	200001fc 	.word	0x200001fc
 8003140:	20000120 	.word	0x20000120
 8003144:	2000000c 	.word	0x2000000c

08003148 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <vTaskSuspendAll+0x18>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a03      	ldr	r2, [pc, #12]	; (8003160 <vTaskSuspendAll+0x18>)
 8003154:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20000220 	.word	0x20000220

08003164 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <xTaskResumeAll+0x11c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <xTaskResumeAll+0x2c>
        __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	603b      	str	r3, [r7, #0]
    }
 800318c:	bf00      	nop
 800318e:	e7fe      	b.n	800318e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003190:	f001 f998 	bl	80044c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003194:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <xTaskResumeAll+0x11c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	4a39      	ldr	r2, [pc, #228]	; (8003280 <xTaskResumeAll+0x11c>)
 800319c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <xTaskResumeAll+0x11c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d165      	bne.n	8003272 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <xTaskResumeAll+0x120>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d061      	beq.n	8003272 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ae:	e032      	b.n	8003216 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <xTaskResumeAll+0x124>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3318      	adds	r3, #24
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f875 	bl	80022ac <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3304      	adds	r3, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f870 	bl	80022ac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 ffc4 	bl	800615c <SEGGER_SYSVIEW_OnTaskStartReady>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <xTaskResumeAll+0x128>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <xTaskResumeAll+0x128>)
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4a27      	ldr	r2, [pc, #156]	; (8003290 <xTaskResumeAll+0x12c>)
 80031f4:	441a      	add	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7fe fff8 	bl	80021f2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <xTaskResumeAll+0x130>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <xTaskResumeAll+0x134>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003216:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <xTaskResumeAll+0x124>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1c8      	bne.n	80031b0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003224:	f000 fb60 	bl	80038e8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003228:	4b1c      	ldr	r3, [pc, #112]	; (800329c <xTaskResumeAll+0x138>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003234:	f000 f858 	bl	80032e8 <xTaskIncrementTick>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <xTaskResumeAll+0x134>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f1      	bne.n	8003234 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <xTaskResumeAll+0x138>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <xTaskResumeAll+0x134>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800325e:	2301      	movs	r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <xTaskResumeAll+0x13c>)
 8003264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003272:	f001 f957 	bl	8004524 <vPortExitCritical>

    return xAlreadyYielded;
 8003276:	68bb      	ldr	r3, [r7, #8]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000220 	.word	0x20000220
 8003284:	200001f8 	.word	0x200001f8
 8003288:	200001b8 	.word	0x200001b8
 800328c:	20000200 	.word	0x20000200
 8003290:	20000124 	.word	0x20000124
 8003294:	20000120 	.word	0x20000120
 8003298:	2000020c 	.word	0x2000020c
 800329c:	20000208 	.word	0x20000208
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <xTaskGetTickCount+0x1c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	200001fc 	.word	0x200001fc

080032c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ca:	f001 f9e7 	bl	800469c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <xTaskGetTickCountFromISR+0x20>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032d8:	683b      	ldr	r3, [r7, #0]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200001fc 	.word	0x200001fc

080032e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f2:	4b50      	ldr	r3, [pc, #320]	; (8003434 <xTaskIncrementTick+0x14c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8092 	bne.w	8003420 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032fc:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <xTaskIncrementTick+0x150>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003304:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <xTaskIncrementTick+0x150>)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d120      	bne.n	8003352 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003310:	4b4a      	ldr	r3, [pc, #296]	; (800343c <xTaskIncrementTick+0x154>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <xTaskIncrementTick+0x48>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	603b      	str	r3, [r7, #0]
    }
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xTaskIncrementTick+0x46>
 8003330:	4b42      	ldr	r3, [pc, #264]	; (800343c <xTaskIncrementTick+0x154>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <xTaskIncrementTick+0x158>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a40      	ldr	r2, [pc, #256]	; (800343c <xTaskIncrementTick+0x154>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4a40      	ldr	r2, [pc, #256]	; (8003440 <xTaskIncrementTick+0x158>)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <xTaskIncrementTick+0x15c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	4a3e      	ldr	r2, [pc, #248]	; (8003444 <xTaskIncrementTick+0x15c>)
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	f000 facb 	bl	80038e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <xTaskIncrementTick+0x160>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	429a      	cmp	r2, r3
 800335a:	d34c      	bcc.n	80033f6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800335c:	4b37      	ldr	r3, [pc, #220]	; (800343c <xTaskIncrementTick+0x154>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <xTaskIncrementTick+0x160>)
 8003368:	f04f 32ff 	mov.w	r2, #4294967295
 800336c:	601a      	str	r2, [r3, #0]
                    break;
 800336e:	e042      	b.n	80033f6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <xTaskIncrementTick+0x154>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d203      	bcs.n	8003390 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003388:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <xTaskIncrementTick+0x160>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800338e:	e032      	b.n	80033f6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3304      	adds	r3, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe ff89 	bl	80022ac <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3318      	adds	r3, #24
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe ff80 	bl	80022ac <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 fed4 	bl	800615c <SEGGER_SYSVIEW_OnTaskStartReady>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <xTaskIncrementTick+0x164>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <xTaskIncrementTick+0x164>)
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <xTaskIncrementTick+0x168>)
 80033d4:	441a      	add	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fe ff08 	bl	80021f2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <xTaskIncrementTick+0x16c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3b5      	bcc.n	800335c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f4:	e7b2      	b.n	800335c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <xTaskIncrementTick+0x16c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	4914      	ldr	r1, [pc, #80]	; (8003450 <xTaskIncrementTick+0x168>)
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d901      	bls.n	8003412 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <xTaskIncrementTick+0x170>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e004      	b.n	800342a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <xTaskIncrementTick+0x174>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	4a0d      	ldr	r2, [pc, #52]	; (800345c <xTaskIncrementTick+0x174>)
 8003428:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800342a:	697b      	ldr	r3, [r7, #20]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000220 	.word	0x20000220
 8003438:	200001fc 	.word	0x200001fc
 800343c:	200001b0 	.word	0x200001b0
 8003440:	200001b4 	.word	0x200001b4
 8003444:	20000210 	.word	0x20000210
 8003448:	20000218 	.word	0x20000218
 800344c:	20000200 	.word	0x20000200
 8003450:	20000124 	.word	0x20000124
 8003454:	20000120 	.word	0x20000120
 8003458:	2000020c 	.word	0x2000020c
 800345c:	20000208 	.word	0x20000208

08003460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <vTaskSwitchContext+0xc4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800346e:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <vTaskSwitchContext+0xc8>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003474:	e052      	b.n	800351c <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <vTaskSwitchContext+0xc8>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <vTaskSwitchContext+0xcc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f1c3 031f 	rsb	r3, r3, #31
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	4927      	ldr	r1, [pc, #156]	; (8003530 <vTaskSwitchContext+0xd0>)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	607b      	str	r3, [r7, #4]
    }
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <vTaskSwitchContext+0x5a>
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <vTaskSwitchContext+0xd0>)
 80034c8:	4413      	add	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3308      	adds	r3, #8
 80034de:	429a      	cmp	r2, r3
 80034e0:	d104      	bne.n	80034ec <vTaskSwitchContext+0x8c>
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a10      	ldr	r2, [pc, #64]	; (8003534 <vTaskSwitchContext+0xd4>)
 80034f4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <vTaskSwitchContext+0xd4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3334      	adds	r3, #52	; 0x34
 80034fc:	2205      	movs	r2, #5
 80034fe:	490e      	ldr	r1, [pc, #56]	; (8003538 <vTaskSwitchContext+0xd8>)
 8003500:	4618      	mov	r0, r3
 8003502:	f003 f839 	bl	8006578 <memcmp>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <vTaskSwitchContext+0xb8>
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <vTaskSwitchContext+0xd4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fde1 	bl	80060d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003516:	e001      	b.n	800351c <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003518:	f002 fd80 	bl	800601c <SEGGER_SYSVIEW_OnIdle>
}
 800351c:	bf00      	nop
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000220 	.word	0x20000220
 8003528:	2000020c 	.word	0x2000020c
 800352c:	20000200 	.word	0x20000200
 8003530:	20000124 	.word	0x20000124
 8003534:	20000120 	.word	0x20000120
 8003538:	08007004 	.word	0x08007004

0800353c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60fb      	str	r3, [r7, #12]
    }
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <vTaskPlaceOnEventList+0x44>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3318      	adds	r3, #24
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fe fe65 	bl	800223a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003570:	2101      	movs	r1, #1
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	f000 fa72 	bl	8003a5c <prvAddCurrentTaskToDelayedList>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000120 	.word	0x20000120

08003584 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	617b      	str	r3, [r7, #20]
    }
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <vTaskPlaceOnEventListRestricted+0x58>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3318      	adds	r3, #24
 80035b2:	4619      	mov	r1, r3
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7fe fe1c 	bl	80021f2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035c6:	2024      	movs	r0, #36	; 0x24
 80035c8:	f002 f82a 	bl	8005620 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	68b8      	ldr	r0, [r7, #8]
 80035d0:	f000 fa44 	bl	8003a5c <prvAddCurrentTaskToDelayedList>
    }
 80035d4:	bf00      	nop
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000120 	.word	0x20000120

080035e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60fb      	str	r3, [r7, #12]
    }
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3318      	adds	r3, #24
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fe4b 	bl	80022ac <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <xTaskRemoveFromEventList+0xb4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d120      	bne.n	8003660 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3304      	adds	r3, #4
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fe42 	bl	80022ac <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4618      	mov	r0, r3
 800362c:	f002 fd96 	bl	800615c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <xTaskRemoveFromEventList+0xb8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	4a16      	ldr	r2, [pc, #88]	; (8003698 <xTaskRemoveFromEventList+0xb8>)
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <xTaskRemoveFromEventList+0xbc>)
 8003650:	441a      	add	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7fe fdca 	bl	80021f2 <vListInsertEnd>
 800365e:	e005      	b.n	800366c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3318      	adds	r3, #24
 8003664:	4619      	mov	r1, r3
 8003666:	480e      	ldr	r0, [pc, #56]	; (80036a0 <xTaskRemoveFromEventList+0xc0>)
 8003668:	f7fe fdc3 	bl	80021f2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <xTaskRemoveFromEventList+0xc4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	429a      	cmp	r2, r3
 8003678:	d905      	bls.n	8003686 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800367a:	2301      	movs	r3, #1
 800367c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <xTaskRemoveFromEventList+0xc8>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e001      	b.n	800368a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800368a:	697b      	ldr	r3, [r7, #20]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000220 	.word	0x20000220
 8003698:	20000200 	.word	0x20000200
 800369c:	20000124 	.word	0x20000124
 80036a0:	200001b8 	.word	0x200001b8
 80036a4:	20000120 	.word	0x20000120
 80036a8:	2000020c 	.word	0x2000020c

080036ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <vTaskInternalSetTimeOutState+0x24>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <vTaskInternalSetTimeOutState+0x28>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	605a      	str	r2, [r3, #4]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	20000210 	.word	0x20000210
 80036d4:	200001fc 	.word	0x200001fc

080036d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	613b      	str	r3, [r7, #16]
    }
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60fb      	str	r3, [r7, #12]
    }
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800371a:	f000 fed3 	bl	80044c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <xTaskCheckForTimeOut+0xc4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d102      	bne.n	800373e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	e026      	b.n	800378c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <xTaskCheckForTimeOut+0xc8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d00a      	beq.n	8003760 <xTaskCheckForTimeOut+0x88>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	429a      	cmp	r2, r3
 8003752:	d305      	bcc.n	8003760 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e015      	b.n	800378c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	429a      	cmp	r2, r3
 8003768:	d20b      	bcs.n	8003782 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	1ad2      	subs	r2, r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff98 	bl	80036ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	e004      	b.n	800378c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800378c:	f000 feca 	bl	8004524 <vPortExitCritical>

    return xReturn;
 8003790:	69fb      	ldr	r3, [r7, #28]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200001fc 	.word	0x200001fc
 80037a0:	20000210 	.word	0x20000210

080037a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <vTaskMissedYield+0x14>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	2000020c 	.word	0x2000020c

080037bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037c4:	f000 f852 	bl	800386c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <prvIdleTask+0x28>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d9f9      	bls.n	80037c4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <prvIdleTask+0x2c>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037e0:	e7f0      	b.n	80037c4 <prvIdleTask+0x8>
 80037e2:	bf00      	nop
 80037e4:	20000124 	.word	0x20000124
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	e00c      	b.n	8003812 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <prvInitialiseTaskLists+0x60>)
 8003804:	4413      	add	r3, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fcc6 	bl	8002198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3301      	adds	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d9ef      	bls.n	80037f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003818:	480d      	ldr	r0, [pc, #52]	; (8003850 <prvInitialiseTaskLists+0x64>)
 800381a:	f7fe fcbd 	bl	8002198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800381e:	480d      	ldr	r0, [pc, #52]	; (8003854 <prvInitialiseTaskLists+0x68>)
 8003820:	f7fe fcba 	bl	8002198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <prvInitialiseTaskLists+0x6c>)
 8003826:	f7fe fcb7 	bl	8002198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800382a:	480c      	ldr	r0, [pc, #48]	; (800385c <prvInitialiseTaskLists+0x70>)
 800382c:	f7fe fcb4 	bl	8002198 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003830:	480b      	ldr	r0, [pc, #44]	; (8003860 <prvInitialiseTaskLists+0x74>)
 8003832:	f7fe fcb1 	bl	8002198 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <prvInitialiseTaskLists+0x78>)
 8003838:	4a05      	ldr	r2, [pc, #20]	; (8003850 <prvInitialiseTaskLists+0x64>)
 800383a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvInitialiseTaskLists+0x7c>)
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <prvInitialiseTaskLists+0x68>)
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000124 	.word	0x20000124
 8003850:	20000188 	.word	0x20000188
 8003854:	2000019c 	.word	0x2000019c
 8003858:	200001b8 	.word	0x200001b8
 800385c:	200001cc 	.word	0x200001cc
 8003860:	200001e4 	.word	0x200001e4
 8003864:	200001b0 	.word	0x200001b0
 8003868:	200001b4 	.word	0x200001b4

0800386c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003872:	e019      	b.n	80038a8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003874:	f000 fe26 	bl	80044c4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003878:	4b10      	ldr	r3, [pc, #64]	; (80038bc <prvCheckTasksWaitingTermination+0x50>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fd11 	bl	80022ac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <prvCheckTasksWaitingTermination+0x54>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3b01      	subs	r3, #1
 8003890:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <prvCheckTasksWaitingTermination+0x54>)
 8003892:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <prvCheckTasksWaitingTermination+0x58>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <prvCheckTasksWaitingTermination+0x58>)
 800389c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800389e:	f000 fe41 	bl	8004524 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f810 	bl	80038c8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <prvCheckTasksWaitingTermination+0x58>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e1      	bne.n	8003874 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200001cc 	.word	0x200001cc
 80038c0:	200001f8 	.word	0x200001f8
 80038c4:	200001e0 	.word	0x200001e0

080038c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f801 	bl	80048dc <vPortFree>
                vPortFree( pxTCB );
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fffe 	bl	80048dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <prvResetNextTaskUnblockTime+0x30>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <prvResetNextTaskUnblockTime+0x34>)
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038fe:	e005      	b.n	800390c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <prvResetNextTaskUnblockTime+0x30>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <prvResetNextTaskUnblockTime+0x34>)
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	200001b0 	.word	0x200001b0
 800391c:	20000218 	.word	0x20000218

08003920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <xTaskGetSchedulerState+0x34>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800392e:	2301      	movs	r3, #1
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	e008      	b.n	8003946 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <xTaskGetSchedulerState+0x38>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800393c:	2302      	movs	r3, #2
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	e001      	b.n	8003946 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003946:	687b      	ldr	r3, [r7, #4]
    }
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	20000204 	.word	0x20000204
 8003958:	20000220 	.word	0x20000220

0800395c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d068      	beq.n	8003a44 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003972:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <xTaskPriorityDisinherit+0xf4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	429a      	cmp	r2, r3
 800397a:	d00a      	beq.n	8003992 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60fb      	str	r3, [r7, #12]
    }
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60bb      	str	r3, [r7, #8]
    }
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d03e      	beq.n	8003a44 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d13a      	bne.n	8003a44 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fc6a 	bl	80022ac <uxListRemove>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43da      	mvns	r2, r3
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <xTaskPriorityDisinherit+0xf8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4013      	ands	r3, r2
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <xTaskPriorityDisinherit+0xf8>)
 80039f2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4619      	mov	r1, r3
 80039f8:	204a      	movs	r0, #74	; 0x4a
 80039fa:	f001 fe2f 	bl	800565c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f1c3 0205 	rsb	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <xTaskPriorityDisinherit+0xf8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <xTaskPriorityDisinherit+0xf8>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <xTaskPriorityDisinherit+0xfc>)
 8003a32:	441a      	add	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fe fbd9 	bl	80021f2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a44:	697b      	ldr	r3, [r7, #20]
    }
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000120 	.word	0x20000120
 8003a54:	20000200 	.word	0x20000200
 8003a58:	20000124 	.word	0x20000124

08003a5c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a66:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a6c:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fc1a 	bl	80022ac <uxListRemove>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4013      	ands	r3, r2
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a94:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d110      	bne.n	8003ac0 <prvAddCurrentTaskToDelayedList+0x64>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	211b      	movs	r1, #27
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fb98 	bl	80061e0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4820      	ldr	r0, [pc, #128]	; (8003b3c <prvAddCurrentTaskToDelayedList+0xe0>)
 8003aba:	f7fe fb9a 	bl	80021f2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003abe:	e032      	b.n	8003b26 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d20f      	bcs.n	8003af8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2104      	movs	r1, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fb7e 	bl	80061e0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe fba2 	bl	800223a <vListInsert>
}
 8003af6:	e016      	b.n	8003b26 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003af8:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2104      	movs	r1, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 fb6e 	bl	80061e0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7fe fb92 	bl	800223a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d202      	bcs.n	8003b26 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b20:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6013      	str	r3, [r2, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001fc 	.word	0x200001fc
 8003b34:	20000120 	.word	0x20000120
 8003b38:	20000200 	.word	0x20000200
 8003b3c:	200001e4 	.word	0x200001e4
 8003b40:	200001b4 	.word	0x200001b4
 8003b44:	200001b0 	.word	0x200001b0
 8003b48:	20000218 	.word	0x20000218

08003b4c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b56:	f000 fad5 	bl	8004104 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <xTimerCreateTimerTask+0x54>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <xTimerCreateTimerTask+0x58>)
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2302      	movs	r3, #2
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b70:	490d      	ldr	r1, [pc, #52]	; (8003ba8 <xTimerCreateTimerTask+0x5c>)
 8003b72:	480e      	ldr	r0, [pc, #56]	; (8003bac <xTimerCreateTimerTask+0x60>)
 8003b74:	f7ff f91e 	bl	8002db4 <xTaskCreate>
 8003b78:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	603b      	str	r3, [r7, #0]
    }
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b96:	687b      	ldr	r3, [r7, #4]
    }
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000254 	.word	0x20000254
 8003ba4:	20000258 	.word	0x20000258
 8003ba8:	0800700c 	.word	0x0800700c
 8003bac:	08003ce5 	.word	0x08003ce5

08003bb0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xTimerGenericCommand+0x2e>
        __asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	623b      	str	r3, [r7, #32]
    }
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <xTimerGenericCommand+0x98>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d02a      	beq.n	8003c3c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	dc18      	bgt.n	8003c2a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bf8:	f7ff fe92 	bl	8003920 <xTaskGetSchedulerState>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d109      	bne.n	8003c16 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <xTimerGenericCommand+0x98>)
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	f107 0114 	add.w	r1, r7, #20
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0e:	f7fe fc67 	bl	80024e0 <xQueueGenericSend>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24
 8003c14:	e012      	b.n	8003c3c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <xTimerGenericCommand+0x98>)
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f107 0114 	add.w	r1, r7, #20
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2200      	movs	r2, #0
 8003c22:	f7fe fc5d 	bl	80024e0 <xQueueGenericSend>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24
 8003c28:	e008      	b.n	8003c3c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <xTimerGenericCommand+0x98>)
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f107 0114 	add.w	r1, r7, #20
 8003c32:	2300      	movs	r3, #0
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	f7fe fd79 	bl	800272c <xQueueGenericSendFromISR>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3728      	adds	r7, #40	; 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000254 	.word	0x20000254

08003c4c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <prvProcessExpiredTimer+0x94>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe fb21 	bl	80022ac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d022      	beq.n	8003cbe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	18d1      	adds	r1, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	6978      	ldr	r0, [r7, #20]
 8003c86:	f000 f8d1 	bl	8003e2c <prvInsertTimerInActiveList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01f      	beq.n	8003cd0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c90:	2300      	movs	r3, #0
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff88 	bl	8003bb0 <xTimerGenericCommand>
 8003ca0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d113      	bne.n	8003cd0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	60fb      	str	r3, [r7, #12]
    }
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	4798      	blx	r3
    }
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	2000024c 	.word	0x2000024c

08003ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f857 	bl	8003da4 <prvGetNextExpireTime>
 8003cf6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f803 	bl	8003d08 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d02:	f000 f8d5 	bl	8003eb0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d06:	e7f1      	b.n	8003cec <prvTimerTask+0x8>

08003d08 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d12:	f7ff fa19 	bl	8003148 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f866 	bl	8003dec <prvSampleTimeNow>
 8003d20:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d130      	bne.n	8003d8a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <prvProcessTimerOrBlockTask+0x3c>
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d806      	bhi.n	8003d44 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d36:	f7ff fa15 	bl	8003164 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff85 	bl	8003c4c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d42:	e024      	b.n	8003d8e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <prvProcessTimerOrBlockTask+0x90>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <prvProcessTimerOrBlockTask+0x50>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <prvProcessTimerOrBlockTask+0x52>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <prvProcessTimerOrBlockTask+0x94>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f7fe ffef 	bl	8002d4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d6e:	f7ff f9f9 	bl	8003164 <xTaskResumeAll>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <prvProcessTimerOrBlockTask+0x98>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
    }
 8003d88:	e001      	b.n	8003d8e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d8a:	f7ff f9eb 	bl	8003164 <xTaskResumeAll>
    }
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000250 	.word	0x20000250
 8003d9c:	20000254 	.word	0x20000254
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <prvGetNextExpireTime+0x44>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <prvGetNextExpireTime+0x16>
 8003db6:	2201      	movs	r2, #1
 8003db8:	e000      	b.n	8003dbc <prvGetNextExpireTime+0x18>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dc8:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <prvGetNextExpireTime+0x44>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e001      	b.n	8003dd8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
    }
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	2000024c 	.word	0x2000024c

08003dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003df4:	f7ff fa56 	bl	80032a4 <xTaskGetTickCount>
 8003df8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <prvSampleTimeNow+0x3c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d205      	bcs.n	8003e10 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e04:	f000 f91a 	bl	800403c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <prvSampleTimeNow+0x3c>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000025c 	.word	0x2000025c

08003e2c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d812      	bhi.n	8003e78 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e01b      	b.n	8003e9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <prvInsertTimerInActiveList+0x7c>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f7fe f9e2 	bl	800223a <vListInsert>
 8003e76:	e012      	b.n	8003e9e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d206      	bcs.n	8003e8e <prvInsertTimerInActiveList+0x62>
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e007      	b.n	8003e9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <prvInsertTimerInActiveList+0x80>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe f9ce 	bl	800223a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e9e:	697b      	ldr	r3, [r7, #20]
    }
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000250 	.word	0x20000250
 8003eac:	2000024c 	.word	0x2000024c

08003eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eb6:	e0ae      	b.n	8004016 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f2c0 80aa 	blt.w	8004014 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe f9eb 	bl	80022ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff87 	bl	8003dec <prvSampleTimeNow>
 8003ede:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b09      	cmp	r3, #9
 8003ee4:	f200 8097 	bhi.w	8004016 <prvProcessReceivedCommands+0x166>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <prvProcessReceivedCommands+0x40>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f19 	.word	0x08003f19
 8003efc:	08003f8d 	.word	0x08003f8d
 8003f00:	08003fa1 	.word	0x08003fa1
 8003f04:	08003feb 	.word	0x08003feb
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f19 	.word	0x08003f19
 8003f10:	08003f8d 	.word	0x08003f8d
 8003f14:	08003fa1 	.word	0x08003fa1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	18d1      	adds	r1, r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f38:	f7ff ff78 	bl	8003e2c <prvInsertTimerInActiveList>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d069      	beq.n	8004016 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f48:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05e      	beq.n	8004016 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	441a      	add	r2, r3
 8003f60:	2300      	movs	r3, #0
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f6a:	f7ff fe21 	bl	8003bb0 <xTimerGenericCommand>
 8003f6e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d14f      	bne.n	8004016 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	61bb      	str	r3, [r7, #24]
    }
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f9e:	e03a      	b.n	8004016 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	617b      	str	r3, [r7, #20]
    }
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	18d1      	adds	r1, r2, r3
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe4:	f7ff ff22 	bl	8003e2c <prvInsertTimerInActiveList>
                        break;
 8003fe8:	e015      	b.n	8004016 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ffa:	f000 fc6f 	bl	80048dc <vPortFree>
 8003ffe:	e00a      	b.n	8004016 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004012:	e000      	b.n	8004016 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004014:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <prvProcessReceivedCommands+0x188>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f107 0108 	add.w	r1, r7, #8
 800401e:	2200      	movs	r2, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fc41 	bl	80028a8 <xQueueReceive>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	f47f af45 	bne.w	8003eb8 <prvProcessReceivedCommands+0x8>
        }
    }
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000254 	.word	0x20000254

0800403c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004042:	e048      	b.n	80040d6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <prvSwitchTimerLists+0xc0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <prvSwitchTimerLists+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3304      	adds	r3, #4
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe f925 	bl	80022ac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02e      	beq.n	80040d6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d90e      	bls.n	80040a8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <prvSwitchTimerLists+0xc0>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7fe f8ca 	bl	800223a <vListInsert>
 80040a6:	e016      	b.n	80040d6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040a8:	2300      	movs	r3, #0
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2300      	movs	r3, #0
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	2100      	movs	r1, #0
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff fd7c 	bl	8003bb0 <xTimerGenericCommand>
 80040b8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	603b      	str	r3, [r7, #0]
    }
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <prvSwitchTimerLists+0xc0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1b1      	bne.n	8004044 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prvSwitchTimerLists+0xc0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <prvSwitchTimerLists+0xc4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <prvSwitchTimerLists+0xc0>)
 80040ec:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <prvSwitchTimerLists+0xc4>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	6013      	str	r3, [r2, #0]
    }
 80040f4:	bf00      	nop
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	2000024c 	.word	0x2000024c
 8004100:	20000250 	.word	0x20000250

08004104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004108:	f000 f9dc 	bl	80044c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <prvCheckForValidListAndQueue+0x54>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11d      	bne.n	8004150 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004114:	4811      	ldr	r0, [pc, #68]	; (800415c <prvCheckForValidListAndQueue+0x58>)
 8004116:	f7fe f83f 	bl	8002198 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800411a:	4811      	ldr	r0, [pc, #68]	; (8004160 <prvCheckForValidListAndQueue+0x5c>)
 800411c:	f7fe f83c 	bl	8002198 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <prvCheckForValidListAndQueue+0x60>)
 8004122:	4a0e      	ldr	r2, [pc, #56]	; (800415c <prvCheckForValidListAndQueue+0x58>)
 8004124:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <prvCheckForValidListAndQueue+0x64>)
 8004128:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <prvCheckForValidListAndQueue+0x5c>)
 800412a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800412c:	2200      	movs	r2, #0
 800412e:	210c      	movs	r1, #12
 8004130:	200a      	movs	r0, #10
 8004132:	f7fe f94d 	bl	80023d0 <xQueueGenericCreate>
 8004136:	4603      	mov	r3, r0
 8004138:	4a07      	ldr	r2, [pc, #28]	; (8004158 <prvCheckForValidListAndQueue+0x54>)
 800413a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <prvCheckForValidListAndQueue+0x54>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <prvCheckForValidListAndQueue+0x54>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4908      	ldr	r1, [pc, #32]	; (800416c <prvCheckForValidListAndQueue+0x68>)
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fdcc 	bl	8002ce8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004150:	f000 f9e8 	bl	8004524 <vPortExitCritical>
    }
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000254 	.word	0x20000254
 800415c:	20000224 	.word	0x20000224
 8004160:	20000238 	.word	0x20000238
 8004164:	2000024c 	.word	0x2000024c
 8004168:	20000250 	.word	0x20000250
 800416c:	08007014 	.word	0x08007014

08004170 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3b04      	subs	r3, #4
 8004180:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004188:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b04      	subs	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b04      	subs	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <pxPortInitialiseStack+0x64>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b14      	subs	r3, #20
 80041aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f06f 0202 	mvn.w	r2, #2
 80041be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3b20      	subs	r3, #32
 80041c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	080041d9 	.word	0x080041d9

080041d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <prvTaskExitError+0x54>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d00a      	beq.n	8004202 <prvTaskExitError+0x2a>
        __asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60fb      	str	r3, [r7, #12]
    }
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <prvTaskExitError+0x28>
        __asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60bb      	str	r3, [r7, #8]
    }
 8004214:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004216:	bf00      	nop
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0fc      	beq.n	8004218 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000010 	.word	0x20000010

08004230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <pxCurrentTCBConst2>)
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	6808      	ldr	r0, [r1, #0]
 8004236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	f380 8809 	msr	PSP, r0
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f380 8811 	msr	BASEPRI, r0
 800424a:	4770      	bx	lr
 800424c:	f3af 8000 	nop.w

08004250 <pxCurrentTCBConst2>:
 8004250:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004258:	4808      	ldr	r0, [pc, #32]	; (800427c <prvPortStartFirstTask+0x24>)
 800425a:	6800      	ldr	r0, [r0, #0]
 800425c:	6800      	ldr	r0, [r0, #0]
 800425e:	f380 8808 	msr	MSP, r0
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8814 	msr	CONTROL, r0
 800426a:	b662      	cpsie	i
 800426c:	b661      	cpsie	f
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	df00      	svc	0
 8004278:	bf00      	nop
 800427a:	0000      	.short	0x0000
 800427c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop

08004284 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428a:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <xPortStartScheduler+0x120>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a46      	ldr	r2, [pc, #280]	; (80043a8 <xPortStartScheduler+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10a      	bne.n	80042aa <xPortStartScheduler+0x26>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	613b      	str	r3, [r7, #16]
    }
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042aa:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <xPortStartScheduler+0x120>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <xPortStartScheduler+0x128>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10a      	bne.n	80042ca <xPortStartScheduler+0x46>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <xPortStartScheduler+0x12c>)
 80042cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <xPortStartScheduler+0x130>)
 80042f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f2:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <xPortStartScheduler+0x134>)
 80042f4:	2207      	movs	r2, #7
 80042f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f8:	e009      	b.n	800430e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042fa:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <xPortStartScheduler+0x134>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <xPortStartScheduler+0x134>)
 8004302:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d0ef      	beq.n	80042fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <xPortStartScheduler+0x134>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00a      	beq.n	800433c <xPortStartScheduler+0xb8>
        __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60bb      	str	r3, [r7, #8]
    }
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800433c:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <xPortStartScheduler+0x134>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <xPortStartScheduler+0x134>)
 8004344:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <xPortStartScheduler+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <xPortStartScheduler+0x134>)
 8004350:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <xPortStartScheduler+0x138>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <xPortStartScheduler+0x138>)
 8004360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004364:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <xPortStartScheduler+0x138>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <xPortStartScheduler+0x138>)
 800436c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004372:	f000 f963 	bl	800463c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <xPortStartScheduler+0x13c>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800437c:	f000 f982 	bl	8004684 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <xPortStartScheduler+0x140>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <xPortStartScheduler+0x140>)
 8004386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800438a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800438c:	f7ff ff64 	bl	8004258 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004390:	f7ff f866 	bl	8003460 <vTaskSwitchContext>
    prvTaskExitError();
 8004394:	f7ff ff20 	bl	80041d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	410fc271 	.word	0x410fc271
 80043ac:	410fc270 	.word	0x410fc270
 80043b0:	e000e400 	.word	0xe000e400
 80043b4:	20000260 	.word	0x20000260
 80043b8:	20000264 	.word	0x20000264
 80043bc:	e000ed20 	.word	0xe000ed20
 80043c0:	20000010 	.word	0x20000010
 80043c4:	e000ef34 	.word	0xe000ef34

080043c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <vInitPrioGroupValue+0xe4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a37      	ldr	r2, [pc, #220]	; (80044b0 <vInitPrioGroupValue+0xe8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10a      	bne.n	80043ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	613b      	str	r3, [r7, #16]
    }
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <vInitPrioGroupValue+0xe4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <vInitPrioGroupValue+0xec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10a      	bne.n	800440e <vInitPrioGroupValue+0x46>
        __asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	60fb      	str	r3, [r7, #12]
    }
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800440e:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <vInitPrioGroupValue+0xf0>)
 8004410:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b22      	ldr	r3, [pc, #136]	; (80044bc <vInitPrioGroupValue+0xf4>)
 8004434:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004436:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800443c:	e009      	b.n	8004452 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800443e:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004446:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d0ef      	beq.n	800443e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1c3 0307 	rsb	r3, r3, #7
 8004466:	2b04      	cmp	r3, #4
 8004468:	d00a      	beq.n	8004480 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	60bb      	str	r3, [r7, #8]
    }
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004488:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <vInitPrioGroupValue+0xf8>)
 8004494:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000ed00 	.word	0xe000ed00
 80044b0:	410fc271 	.word	0x410fc271
 80044b4:	410fc270 	.word	0x410fc270
 80044b8:	e000e400 	.word	0xe000e400
 80044bc:	20000260 	.word	0x20000260
 80044c0:	20000264 	.word	0x20000264

080044c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
        __asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
    }
 80044dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <vPortEnterCritical+0x58>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <vPortEnterCritical+0x58>)
 80044e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <vPortEnterCritical+0x58>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10f      	bne.n	8004510 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortEnterCritical+0x5c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <vPortEnterCritical+0x4c>
        __asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	603b      	str	r3, [r7, #0]
    }
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vPortEnterCritical+0x4a>
    }
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000010 	.word	0x20000010
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <vPortExitCritical+0x50>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vPortExitCritical+0x24>
        __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
    }
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <vPortExitCritical+0x50>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <vPortExitCritical+0x50>)
 8004550:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <vPortExitCritical+0x50>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <vPortExitCritical+0x42>
 800455a:	2300      	movs	r3, #0
 800455c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f383 8811 	msr	BASEPRI, r3
    }
 8004564:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000010 	.word	0x20000010
	...

08004580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004580:	f3ef 8009 	mrs	r0, PSP
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <pxCurrentTCBConst>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f01e 0f10 	tst.w	lr, #16
 8004590:	bf08      	it	eq
 8004592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045a4:	f380 8811 	msr	BASEPRI, r0
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f7fe ff56 	bl	8003460 <vTaskSwitchContext>
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f380 8811 	msr	BASEPRI, r0
 80045bc:	bc09      	pop	{r0, r3}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c6:	f01e 0f10 	tst.w	lr, #16
 80045ca:	bf08      	it	eq
 80045cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045d0:	f380 8809 	msr	PSP, r0
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst>:
 80045e0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
        __asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
    }
 8004600:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004602:	f001 fc91 	bl	8005f28 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004606:	f7fe fe6f 	bl	80032e8 <xTaskIncrementTick>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004610:	f001 fce8 	bl	8005fe4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <SysTick_Handler+0x50>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e001      	b.n	8004622 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800461e:	f001 fcc5 	bl	8005fac <SEGGER_SYSVIEW_RecordExitISR>
 8004622:	2300      	movs	r3, #0
 8004624:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f383 8811 	msr	BASEPRI, r3
    }
 800462c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <vPortSetupTimerInterrupt+0x38>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <vPortSetupTimerInterrupt+0x3c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <vPortSetupTimerInterrupt+0x40>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <vPortSetupTimerInterrupt+0x44>)
 800465a:	3b01      	subs	r3, #1
 800465c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000e010 	.word	0xe000e010
 8004674:	e000e018 	.word	0xe000e018
 8004678:	20000000 	.word	0x20000000
 800467c:	10624dd3 	.word	0x10624dd3
 8004680:	e000e014 	.word	0xe000e014

08004684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004694 <vPortEnableVFP+0x10>
 8004688:	6801      	ldr	r1, [r0, #0]
 800468a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800468e:	6001      	str	r1, [r0, #0]
 8004690:	4770      	bx	lr
 8004692:	0000      	.short	0x0000
 8004694:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop

0800469c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80046a2:	f3ef 8305 	mrs	r3, IPSR
 80046a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	d914      	bls.n	80046d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <vPortValidateInterruptPriority+0x70>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <vPortValidateInterruptPriority+0x74>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	7afa      	ldrb	r2, [r7, #11]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20a      	bcs.n	80046d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
    }
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <vPortValidateInterruptPriority+0x78>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <vPortValidateInterruptPriority+0x7c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d90a      	bls.n	80046fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	603b      	str	r3, [r7, #0]
    }
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <vPortValidateInterruptPriority+0x60>
    }
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	e000e3f0 	.word	0xe000e3f0
 8004710:	20000260 	.word	0x20000260
 8004714:	e000ed0c 	.word	0xe000ed0c
 8004718:	20000264 	.word	0x20000264

0800471c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004728:	f7fe fd0e 	bl	8003148 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800472c:	4b65      	ldr	r3, [pc, #404]	; (80048c4 <pvPortMalloc+0x1a8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004734:	f000 f934 	bl	80049a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <pvPortMalloc+0x1ac>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 80a7 	bne.w	8004894 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02d      	beq.n	80047a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800474c:	2208      	movs	r2, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d227      	bcs.n	80047a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004758:	2208      	movs	r2, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d021      	beq.n	80047ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f023 0307 	bic.w	r3, r3, #7
 8004770:	3308      	adds	r3, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d214      	bcs.n	80047a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f023 0307 	bic.w	r3, r3, #7
 800477e:	3308      	adds	r3, #8
 8004780:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	2b00      	cmp	r3, #0
 800478a:	d010      	beq.n	80047ae <pvPortMalloc+0x92>
        __asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	617b      	str	r3, [r7, #20]
    }
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047a6:	e002      	b.n	80047ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	e000      	b.n	80047b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d06e      	beq.n	8004894 <pvPortMalloc+0x178>
 80047b6:	4b45      	ldr	r3, [pc, #276]	; (80048cc <pvPortMalloc+0x1b0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d869      	bhi.n	8004894 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047c0:	4b43      	ldr	r3, [pc, #268]	; (80048d0 <pvPortMalloc+0x1b4>)
 80047c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <pvPortMalloc+0x1b4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ca:	e004      	b.n	80047d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d903      	bls.n	80047e8 <pvPortMalloc+0xcc>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f1      	bne.n	80047cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047e8:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <pvPortMalloc+0x1a8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d050      	beq.n	8004894 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2208      	movs	r2, #8
 80047f8:	4413      	add	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	2308      	movs	r3, #8
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	429a      	cmp	r2, r3
 8004812:	d91f      	bls.n	8004854 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4413      	add	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <pvPortMalloc+0x120>
        __asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	613b      	str	r3, [r7, #16]
    }
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	1ad2      	subs	r2, r2, r3
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800484e:	69b8      	ldr	r0, [r7, #24]
 8004850:	f000 f908 	bl	8004a64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <pvPortMalloc+0x1b0>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <pvPortMalloc+0x1b0>)
 8004860:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <pvPortMalloc+0x1b0>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <pvPortMalloc+0x1b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d203      	bcs.n	8004876 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <pvPortMalloc+0x1b0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <pvPortMalloc+0x1b8>)
 8004874:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <pvPortMalloc+0x1ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	431a      	orrs	r2, r3
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <pvPortMalloc+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <pvPortMalloc+0x1bc>)
 8004892:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004894:	f7fe fc66 	bl	8003164 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <pvPortMalloc+0x19c>
        __asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60fb      	str	r3, [r7, #12]
    }
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80048b8:	69fb      	ldr	r3, [r7, #28]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20012e70 	.word	0x20012e70
 80048c8:	20012e84 	.word	0x20012e84
 80048cc:	20012e74 	.word	0x20012e74
 80048d0:	20012e68 	.word	0x20012e68
 80048d4:	20012e78 	.word	0x20012e78
 80048d8:	20012e7c 	.word	0x20012e7c

080048dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04d      	beq.n	800498a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048ee:	2308      	movs	r3, #8
 80048f0:	425b      	negs	r3, r3
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	4b24      	ldr	r3, [pc, #144]	; (8004994 <vPortFree+0xb8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <vPortFree+0x44>
        __asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	60fb      	str	r3, [r7, #12]
    }
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <vPortFree+0x62>
        __asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	60bb      	str	r3, [r7, #8]
    }
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <vPortFree+0xb8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01e      	beq.n	800498a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11a      	bne.n	800498a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <vPortFree+0xb8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	43db      	mvns	r3, r3
 800495e:	401a      	ands	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004964:	f7fe fbf0 	bl	8003148 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <vPortFree+0xbc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4413      	add	r3, r2
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <vPortFree+0xbc>)
 8004974:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004976:	6938      	ldr	r0, [r7, #16]
 8004978:	f000 f874 	bl	8004a64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <vPortFree+0xc0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a06      	ldr	r2, [pc, #24]	; (800499c <vPortFree+0xc0>)
 8004984:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004986:	f7fe fbed 	bl	8003164 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20012e84 	.word	0x20012e84
 8004998:	20012e74 	.word	0x20012e74
 800499c:	20012e80 	.word	0x20012e80

080049a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80049aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80049ac:	4b27      	ldr	r3, [pc, #156]	; (8004a4c <prvHeapInit+0xac>)
 80049ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3307      	adds	r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0307 	bic.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <prvHeapInit+0xac>)
 80049d0:	4413      	add	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049d8:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <prvHeapInit+0xb0>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049de:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <prvHeapInit+0xb0>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049ec:	2208      	movs	r2, #8
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0307 	bic.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <prvHeapInit+0xb4>)
 8004a00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <prvHeapInit+0xb4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <prvHeapInit+0xb4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <prvHeapInit+0xb4>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <prvHeapInit+0xb8>)
 8004a2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <prvHeapInit+0xbc>)
 8004a36:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <prvHeapInit+0xc0>)
 8004a3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000268 	.word	0x20000268
 8004a50:	20012e68 	.word	0x20012e68
 8004a54:	20012e70 	.word	0x20012e70
 8004a58:	20012e78 	.word	0x20012e78
 8004a5c:	20012e74 	.word	0x20012e74
 8004a60:	20012e84 	.word	0x20012e84

08004a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <prvInsertBlockIntoFreeList+0xac>)
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e002      	b.n	8004a78 <prvInsertBlockIntoFreeList+0x14>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d8f7      	bhi.n	8004a72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d108      	bne.n	8004aa6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d118      	bne.n	8004aec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d00d      	beq.n	8004ae2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	441a      	add	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e008      	b.n	8004af4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e003      	b.n	8004af4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d002      	beq.n	8004b02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20012e68 	.word	0x20012e68
 8004b14:	20012e70 	.word	0x20012e70

08004b18 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b1c:	4803      	ldr	r0, [pc, #12]	; (8004b2c <_cbSendSystemDesc+0x14>)
 8004b1e:	f001 f9ad 	bl	8005e7c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b22:	4803      	ldr	r0, [pc, #12]	; (8004b30 <_cbSendSystemDesc+0x18>)
 8004b24:	f001 f9aa 	bl	8005e7c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b28:	bf00      	nop
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	0800701c 	.word	0x0800701c
 8004b30:	08007058 	.word	0x08007058

08004b34 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b42:	4a06      	ldr	r2, [pc, #24]	; (8004b5c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b44:	f000 fd18 	bl	8005578 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b4c:	f000 fd58 	bl	8005600 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000000 	.word	0x20000000
 8004b58:	08004b19 	.word	0x08004b19
 8004b5c:	080070f8 	.word	0x080070f8

08004b60 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	e033      	b.n	8004bd4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b6c:	491e      	ldr	r1, [pc, #120]	; (8004be8 <_cbSendTaskList+0x88>)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	491a      	ldr	r1, [pc, #104]	; (8004be8 <_cbSendTaskList+0x88>)
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	4c16      	ldr	r4, [pc, #88]	; (8004be8 <_cbSendTaskList+0x88>)
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4423      	add	r3, r4
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	4d11      	ldr	r5, [pc, #68]	; (8004be8 <_cbSendTaskList+0x88>)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	442b      	add	r3, r5
 8004bae:	330c      	adds	r3, #12
 8004bb0:	681d      	ldr	r5, [r3, #0]
 8004bb2:	4e0d      	ldr	r6, [pc, #52]	; (8004be8 <_cbSendTaskList+0x88>)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4433      	add	r3, r6
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	462b      	mov	r3, r5
 8004bc8:	4622      	mov	r2, r4
 8004bca:	f000 f8bd 	bl	8004d48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <_cbSendTaskList+0x8c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3c6      	bcc.n	8004b6c <_cbSendTaskList+0xc>
  }
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be8:	20012e88 	.word	0x20012e88
 8004bec:	20012f28 	.word	0x20012f28

08004bf0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004bf8:	f7fe fb64 	bl	80032c4 <xTaskGetTickCountFromISR>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2200      	movs	r2, #0
 8004c00:	469a      	mov	sl, r3
 8004c02:	4693      	mov	fp, r2
 8004c04:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	f04f 0a00 	mov.w	sl, #0
 8004c14:	f04f 0b00 	mov.w	fp, #0
 8004c18:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c1c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c20:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c24:	4652      	mov	r2, sl
 8004c26:	465b      	mov	r3, fp
 8004c28:	1a14      	subs	r4, r2, r0
 8004c2a:	eb63 0501 	sbc.w	r5, r3, r1
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	00ab      	lsls	r3, r5, #2
 8004c38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c3c:	00a2      	lsls	r2, r4, #2
 8004c3e:	4614      	mov	r4, r2
 8004c40:	461d      	mov	r5, r3
 8004c42:	eb14 0800 	adds.w	r8, r4, r0
 8004c46:	eb45 0901 	adc.w	r9, r5, r1
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5e:	4690      	mov	r8, r2
 8004c60:	4699      	mov	r9, r3
 8004c62:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c66:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c86:	2205      	movs	r2, #5
 8004c88:	492b      	ldr	r1, [pc, #172]	; (8004d38 <SYSVIEW_AddTask+0xc0>)
 8004c8a:	68b8      	ldr	r0, [r7, #8]
 8004c8c:	f001 fc74 	bl	8006578 <memcmp>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04b      	beq.n	8004d2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b07      	cmp	r3, #7
 8004c9c:	d903      	bls.n	8004ca6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c9e:	4828      	ldr	r0, [pc, #160]	; (8004d40 <SYSVIEW_AddTask+0xc8>)
 8004ca0:	f001 fbea 	bl	8006478 <SEGGER_SYSVIEW_Warn>
    return;
 8004ca4:	e044      	b.n	8004d30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ca6:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4926      	ldr	r1, [pc, #152]	; (8004d44 <SYSVIEW_AddTask+0xcc>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4921      	ldr	r1, [pc, #132]	; (8004d44 <SYSVIEW_AddTask+0xcc>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3304      	adds	r3, #4
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	491b      	ldr	r1, [pc, #108]	; (8004d44 <SYSVIEW_AddTask+0xcc>)
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4916      	ldr	r1, [pc, #88]	; (8004d44 <SYSVIEW_AddTask+0xcc>)
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4910      	ldr	r1, [pc, #64]	; (8004d44 <SYSVIEW_AddTask+0xcc>)
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <SYSVIEW_AddTask+0xc4>)
 8004d1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f80e 	bl	8004d48 <SYSVIEW_SendTaskInfo>
 8004d2c:	e000      	b.n	8004d30 <SYSVIEW_AddTask+0xb8>
    return;
 8004d2e:	bf00      	nop

}
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	08007068 	.word	0x08007068
 8004d3c:	20012f28 	.word	0x20012f28
 8004d40:	08007070 	.word	0x08007070
 8004d44:	20012e88 	.word	0x20012e88

08004d48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	2214      	movs	r2, #20
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fc28 	bl	80065b4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 ff85 	bl	8005c8c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d82:	bf00      	nop
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d92:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <_DoInit+0x98>)
 8004d94:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <_DoInit+0x9c>)
 8004da6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <_DoInit+0xa0>)
 8004dac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004db4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <_DoInit+0x9c>)
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <_DoInit+0xa4>)
 8004dd2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3307      	adds	r3, #7
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <_DoInit+0xa8>)
 8004df2:	6810      	ldr	r0, [r2, #0]
 8004df4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004df6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <_DoInit+0xac>)
 8004dfe:	6810      	ldr	r0, [r2, #0]
 8004e00:	6018      	str	r0, [r3, #0]
 8004e02:	8891      	ldrh	r1, [r2, #4]
 8004e04:	7992      	ldrb	r2, [r2, #6]
 8004e06:	8099      	strh	r1, [r3, #4]
 8004e08:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e0a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e14:	f3bf 8f5f 	dmb	sy
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	20012f2c 	.word	0x20012f2c
 8004e28:	080070c0 	.word	0x080070c0
 8004e2c:	20012fd4 	.word	0x20012fd4
 8004e30:	200133d4 	.word	0x200133d4
 8004e34:	080070cc 	.word	0x080070cc
 8004e38:	080070d0 	.word	0x080070d0

08004e3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e48:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e56:	f7ff ff99 	bl	8004d8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	3360      	adds	r3, #96	; 0x60
 8004e66:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d92b      	bls.n	8004ee0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf28      	it	cs
 8004e9a:	4613      	movcs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	4413      	add	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	6939      	ldr	r1, [r7, #16]
 8004eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eae:	f001 fb73 	bl	8006598 <memcpy>
    NumBytesRead += NumBytesRem;
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d101      	bne.n	8004ee0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bf28      	it	cs
 8004ef0:	4613      	movcs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	4413      	add	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0a:	f001 fb45 	bl	8006598 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3730      	adds	r7, #48	; 0x30
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20012f2c 	.word	0x20012f2c

08004f48 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f56:	4b3d      	ldr	r3, [pc, #244]	; (800504c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f64:	f7ff ff12 	bl	8004d8c <_DoInit>
  SEGGER_RTT_LOCK();
 8004f68:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6c:	f04f 0120 	mov.w	r1, #32
 8004f70:	f381 8811 	msr	BASEPRI, r1
 8004f74:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f76:	4b35      	ldr	r3, [pc, #212]	; (800504c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f78:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f7e:	6939      	ldr	r1, [r7, #16]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	4613      	mov	r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3304      	adds	r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	dbeb      	blt.n	8004f7e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004fa6:	e000      	b.n	8004faa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004fa8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	da3f      	bge.n	8005034 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004fb4:	6939      	ldr	r1, [r7, #16]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	4613      	mov	r3, r2
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004fc8:	6939      	ldr	r1, [r7, #16]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3304      	adds	r3, #4
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	440b      	add	r3, r1
 8004fec:	3320      	adds	r3, #32
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	440b      	add	r3, r1
 8005000:	3328      	adds	r3, #40	; 0x28
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800501a:	6939      	ldr	r1, [r7, #16]
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	332c      	adds	r3, #44	; 0x2c
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800502e:	f3bf 8f5f 	dmb	sy
 8005032:	e002      	b.n	800503a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005034:	f04f 33ff 	mov.w	r3, #4294967295
 8005038:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005040:	69fb      	ldr	r3, [r7, #28]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20012f2c 	.word	0x20012f2c

08005050 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800506c:	f7ff fe8e 	bl	8004d8c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005070:	4b2e      	ldr	r3, [pc, #184]	; (800512c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005072:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	461a      	mov	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4293      	cmp	r3, r2
 800507e:	d24d      	bcs.n	800511c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005080:	f3ef 8311 	mrs	r3, BASEPRI
 8005084:	f04f 0120 	mov.w	r1, #32
 8005088:	f381 8811 	msr	BASEPRI, r1
 800508c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d031      	beq.n	80050f8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	440b      	add	r3, r1
 80050a2:	3360      	adds	r3, #96	; 0x60
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80050a8:	6979      	ldr	r1, [r7, #20]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4413      	add	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	440b      	add	r3, r1
 80050b6:	3364      	adds	r3, #100	; 0x64
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80050bc:	6979      	ldr	r1, [r7, #20]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	440b      	add	r3, r1
 80050ca:	3368      	adds	r3, #104	; 0x68
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	440b      	add	r3, r1
 80050de:	3370      	adds	r3, #112	; 0x70
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	440b      	add	r3, r1
 80050f2:	336c      	adds	r3, #108	; 0x6c
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4613      	mov	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	4413      	add	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	440b      	add	r3, r1
 8005106:	3374      	adds	r3, #116	; 0x74
 8005108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800510c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e002      	b.n	8005122 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005122:	69fb      	ldr	r3, [r7, #28]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20012f2c 	.word	0x20012f2c

08005130 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005140:	e002      	b.n	8005148 <_EncodeStr+0x18>
    Len++;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3301      	adds	r3, #1
 8005146:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4413      	add	r3, r2
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f6      	bne.n	8005142 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d901      	bls.n	8005160 <_EncodeStr+0x30>
    Len = Limit;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2bfe      	cmp	r3, #254	; 0xfe
 8005164:	d806      	bhi.n	8005174 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	60fa      	str	r2, [r7, #12]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e011      	b.n	8005198 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	60fa      	str	r2, [r7, #12]
 800517a:	22ff      	movs	r2, #255	; 0xff
 800517c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	60fa      	str	r2, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	0a19      	lsrs	r1, r3, #8
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	60fa      	str	r2, [r7, #12]
 8005194:	b2ca      	uxtb	r2, r1
 8005196:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800519c:	e00a      	b.n	80051b4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	1c53      	adds	r3, r2, #1
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	60f9      	str	r1, [r7, #12]
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	701a      	strb	r2, [r3, #0]
    n++;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	3301      	adds	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3f0      	bcc.n	800519e <_EncodeStr+0x6e>
  }
  return pPayload;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <_HandleIncomingPacket+0xe0>)
 80051ec:	7e1b      	ldrb	r3, [r3, #24]
 80051ee:	4618      	mov	r0, r3
 80051f0:	1cfb      	adds	r3, r7, #3
 80051f2:	2201      	movs	r2, #1
 80051f4:	4619      	mov	r1, r3
 80051f6:	f7ff fe21 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
 80051fa:	4603      	mov	r3, r0
 80051fc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	dd54      	ble.n	80052ae <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b80      	cmp	r3, #128	; 0x80
 8005208:	d032      	beq.n	8005270 <_HandleIncomingPacket+0x8c>
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	dc42      	bgt.n	8005294 <_HandleIncomingPacket+0xb0>
 800520e:	2b07      	cmp	r3, #7
 8005210:	dc16      	bgt.n	8005240 <_HandleIncomingPacket+0x5c>
 8005212:	2b00      	cmp	r3, #0
 8005214:	dd3e      	ble.n	8005294 <_HandleIncomingPacket+0xb0>
 8005216:	3b01      	subs	r3, #1
 8005218:	2b06      	cmp	r3, #6
 800521a:	d83b      	bhi.n	8005294 <_HandleIncomingPacket+0xb0>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <_HandleIncomingPacket+0x40>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005247 	.word	0x08005247
 8005228:	0800524d 	.word	0x0800524d
 800522c:	08005253 	.word	0x08005253
 8005230:	08005259 	.word	0x08005259
 8005234:	0800525f 	.word	0x0800525f
 8005238:	08005265 	.word	0x08005265
 800523c:	0800526b 	.word	0x0800526b
 8005240:	2b7f      	cmp	r3, #127	; 0x7f
 8005242:	d036      	beq.n	80052b2 <_HandleIncomingPacket+0xce>
 8005244:	e026      	b.n	8005294 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005246:	f000 fba7 	bl	8005998 <SEGGER_SYSVIEW_Start>
      break;
 800524a:	e037      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800524c:	f000 fc5e 	bl	8005b0c <SEGGER_SYSVIEW_Stop>
      break;
 8005250:	e034      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005252:	f000 fe37 	bl	8005ec4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005256:	e031      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005258:	f000 fdfc 	bl	8005e54 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800525c:	e02e      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800525e:	f000 fc7b 	bl	8005b58 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005262:	e02b      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005264:	f001 f8ca 	bl	80063fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005268:	e028      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800526a:	f001 f8a9 	bl	80063c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800526e:	e025      	b.n	80052bc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <_HandleIncomingPacket+0xe0>)
 8005272:	7e1b      	ldrb	r3, [r3, #24]
 8005274:	4618      	mov	r0, r3
 8005276:	1cfb      	adds	r3, r7, #3
 8005278:	2201      	movs	r2, #1
 800527a:	4619      	mov	r1, r3
 800527c:	f7ff fdde 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
 8005280:	4603      	mov	r3, r0
 8005282:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	dd15      	ble.n	80052b6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f817 	bl	80062c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005292:	e010      	b.n	80052b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	b25b      	sxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	da0e      	bge.n	80052ba <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <_HandleIncomingPacket+0xe0>)
 800529e:	7e1b      	ldrb	r3, [r3, #24]
 80052a0:	4618      	mov	r0, r3
 80052a2:	1cfb      	adds	r3, r7, #3
 80052a4:	2201      	movs	r2, #1
 80052a6:	4619      	mov	r1, r3
 80052a8:	f7ff fdc8 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80052ac:	e005      	b.n	80052ba <_HandleIncomingPacket+0xd6>
    }
  }
 80052ae:	bf00      	nop
 80052b0:	e004      	b.n	80052bc <_HandleIncomingPacket+0xd8>
      break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <_HandleIncomingPacket+0xd8>
      break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <_HandleIncomingPacket+0xd8>
      break;
 80052ba:	bf00      	nop
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200143ec 	.word	0x200143ec

080052c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	; 0x30
 80052cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80052ce:	2301      	movs	r3, #1
 80052d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	3301      	adds	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	e00b      	b.n	80052fc <_TrySendOverflowPacket+0x34>
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	1c59      	adds	r1, r3, #1
 80052ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	09db      	lsrs	r3, r3, #7
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005300:	d8f0      	bhi.n	80052e4 <_TrySendOverflowPacket+0x1c>
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005312:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <_TrySendOverflowPacket+0xe0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005318:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	e00b      	b.n	8005344 <_TrySendOverflowPacket+0x7c>
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	6279      	str	r1, [r7, #36]	; 0x24
 8005336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d8f0      	bhi.n	800532c <_TrySendOverflowPacket+0x64>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	627a      	str	r2, [r7, #36]	; 0x24
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	4618      	mov	r0, r3
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	461a      	mov	r2, r3
 8005368:	1d3b      	adds	r3, r7, #4
 800536a:	4619      	mov	r1, r3
 800536c:	f7fa ff30 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005370:	4603      	mov	r3, r0
 8005372:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	3b01      	subs	r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e004      	b.n	8005398 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	3301      	adds	r3, #1
 8005394:	4a03      	ldr	r2, [pc, #12]	; (80053a4 <_TrySendOverflowPacket+0xdc>)
 8005396:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005398:	693b      	ldr	r3, [r7, #16]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3730      	adds	r7, #48	; 0x30
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200143ec 	.word	0x200143ec
 80053a8:	e0001004 	.word	0xe0001004

080053ac <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80053b8:	4b6c      	ldr	r3, [pc, #432]	; (800556c <_SendPacket+0x1c0>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d010      	beq.n	80053e2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80053c0:	4b6a      	ldr	r3, [pc, #424]	; (800556c <_SendPacket+0x1c0>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a3 	beq.w	8005510 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80053ca:	4b68      	ldr	r3, [pc, #416]	; (800556c <_SendPacket+0x1c0>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d109      	bne.n	80053e6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80053d2:	f7ff ff79 	bl	80052c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053d6:	4b65      	ldr	r3, [pc, #404]	; (800556c <_SendPacket+0x1c0>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	f040 809a 	bne.w	8005514 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80053e0:	e001      	b.n	80053e6 <_SendPacket+0x3a>
    goto Send;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <_SendPacket+0x3c>
Send:
 80053e6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b1f      	cmp	r3, #31
 80053ec:	d809      	bhi.n	8005402 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053ee:	4b5f      	ldr	r3, [pc, #380]	; (800556c <_SendPacket+0x1c0>)
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f040 808b 	bne.w	8005518 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b17      	cmp	r3, #23
 8005406:	d807      	bhi.n	8005418 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b01      	subs	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e03d      	b.n	8005494 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b7f      	cmp	r3, #127	; 0x7f
 8005424:	d912      	bls.n	800544c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	09da      	lsrs	r2, r3, #7
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b01      	subs	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	3a01      	subs	r2, #1
 800543e:	60fa      	str	r2, [r7, #12]
 8005440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e006      	b.n	800545a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3b01      	subs	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d912      	bls.n	8005486 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	09da      	lsrs	r2, r3, #7
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	3a01      	subs	r2, #1
 8005478:	60fa      	str	r2, [r7, #12]
 800547a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e006      	b.n	8005494 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3b01      	subs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005494:	4b36      	ldr	r3, [pc, #216]	; (8005570 <_SendPacket+0x1c4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <_SendPacket+0x1c0>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	e00b      	b.n	80054c6 <_SendPacket+0x11a>
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	6279      	str	r1, [r7, #36]	; 0x24
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <_SendPacket+0x102>
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	627a      	str	r2, [r7, #36]	; 0x24
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <_SendPacket+0x1c0>)
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	4618      	mov	r0, r3
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	f7fa fe70 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054f0:	4603      	mov	r3, r0
 80054f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <_SendPacket+0x1c0>)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	60d3      	str	r3, [r2, #12]
 8005500:	e00b      	b.n	800551a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005502:	4b1a      	ldr	r3, [pc, #104]	; (800556c <_SendPacket+0x1c0>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4b18      	ldr	r3, [pc, #96]	; (800556c <_SendPacket+0x1c0>)
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e004      	b.n	800551a <_SendPacket+0x16e>
    goto SendDone;
 8005510:	bf00      	nop
 8005512:	e002      	b.n	800551a <_SendPacket+0x16e>
      goto SendDone;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <_SendPacket+0x16e>
      goto SendDone;
 8005518:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <_SendPacket+0x1c0>)
 800551c:	7e1b      	ldrb	r3, [r3, #24]
 800551e:	4619      	mov	r1, r3
 8005520:	4a14      	ldr	r2, [pc, #80]	; (8005574 <_SendPacket+0x1c8>)
 8005522:	460b      	mov	r3, r1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	440b      	add	r3, r1
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	336c      	adds	r3, #108	; 0x6c
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b0e      	ldr	r3, [pc, #56]	; (800556c <_SendPacket+0x1c0>)
 8005532:	7e1b      	ldrb	r3, [r3, #24]
 8005534:	4618      	mov	r0, r3
 8005536:	490f      	ldr	r1, [pc, #60]	; (8005574 <_SendPacket+0x1c8>)
 8005538:	4603      	mov	r3, r0
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	4403      	add	r3, r0
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	3370      	adds	r3, #112	; 0x70
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d00b      	beq.n	8005562 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <_SendPacket+0x1c0>)
 800554c:	789b      	ldrb	r3, [r3, #2]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <_SendPacket+0x1c0>)
 8005554:	2201      	movs	r2, #1
 8005556:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005558:	f7ff fe44 	bl	80051e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <_SendPacket+0x1c0>)
 800555e:	2200      	movs	r2, #0
 8005560:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005562:	bf00      	nop
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	200143ec 	.word	0x200143ec
 8005570:	e0001004 	.word	0xe0001004
 8005574:	20012f2c 	.word	0x20012f2c

08005578 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005586:	2300      	movs	r3, #0
 8005588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800558c:	4917      	ldr	r1, [pc, #92]	; (80055ec <SEGGER_SYSVIEW_Init+0x74>)
 800558e:	4818      	ldr	r0, [pc, #96]	; (80055f0 <SEGGER_SYSVIEW_Init+0x78>)
 8005590:	f7ff fcda 	bl	8004f48 <SEGGER_RTT_AllocUpBuffer>
 8005594:	4603      	mov	r3, r0
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 800559a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800559c:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 800559e:	785a      	ldrb	r2, [r3, #1]
 80055a0:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055a2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055a6:	7e1b      	ldrb	r3, [r3, #24]
 80055a8:	4618      	mov	r0, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	2308      	movs	r3, #8
 80055b0:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <SEGGER_SYSVIEW_Init+0x80>)
 80055b2:	490f      	ldr	r1, [pc, #60]	; (80055f0 <SEGGER_SYSVIEW_Init+0x78>)
 80055b4:	f7ff fd4c 	bl	8005050 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80055b8:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <SEGGER_SYSVIEW_Init+0x84>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a0c      	ldr	r2, [pc, #48]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80055c6:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80055d8:	4a06      	ldr	r2, [pc, #24]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200133e4 	.word	0x200133e4
 80055f0:	080070d8 	.word	0x080070d8
 80055f4:	200143ec 	.word	0x200143ec
 80055f8:	200143e4 	.word	0x200143e4
 80055fc:	e0001004 	.word	0xe0001004

08005600 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005608:	4a04      	ldr	r2, [pc, #16]	; (800561c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6113      	str	r3, [r2, #16]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	200143ec 	.word	0x200143ec

08005620 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005628:	f3ef 8311 	mrs	r3, BASEPRI
 800562c:	f04f 0120 	mov.w	r1, #32
 8005630:	f381 8811 	msr	BASEPRI, r1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4808      	ldr	r0, [pc, #32]	; (8005658 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005638:	f7ff fdc7 	bl	80051ca <_PreparePacket>
 800563c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	f7ff feb2 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f383 8811 	msr	BASEPRI, r3
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2001441c 	.word	0x2001441c

0800565c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005666:	f3ef 8311 	mrs	r3, BASEPRI
 800566a:	f04f 0120 	mov.w	r1, #32
 800566e:	f381 8811 	msr	BASEPRI, r1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	4816      	ldr	r0, [pc, #88]	; (80056d0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005676:	f7ff fda8 	bl	80051ca <_PreparePacket>
 800567a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e00b      	b.n	80056a2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	1c59      	adds	r1, r3, #1
 8005692:	61f9      	str	r1, [r7, #28]
 8005694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	09db      	lsrs	r3, r3, #7
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b7f      	cmp	r3, #127	; 0x7f
 80056a6:	d8f0      	bhi.n	800568a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	61fa      	str	r2, [r7, #28]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	6938      	ldr	r0, [r7, #16]
 80056be:	f7ff fe75 	bl	80053ac <_SendPacket>
  RECORD_END();
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f383 8811 	msr	BASEPRI, r3
}
 80056c8:	bf00      	nop
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	2001441c 	.word	0x2001441c

080056d4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	; 0x30
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056e0:	f3ef 8311 	mrs	r3, BASEPRI
 80056e4:	f04f 0120 	mov.w	r1, #32
 80056e8:	f381 8811 	msr	BASEPRI, r1
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	4825      	ldr	r0, [pc, #148]	; (8005784 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056f0:	f7ff fd6b 	bl	80051ca <_PreparePacket>
 80056f4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
 8005702:	e00b      	b.n	800571c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	b2da      	uxtb	r2, r3
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800570e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	09db      	lsrs	r3, r3, #7
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b7f      	cmp	r3, #127	; 0x7f
 8005720:	d8f0      	bhi.n	8005704 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	e00b      	b.n	8005754 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	6279      	str	r1, [r7, #36]	; 0x24
 8005746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	09db      	lsrs	r3, r3, #7
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2b7f      	cmp	r3, #127	; 0x7f
 8005758:	d8f0      	bhi.n	800573c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	627a      	str	r2, [r7, #36]	; 0x24
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	6979      	ldr	r1, [r7, #20]
 800576e:	69b8      	ldr	r0, [r7, #24]
 8005770:	f7ff fe1c 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f383 8811 	msr	BASEPRI, r3
}
 800577a:	bf00      	nop
 800577c:	3730      	adds	r7, #48	; 0x30
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	2001441c 	.word	0x2001441c

08005788 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b08e      	sub	sp, #56	; 0x38
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005796:	f3ef 8311 	mrs	r3, BASEPRI
 800579a:	f04f 0120 	mov.w	r1, #32
 800579e:	f381 8811 	msr	BASEPRI, r1
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	4832      	ldr	r0, [pc, #200]	; (8005870 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80057a6:	f7ff fd10 	bl	80051ca <_PreparePacket>
 80057aa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
 80057b8:	e00b      	b.n	80057d2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	6379      	str	r1, [r7, #52]	; 0x34
 80057c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	09db      	lsrs	r3, r3, #7
 80057d0:	633b      	str	r3, [r7, #48]	; 0x30
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b7f      	cmp	r3, #127	; 0x7f
 80057d6:	d8f0      	bhi.n	80057ba <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	637a      	str	r2, [r7, #52]	; 0x34
 80057de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f0:	e00b      	b.n	800580a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	09db      	lsrs	r3, r3, #7
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b7f      	cmp	r3, #127	; 0x7f
 800580e:	d8f0      	bhi.n	80057f2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	e00b      	b.n	8005842 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	1c59      	adds	r1, r3, #1
 8005832:	6279      	str	r1, [r7, #36]	; 0x24
 8005834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	623b      	str	r3, [r7, #32]
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	2b7f      	cmp	r3, #127	; 0x7f
 8005846:	d8f0      	bhi.n	800582a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	627a      	str	r2, [r7, #36]	; 0x24
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	69b8      	ldr	r0, [r7, #24]
 800585e:	f7ff fda5 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f383 8811 	msr	BASEPRI, r3
}
 8005868:	bf00      	nop
 800586a:	3738      	adds	r7, #56	; 0x38
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	2001441c 	.word	0x2001441c

08005874 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b090      	sub	sp, #64	; 0x40
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005882:	f3ef 8311 	mrs	r3, BASEPRI
 8005886:	f04f 0120 	mov.w	r1, #32
 800588a:	f381 8811 	msr	BASEPRI, r1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	4840      	ldr	r0, [pc, #256]	; (8005994 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005892:	f7ff fc9a 	bl	80051ca <_PreparePacket>
 8005896:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a4:	e00b      	b.n	80058be <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80058b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	09db      	lsrs	r3, r3, #7
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b7f      	cmp	r3, #127	; 0x7f
 80058c2:	d8f0      	bhi.n	80058a6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80058c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	633b      	str	r3, [r7, #48]	; 0x30
 80058dc:	e00b      	b.n	80058f6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	1c59      	adds	r1, r3, #1
 80058e6:	6379      	str	r1, [r7, #52]	; 0x34
 80058e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	09db      	lsrs	r3, r3, #7
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b7f      	cmp	r3, #127	; 0x7f
 80058fa:	d8f0      	bhi.n	80058de <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	637a      	str	r2, [r7, #52]	; 0x34
 8005902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
 8005914:	e00b      	b.n	800592e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	1c59      	adds	r1, r3, #1
 800591e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	09db      	lsrs	r3, r3, #7
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	2b7f      	cmp	r3, #127	; 0x7f
 8005932:	d8f0      	bhi.n	8005916 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800593a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
 8005948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	e00b      	b.n	8005966 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	1c59      	adds	r1, r3, #1
 8005956:	6279      	str	r1, [r7, #36]	; 0x24
 8005958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	09db      	lsrs	r3, r3, #7
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	2b7f      	cmp	r3, #127	; 0x7f
 800596a:	d8f0      	bhi.n	800594e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	627a      	str	r2, [r7, #36]	; 0x24
 8005972:	6a3a      	ldr	r2, [r7, #32]
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	6979      	ldr	r1, [r7, #20]
 8005980:	69b8      	ldr	r0, [r7, #24]
 8005982:	f7ff fd13 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f383 8811 	msr	BASEPRI, r3
}
 800598c:	bf00      	nop
 800598e:	3740      	adds	r7, #64	; 0x40
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	2001441c 	.word	0x2001441c

08005998 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	; 0x30
 800599c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800599e:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80059a4:	f3ef 8311 	mrs	r3, BASEPRI
 80059a8:	f04f 0120 	mov.w	r1, #32
 80059ac:	f381 8811 	msr	BASEPRI, r1
 80059b0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80059b2:	4b53      	ldr	r3, [pc, #332]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	220a      	movs	r2, #10
 80059b8:	4952      	ldr	r1, [pc, #328]	; (8005b04 <SEGGER_SYSVIEW_Start+0x16c>)
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fa fc08 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80059c6:	200a      	movs	r0, #10
 80059c8:	f7ff fe2a 	bl	8005620 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059cc:	f3ef 8311 	mrs	r3, BASEPRI
 80059d0:	f04f 0120 	mov.w	r1, #32
 80059d4:	f381 8811 	msr	BASEPRI, r1
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	484b      	ldr	r0, [pc, #300]	; (8005b08 <SEGGER_SYSVIEW_Start+0x170>)
 80059dc:	f7ff fbf5 	bl	80051ca <_PreparePacket>
 80059e0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f0:	e00b      	b.n	8005a0a <SEGGER_SYSVIEW_Start+0x72>
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	09db      	lsrs	r3, r3, #7
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0e:	d8f0      	bhi.n	80059f2 <SEGGER_SYSVIEW_Start+0x5a>
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	e00b      	b.n	8005a44 <SEGGER_SYSVIEW_Start+0xac>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	6279      	str	r1, [r7, #36]	; 0x24
 8005a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	623b      	str	r3, [r7, #32]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2b7f      	cmp	r3, #127	; 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <SEGGER_SYSVIEW_Start+0x94>
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e00b      	b.n	8005a7e <SEGGER_SYSVIEW_Start+0xe6>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	61f9      	str	r1, [r7, #28]
 8005a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b7f      	cmp	r3, #127	; 0x7f
 8005a82:	d8f0      	bhi.n	8005a66 <SEGGER_SYSVIEW_Start+0xce>
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	61fa      	str	r2, [r7, #28]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	e00b      	b.n	8005ab6 <SEGGER_SYSVIEW_Start+0x11e>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	1c59      	adds	r1, r3, #1
 8005aa6:	6179      	str	r1, [r7, #20]
 8005aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	09db      	lsrs	r3, r3, #7
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aba:	d8f0      	bhi.n	8005a9e <SEGGER_SYSVIEW_Start+0x106>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	617a      	str	r2, [r7, #20]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005acc:	2218      	movs	r2, #24
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fc6b 	bl	80053ac <_SendPacket>
      RECORD_END();
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <SEGGER_SYSVIEW_Start+0x168>)
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005aea:	f000 f9eb 	bl	8005ec4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005aee:	f000 f9b1 	bl	8005e54 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005af2:	f000 fc83 	bl	80063fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005af6:	bf00      	nop
 8005af8:	3730      	adds	r7, #48	; 0x30
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	200143ec 	.word	0x200143ec
 8005b04:	08007100 	.word	0x08007100
 8005b08:	2001441c 	.word	0x2001441c

08005b0c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b12:	f3ef 8311 	mrs	r3, BASEPRI
 8005b16:	f04f 0120 	mov.w	r1, #32
 8005b1a:	f381 8811 	msr	BASEPRI, r1
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	480b      	ldr	r0, [pc, #44]	; (8005b50 <SEGGER_SYSVIEW_Stop+0x44>)
 8005b22:	f7ff fb52 	bl	80051ca <_PreparePacket>
 8005b26:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b30:	220b      	movs	r2, #11
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6838      	ldr	r0, [r7, #0]
 8005b36:	f7ff fc39 	bl	80053ac <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f383 8811 	msr	BASEPRI, r3
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2001441c 	.word	0x2001441c
 8005b54:	200143ec 	.word	0x200143ec

08005b58 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	; 0x30
 8005b5c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b62:	f04f 0120 	mov.w	r1, #32
 8005b66:	f381 8811 	msr	BASEPRI, r1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	4845      	ldr	r0, [pc, #276]	; (8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b6e:	f7ff fb2c 	bl	80051ca <_PreparePacket>
 8005b72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7c:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	e00b      	b.n	8005b9c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	09db      	lsrs	r3, r3, #7
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba0:	d8f0      	bhi.n	8005b84 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb6:	4b34      	ldr	r3, [pc, #208]	; (8005c88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	e00b      	b.n	8005bd6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	6279      	str	r1, [r7, #36]	; 0x24
 8005bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	09db      	lsrs	r3, r3, #7
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bda:	d8f0      	bhi.n	8005bbe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	627a      	str	r2, [r7, #36]	; 0x24
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e00b      	b.n	8005c10 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	61f9      	str	r1, [r7, #28]
 8005c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	09db      	lsrs	r3, r3, #7
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b7f      	cmp	r3, #127	; 0x7f
 8005c14:	d8f0      	bhi.n	8005bf8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	61fa      	str	r2, [r7, #28]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e00b      	b.n	8005c48 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	6179      	str	r1, [r7, #20]
 8005c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	09db      	lsrs	r3, r3, #7
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4c:	d8f0      	bhi.n	8005c30 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	617a      	str	r2, [r7, #20]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c5e:	2218      	movs	r2, #24
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	68b8      	ldr	r0, [r7, #8]
 8005c64:	f7ff fba2 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c76:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	4798      	blx	r3
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	3730      	adds	r7, #48	; 0x30
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	2001441c 	.word	0x2001441c
 8005c88:	200143ec 	.word	0x200143ec

08005c8c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b092      	sub	sp, #72	; 0x48
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c94:	f3ef 8311 	mrs	r3, BASEPRI
 8005c98:	f04f 0120 	mov.w	r1, #32
 8005c9c:	f381 8811 	msr	BASEPRI, r1
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	486a      	ldr	r0, [pc, #424]	; (8005e4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ca4:	f7ff fa91 	bl	80051ca <_PreparePacket>
 8005ca8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b66      	ldr	r3, [pc, #408]	; (8005e50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbe:	e00b      	b.n	8005cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc6:	1c59      	adds	r1, r3, #1
 8005cc8:	6479      	str	r1, [r7, #68]	; 0x44
 8005cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd4:	09db      	lsrs	r3, r3, #7
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cda:	2b7f      	cmp	r3, #127	; 0x7f
 8005cdc:	d8f0      	bhi.n	8005cc0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cf8:	e00b      	b.n	8005d12 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	09db      	lsrs	r3, r3, #7
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b7f      	cmp	r3, #127	; 0x7f
 8005d16:	d8f0      	bhi.n	8005cfa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff f9fd 	bl	8005130 <_EncodeStr>
 8005d36:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d38:	2209      	movs	r2, #9
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	6938      	ldr	r0, [r7, #16]
 8005d3e:	f7ff fb35 	bl	80053ac <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b40      	ldr	r3, [pc, #256]	; (8005e50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	6379      	str	r1, [r7, #52]	; 0x34
 8005d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	2b7f      	cmp	r3, #127	; 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	637a      	str	r2, [r7, #52]	; 0x34
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d90:	e00b      	b.n	8005daa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	2b7f      	cmp	r3, #127	; 0x7f
 8005dae:	d8f0      	bhi.n	8005d92 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	e00b      	b.n	8005de4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	1c59      	adds	r1, r3, #1
 8005dd4:	6279      	str	r1, [r7, #36]	; 0x24
 8005dd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	09db      	lsrs	r3, r3, #7
 8005de2:	623b      	str	r3, [r7, #32]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2b7f      	cmp	r3, #127	; 0x7f
 8005de8:	d8f0      	bhi.n	8005dcc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	627a      	str	r2, [r7, #36]	; 0x24
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e00b      	b.n	8005e1c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	1c59      	adds	r1, r3, #1
 8005e0c:	61f9      	str	r1, [r7, #28]
 8005e0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	09db      	lsrs	r3, r3, #7
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e20:	d8f0      	bhi.n	8005e04 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	61fa      	str	r2, [r7, #28]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e32:	2215      	movs	r2, #21
 8005e34:	68f9      	ldr	r1, [r7, #12]
 8005e36:	6938      	ldr	r0, [r7, #16]
 8005e38:	f7ff fab8 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f383 8811 	msr	BASEPRI, r3
}
 8005e42:	bf00      	nop
 8005e44:	3748      	adds	r7, #72	; 0x48
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	2001441c 	.word	0x2001441c
 8005e50:	200143ec 	.word	0x200143ec

08005e54 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e58:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e6a:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4798      	blx	r3
  }
}
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200143ec 	.word	0x200143ec

08005e7c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e84:	f3ef 8311 	mrs	r3, BASEPRI
 8005e88:	f04f 0120 	mov.w	r1, #32
 8005e8c:	f381 8811 	msr	BASEPRI, r1
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005e94:	f7ff f999 	bl	80051ca <_PreparePacket>
 8005e98:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	6938      	ldr	r0, [r7, #16]
 8005ea0:	f7ff f946 	bl	8005130 <_EncodeStr>
 8005ea4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005ea6:	220e      	movs	r2, #14
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f7ff fa7e 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f383 8811 	msr	BASEPRI, r3
}
 8005eb6:	bf00      	nop
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2001441c 	.word	0x2001441c

08005ec4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01a      	beq.n	8005f08 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4798      	blx	r3
 8005ee4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ee8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	000a      	movs	r2, r1
 8005ef8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005efa:	4613      	mov	r3, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4621      	mov	r1, r4
 8005f00:	200d      	movs	r0, #13
 8005f02:	f7ff fbe7 	bl	80056d4 <SEGGER_SYSVIEW_RecordU32x2>
 8005f06:	e006      	b.n	8005f16 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	200c      	movs	r0, #12
 8005f10:	f7ff fba4 	bl	800565c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	200143ec 	.word	0x200143ec
 8005f24:	e0001004 	.word	0xe0001004

08005f28 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f32:	f04f 0120 	mov.w	r1, #32
 8005f36:	f381 8811 	msr	BASEPRI, r1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	4819      	ldr	r0, [pc, #100]	; (8005fa4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f3e:	f7ff f944 	bl	80051ca <_PreparePacket>
 8005f42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f48:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f50:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	e00b      	b.n	8005f74 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	6179      	str	r1, [r7, #20]
 8005f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b7f      	cmp	r3, #127	; 0x7f
 8005f78:	d8f0      	bhi.n	8005f5c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	617a      	str	r2, [r7, #20]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	68b8      	ldr	r0, [r7, #8]
 8005f90:	f7ff fa0c 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f383 8811 	msr	BASEPRI, r3
}
 8005f9a:	bf00      	nop
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2001441c 	.word	0x2001441c
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb6:	f04f 0120 	mov.w	r1, #32
 8005fba:	f381 8811 	msr	BASEPRI, r1
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	4807      	ldr	r0, [pc, #28]	; (8005fe0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005fc2:	f7ff f902 	bl	80051ca <_PreparePacket>
 8005fc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005fc8:	2203      	movs	r2, #3
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6838      	ldr	r0, [r7, #0]
 8005fce:	f7ff f9ed 	bl	80053ac <_SendPacket>
  RECORD_END();
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f383 8811 	msr	BASEPRI, r3
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	2001441c 	.word	0x2001441c

08005fe4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fea:	f3ef 8311 	mrs	r3, BASEPRI
 8005fee:	f04f 0120 	mov.w	r1, #32
 8005ff2:	f381 8811 	msr	BASEPRI, r1
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	4807      	ldr	r0, [pc, #28]	; (8006018 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005ffa:	f7ff f8e6 	bl	80051ca <_PreparePacket>
 8005ffe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006000:	2212      	movs	r2, #18
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6838      	ldr	r0, [r7, #0]
 8006006:	f7ff f9d1 	bl	80053ac <_SendPacket>
  RECORD_END();
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f383 8811 	msr	BASEPRI, r3
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	2001441c 	.word	0x2001441c

0800601c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006022:	f3ef 8311 	mrs	r3, BASEPRI
 8006026:	f04f 0120 	mov.w	r1, #32
 800602a:	f381 8811 	msr	BASEPRI, r1
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	4807      	ldr	r0, [pc, #28]	; (8006050 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006032:	f7ff f8ca 	bl	80051ca <_PreparePacket>
 8006036:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006038:	2211      	movs	r2, #17
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6838      	ldr	r0, [r7, #0]
 800603e:	f7ff f9b5 	bl	80053ac <_SendPacket>
  RECORD_END();
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f383 8811 	msr	BASEPRI, r3
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	2001441c 	.word	0x2001441c

08006054 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800605c:	f3ef 8311 	mrs	r3, BASEPRI
 8006060:	f04f 0120 	mov.w	r1, #32
 8006064:	f381 8811 	msr	BASEPRI, r1
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	4819      	ldr	r0, [pc, #100]	; (80060d0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800606c:	f7ff f8ad 	bl	80051ca <_PreparePacket>
 8006070:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006076:	4b17      	ldr	r3, [pc, #92]	; (80060d4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	61f9      	str	r1, [r7, #28]
 8006094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b7f      	cmp	r3, #127	; 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	61fa      	str	r2, [r7, #28]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80060b8:	2208      	movs	r2, #8
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	6938      	ldr	r0, [r7, #16]
 80060be:	f7ff f975 	bl	80053ac <_SendPacket>
  RECORD_END();
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f383 8811 	msr	BASEPRI, r3
}
 80060c8:	bf00      	nop
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2001441c 	.word	0x2001441c
 80060d4:	200143ec 	.word	0x200143ec

080060d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060e0:	f3ef 8311 	mrs	r3, BASEPRI
 80060e4:	f04f 0120 	mov.w	r1, #32
 80060e8:	f381 8811 	msr	BASEPRI, r1
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	4819      	ldr	r0, [pc, #100]	; (8006154 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80060f0:	f7ff f86b 	bl	80051ca <_PreparePacket>
 80060f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060fa:	4b17      	ldr	r3, [pc, #92]	; (8006158 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e00b      	b.n	8006126 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	1c59      	adds	r1, r3, #1
 8006116:	61f9      	str	r1, [r7, #28]
 8006118:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	09db      	lsrs	r3, r3, #7
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b7f      	cmp	r3, #127	; 0x7f
 800612a:	d8f0      	bhi.n	800610e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800613c:	2204      	movs	r2, #4
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	6938      	ldr	r0, [r7, #16]
 8006142:	f7ff f933 	bl	80053ac <_SendPacket>
  RECORD_END();
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f383 8811 	msr	BASEPRI, r3
}
 800614c:	bf00      	nop
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	2001441c 	.word	0x2001441c
 8006158:	200143ec 	.word	0x200143ec

0800615c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006164:	f3ef 8311 	mrs	r3, BASEPRI
 8006168:	f04f 0120 	mov.w	r1, #32
 800616c:	f381 8811 	msr	BASEPRI, r1
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	4819      	ldr	r0, [pc, #100]	; (80061d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006174:	f7ff f829 	bl	80051ca <_PreparePacket>
 8006178:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800617e:	4b17      	ldr	r3, [pc, #92]	; (80061dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	e00b      	b.n	80061aa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1c59      	adds	r1, r3, #1
 800619a:	61f9      	str	r1, [r7, #28]
 800619c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	09db      	lsrs	r3, r3, #7
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b7f      	cmp	r3, #127	; 0x7f
 80061ae:	d8f0      	bhi.n	8006192 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	61fa      	str	r2, [r7, #28]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80061c0:	2206      	movs	r2, #6
 80061c2:	68f9      	ldr	r1, [r7, #12]
 80061c4:	6938      	ldr	r0, [r7, #16]
 80061c6:	f7ff f8f1 	bl	80053ac <_SendPacket>
  RECORD_END();
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f383 8811 	msr	BASEPRI, r3
}
 80061d0:	bf00      	nop
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	2001441c 	.word	0x2001441c
 80061dc:	200143ec 	.word	0x200143ec

080061e0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ea:	f3ef 8311 	mrs	r3, BASEPRI
 80061ee:	f04f 0120 	mov.w	r1, #32
 80061f2:	f381 8811 	msr	BASEPRI, r1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	4827      	ldr	r0, [pc, #156]	; (8006298 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80061fa:	f7fe ffe6 	bl	80051ca <_PreparePacket>
 80061fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	623b      	str	r3, [r7, #32]
 8006216:	e00b      	b.n	8006230 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	6279      	str	r1, [r7, #36]	; 0x24
 8006222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	09db      	lsrs	r3, r3, #7
 800622e:	623b      	str	r3, [r7, #32]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	2b7f      	cmp	r3, #127	; 0x7f
 8006234:	d8f0      	bhi.n	8006218 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	627a      	str	r2, [r7, #36]	; 0x24
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e00b      	b.n	8006268 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	61f9      	str	r1, [r7, #28]
 800625a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	09db      	lsrs	r3, r3, #7
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b7f      	cmp	r3, #127	; 0x7f
 800626c:	d8f0      	bhi.n	8006250 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	61fa      	str	r2, [r7, #28]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800627e:	2207      	movs	r2, #7
 8006280:	68f9      	ldr	r1, [r7, #12]
 8006282:	6938      	ldr	r0, [r7, #16]
 8006284:	f7ff f892 	bl	80053ac <_SendPacket>
  RECORD_END();
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f383 8811 	msr	BASEPRI, r3
}
 800628e:	bf00      	nop
 8006290:	3728      	adds	r7, #40	; 0x28
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2001441c 	.word	0x2001441c
 800629c:	200143ec 	.word	0x200143ec

080062a0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	1ad3      	subs	r3, r2, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	200143ec 	.word	0x200143ec

080062c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08c      	sub	sp, #48	; 0x30
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80062ca:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d06d      	beq.n	80063ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80062d2:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80062d8:	2300      	movs	r3, #0
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
 80062dc:	e008      	b.n	80062f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	3301      	adds	r3, #1
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d3f2      	bcc.n	80062de <SEGGER_SYSVIEW_SendModule+0x1e>
 80062f8:	e000      	b.n	80062fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80062fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d055      	beq.n	80063ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006302:	f3ef 8311 	mrs	r3, BASEPRI
 8006306:	f04f 0120 	mov.w	r1, #32
 800630a:	f381 8811 	msr	BASEPRI, r1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	482a      	ldr	r0, [pc, #168]	; (80063bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006312:	f7fe ff5a 	bl	80051ca <_PreparePacket>
 8006316:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	623b      	str	r3, [r7, #32]
 8006324:	e00b      	b.n	800633e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	6279      	str	r1, [r7, #36]	; 0x24
 8006330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	09db      	lsrs	r3, r3, #7
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	2b7f      	cmp	r3, #127	; 0x7f
 8006342:	d8f0      	bhi.n	8006326 <SEGGER_SYSVIEW_SendModule+0x66>
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	627a      	str	r2, [r7, #36]	; 0x24
 800634a:	6a3a      	ldr	r2, [r7, #32]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	e00b      	b.n	8006378 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	b2da      	uxtb	r2, r3
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	1c59      	adds	r1, r3, #1
 8006368:	61f9      	str	r1, [r7, #28]
 800636a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	09db      	lsrs	r3, r3, #7
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b7f      	cmp	r3, #127	; 0x7f
 800637c:	d8f0      	bhi.n	8006360 <SEGGER_SYSVIEW_SendModule+0xa0>
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	61fa      	str	r2, [r7, #28]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2280      	movs	r2, #128	; 0x80
 8006394:	4619      	mov	r1, r3
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7fe feca 	bl	8005130 <_EncodeStr>
 800639c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800639e:	2216      	movs	r2, #22
 80063a0:	68f9      	ldr	r1, [r7, #12]
 80063a2:	6938      	ldr	r0, [r7, #16]
 80063a4:	f7ff f802 	bl	80053ac <_SendPacket>
      RECORD_END();
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80063ae:	bf00      	nop
 80063b0:	3730      	adds	r7, #48	; 0x30
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20014414 	.word	0x20014414
 80063bc:	2001441c 	.word	0x2001441c

080063c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80063c6:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00f      	beq.n	80063ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f2      	bne.n	80063d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20014414 	.word	0x20014414

080063fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006402:	f3ef 8311 	mrs	r3, BASEPRI
 8006406:	f04f 0120 	mov.w	r1, #32
 800640a:	f381 8811 	msr	BASEPRI, r1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	4817      	ldr	r0, [pc, #92]	; (8006470 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006412:	f7fe feda 	bl	80051ca <_PreparePacket>
 8006416:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	4b14      	ldr	r3, [pc, #80]	; (8006474 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	e00b      	b.n	8006440 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	6179      	str	r1, [r7, #20]
 8006432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	09db      	lsrs	r3, r3, #7
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b7f      	cmp	r3, #127	; 0x7f
 8006444:	d8f0      	bhi.n	8006428 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	617a      	str	r2, [r7, #20]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006456:	221b      	movs	r2, #27
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	68b8      	ldr	r0, [r7, #8]
 800645c:	f7fe ffa6 	bl	80053ac <_SendPacket>
  RECORD_END();
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f383 8811 	msr	BASEPRI, r3
}
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	2001441c 	.word	0x2001441c
 8006474:	20014418 	.word	0x20014418

08006478 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006480:	f3ef 8311 	mrs	r3, BASEPRI
 8006484:	f04f 0120 	mov.w	r1, #32
 8006488:	f381 8811 	msr	BASEPRI, r1
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	4827      	ldr	r0, [pc, #156]	; (800652c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006490:	f7fe fe9b 	bl	80051ca <_PreparePacket>
 8006494:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f7fe fe48 	bl	8005130 <_EncodeStr>
 80064a0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
 80064a6:	2301      	movs	r3, #1
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	e00b      	b.n	80064c4 <SEGGER_SYSVIEW_Warn+0x4c>
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	6279      	str	r1, [r7, #36]	; 0x24
 80064b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	623b      	str	r3, [r7, #32]
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2b7f      	cmp	r3, #127	; 0x7f
 80064c8:	d8f0      	bhi.n	80064ac <SEGGER_SYSVIEW_Warn+0x34>
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	627a      	str	r2, [r7, #36]	; 0x24
 80064d0:	6a3a      	ldr	r2, [r7, #32]
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e00b      	b.n	80064fc <SEGGER_SYSVIEW_Warn+0x84>
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	61f9      	str	r1, [r7, #28]
 80064ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	09db      	lsrs	r3, r3, #7
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006500:	d8f0      	bhi.n	80064e4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	61fa      	str	r2, [r7, #28]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006512:	221a      	movs	r2, #26
 8006514:	68f9      	ldr	r1, [r7, #12]
 8006516:	6938      	ldr	r0, [r7, #16]
 8006518:	f7fe ff48 	bl	80053ac <_SendPacket>
  RECORD_END();
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f383 8811 	msr	BASEPRI, r3
}
 8006522:	bf00      	nop
 8006524:	3728      	adds	r7, #40	; 0x28
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	2001441c 	.word	0x2001441c

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4d0d      	ldr	r5, [pc, #52]	; (8006568 <__libc_init_array+0x38>)
 8006534:	4c0d      	ldr	r4, [pc, #52]	; (800656c <__libc_init_array+0x3c>)
 8006536:	1b64      	subs	r4, r4, r5
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	2600      	movs	r6, #0
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4d0b      	ldr	r5, [pc, #44]	; (8006570 <__libc_init_array+0x40>)
 8006542:	4c0c      	ldr	r4, [pc, #48]	; (8006574 <__libc_init_array+0x44>)
 8006544:	f000 fd4a 	bl	8006fdc <_init>
 8006548:	1b64      	subs	r4, r4, r5
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2600      	movs	r6, #0
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	4798      	blx	r3
 800655a:	3601      	adds	r6, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	4798      	blx	r3
 8006564:	3601      	adds	r6, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	08007178 	.word	0x08007178
 800656c:	08007178 	.word	0x08007178
 8006570:	08007178 	.word	0x08007178
 8006574:	0800717c 	.word	0x0800717c

08006578 <memcmp>:
 8006578:	b510      	push	{r4, lr}
 800657a:	3901      	subs	r1, #1
 800657c:	4402      	add	r2, r0
 800657e:	4290      	cmp	r0, r2
 8006580:	d101      	bne.n	8006586 <memcmp+0xe>
 8006582:	2000      	movs	r0, #0
 8006584:	e005      	b.n	8006592 <memcmp+0x1a>
 8006586:	7803      	ldrb	r3, [r0, #0]
 8006588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800658c:	42a3      	cmp	r3, r4
 800658e:	d001      	beq.n	8006594 <memcmp+0x1c>
 8006590:	1b18      	subs	r0, r3, r4
 8006592:	bd10      	pop	{r4, pc}
 8006594:	3001      	adds	r0, #1
 8006596:	e7f2      	b.n	800657e <memcmp+0x6>

08006598 <memcpy>:
 8006598:	440a      	add	r2, r1
 800659a:	4291      	cmp	r1, r2
 800659c:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a0:	d100      	bne.n	80065a4 <memcpy+0xc>
 80065a2:	4770      	bx	lr
 80065a4:	b510      	push	{r4, lr}
 80065a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ae:	4291      	cmp	r1, r2
 80065b0:	d1f9      	bne.n	80065a6 <memcpy+0xe>
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <memset>:
 80065b4:	4402      	add	r2, r0
 80065b6:	4603      	mov	r3, r0
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d100      	bne.n	80065be <memset+0xa>
 80065bc:	4770      	bx	lr
 80065be:	f803 1b01 	strb.w	r1, [r3], #1
 80065c2:	e7f9      	b.n	80065b8 <memset+0x4>

080065c4 <_puts_r>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	460e      	mov	r6, r1
 80065c8:	4605      	mov	r5, r0
 80065ca:	b118      	cbz	r0, 80065d4 <_puts_r+0x10>
 80065cc:	6983      	ldr	r3, [r0, #24]
 80065ce:	b90b      	cbnz	r3, 80065d4 <_puts_r+0x10>
 80065d0:	f000 fa48 	bl	8006a64 <__sinit>
 80065d4:	69ab      	ldr	r3, [r5, #24]
 80065d6:	68ac      	ldr	r4, [r5, #8]
 80065d8:	b913      	cbnz	r3, 80065e0 <_puts_r+0x1c>
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 fa42 	bl	8006a64 <__sinit>
 80065e0:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <_puts_r+0xd0>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d120      	bne.n	8006628 <_puts_r+0x64>
 80065e6:	686c      	ldr	r4, [r5, #4]
 80065e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ea:	07db      	lsls	r3, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_puts_r+0x36>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	0598      	lsls	r0, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_puts_r+0x36>
 80065f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f6:	f000 fad3 	bl	8006ba0 <__retarget_lock_acquire_recursive>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	0719      	lsls	r1, r3, #28
 80065fe:	d51d      	bpl.n	800663c <_puts_r+0x78>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	b1db      	cbz	r3, 800663c <_puts_r+0x78>
 8006604:	3e01      	subs	r6, #1
 8006606:	68a3      	ldr	r3, [r4, #8]
 8006608:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800660c:	3b01      	subs	r3, #1
 800660e:	60a3      	str	r3, [r4, #8]
 8006610:	bb39      	cbnz	r1, 8006662 <_puts_r+0x9e>
 8006612:	2b00      	cmp	r3, #0
 8006614:	da38      	bge.n	8006688 <_puts_r+0xc4>
 8006616:	4622      	mov	r2, r4
 8006618:	210a      	movs	r1, #10
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f848 	bl	80066b0 <__swbuf_r>
 8006620:	3001      	adds	r0, #1
 8006622:	d011      	beq.n	8006648 <_puts_r+0x84>
 8006624:	250a      	movs	r5, #10
 8006626:	e011      	b.n	800664c <_puts_r+0x88>
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <_puts_r+0xd4>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d101      	bne.n	8006632 <_puts_r+0x6e>
 800662e:	68ac      	ldr	r4, [r5, #8]
 8006630:	e7da      	b.n	80065e8 <_puts_r+0x24>
 8006632:	4b1a      	ldr	r3, [pc, #104]	; (800669c <_puts_r+0xd8>)
 8006634:	429c      	cmp	r4, r3
 8006636:	bf08      	it	eq
 8006638:	68ec      	ldreq	r4, [r5, #12]
 800663a:	e7d5      	b.n	80065e8 <_puts_r+0x24>
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f888 	bl	8006754 <__swsetup_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	d0dd      	beq.n	8006604 <_puts_r+0x40>
 8006648:	f04f 35ff 	mov.w	r5, #4294967295
 800664c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800664e:	07da      	lsls	r2, r3, #31
 8006650:	d405      	bmi.n	800665e <_puts_r+0x9a>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	059b      	lsls	r3, r3, #22
 8006656:	d402      	bmi.n	800665e <_puts_r+0x9a>
 8006658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800665a:	f000 faa2 	bl	8006ba2 <__retarget_lock_release_recursive>
 800665e:	4628      	mov	r0, r5
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	2b00      	cmp	r3, #0
 8006664:	da04      	bge.n	8006670 <_puts_r+0xac>
 8006666:	69a2      	ldr	r2, [r4, #24]
 8006668:	429a      	cmp	r2, r3
 800666a:	dc06      	bgt.n	800667a <_puts_r+0xb6>
 800666c:	290a      	cmp	r1, #10
 800666e:	d004      	beq.n	800667a <_puts_r+0xb6>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	7019      	strb	r1, [r3, #0]
 8006678:	e7c5      	b.n	8006606 <_puts_r+0x42>
 800667a:	4622      	mov	r2, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 f817 	bl	80066b0 <__swbuf_r>
 8006682:	3001      	adds	r0, #1
 8006684:	d1bf      	bne.n	8006606 <_puts_r+0x42>
 8006686:	e7df      	b.n	8006648 <_puts_r+0x84>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	250a      	movs	r5, #10
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	701d      	strb	r5, [r3, #0]
 8006692:	e7db      	b.n	800664c <_puts_r+0x88>
 8006694:	08007130 	.word	0x08007130
 8006698:	08007150 	.word	0x08007150
 800669c:	08007110 	.word	0x08007110

080066a0 <puts>:
 80066a0:	4b02      	ldr	r3, [pc, #8]	; (80066ac <puts+0xc>)
 80066a2:	4601      	mov	r1, r0
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f7ff bf8d 	b.w	80065c4 <_puts_r>
 80066aa:	bf00      	nop
 80066ac:	20000014 	.word	0x20000014

080066b0 <__swbuf_r>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	460e      	mov	r6, r1
 80066b4:	4614      	mov	r4, r2
 80066b6:	4605      	mov	r5, r0
 80066b8:	b118      	cbz	r0, 80066c2 <__swbuf_r+0x12>
 80066ba:	6983      	ldr	r3, [r0, #24]
 80066bc:	b90b      	cbnz	r3, 80066c2 <__swbuf_r+0x12>
 80066be:	f000 f9d1 	bl	8006a64 <__sinit>
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <__swbuf_r+0x98>)
 80066c4:	429c      	cmp	r4, r3
 80066c6:	d12b      	bne.n	8006720 <__swbuf_r+0x70>
 80066c8:	686c      	ldr	r4, [r5, #4]
 80066ca:	69a3      	ldr	r3, [r4, #24]
 80066cc:	60a3      	str	r3, [r4, #8]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	071a      	lsls	r2, r3, #28
 80066d2:	d52f      	bpl.n	8006734 <__swbuf_r+0x84>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	b36b      	cbz	r3, 8006734 <__swbuf_r+0x84>
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	1ac0      	subs	r0, r0, r3
 80066de:	6963      	ldr	r3, [r4, #20]
 80066e0:	b2f6      	uxtb	r6, r6
 80066e2:	4283      	cmp	r3, r0
 80066e4:	4637      	mov	r7, r6
 80066e6:	dc04      	bgt.n	80066f2 <__swbuf_r+0x42>
 80066e8:	4621      	mov	r1, r4
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 f926 	bl	800693c <_fflush_r>
 80066f0:	bb30      	cbnz	r0, 8006740 <__swbuf_r+0x90>
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	6022      	str	r2, [r4, #0]
 80066fe:	701e      	strb	r6, [r3, #0]
 8006700:	6963      	ldr	r3, [r4, #20]
 8006702:	3001      	adds	r0, #1
 8006704:	4283      	cmp	r3, r0
 8006706:	d004      	beq.n	8006712 <__swbuf_r+0x62>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	07db      	lsls	r3, r3, #31
 800670c:	d506      	bpl.n	800671c <__swbuf_r+0x6c>
 800670e:	2e0a      	cmp	r6, #10
 8006710:	d104      	bne.n	800671c <__swbuf_r+0x6c>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f911 	bl	800693c <_fflush_r>
 800671a:	b988      	cbnz	r0, 8006740 <__swbuf_r+0x90>
 800671c:	4638      	mov	r0, r7
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <__swbuf_r+0x9c>)
 8006722:	429c      	cmp	r4, r3
 8006724:	d101      	bne.n	800672a <__swbuf_r+0x7a>
 8006726:	68ac      	ldr	r4, [r5, #8]
 8006728:	e7cf      	b.n	80066ca <__swbuf_r+0x1a>
 800672a:	4b09      	ldr	r3, [pc, #36]	; (8006750 <__swbuf_r+0xa0>)
 800672c:	429c      	cmp	r4, r3
 800672e:	bf08      	it	eq
 8006730:	68ec      	ldreq	r4, [r5, #12]
 8006732:	e7ca      	b.n	80066ca <__swbuf_r+0x1a>
 8006734:	4621      	mov	r1, r4
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f80c 	bl	8006754 <__swsetup_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	d0cb      	beq.n	80066d8 <__swbuf_r+0x28>
 8006740:	f04f 37ff 	mov.w	r7, #4294967295
 8006744:	e7ea      	b.n	800671c <__swbuf_r+0x6c>
 8006746:	bf00      	nop
 8006748:	08007130 	.word	0x08007130
 800674c:	08007150 	.word	0x08007150
 8006750:	08007110 	.word	0x08007110

08006754 <__swsetup_r>:
 8006754:	4b32      	ldr	r3, [pc, #200]	; (8006820 <__swsetup_r+0xcc>)
 8006756:	b570      	push	{r4, r5, r6, lr}
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	4606      	mov	r6, r0
 800675c:	460c      	mov	r4, r1
 800675e:	b125      	cbz	r5, 800676a <__swsetup_r+0x16>
 8006760:	69ab      	ldr	r3, [r5, #24]
 8006762:	b913      	cbnz	r3, 800676a <__swsetup_r+0x16>
 8006764:	4628      	mov	r0, r5
 8006766:	f000 f97d 	bl	8006a64 <__sinit>
 800676a:	4b2e      	ldr	r3, [pc, #184]	; (8006824 <__swsetup_r+0xd0>)
 800676c:	429c      	cmp	r4, r3
 800676e:	d10f      	bne.n	8006790 <__swsetup_r+0x3c>
 8006770:	686c      	ldr	r4, [r5, #4]
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006778:	0719      	lsls	r1, r3, #28
 800677a:	d42c      	bmi.n	80067d6 <__swsetup_r+0x82>
 800677c:	06dd      	lsls	r5, r3, #27
 800677e:	d411      	bmi.n	80067a4 <__swsetup_r+0x50>
 8006780:	2309      	movs	r3, #9
 8006782:	6033      	str	r3, [r6, #0]
 8006784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006788:	81a3      	strh	r3, [r4, #12]
 800678a:	f04f 30ff 	mov.w	r0, #4294967295
 800678e:	e03e      	b.n	800680e <__swsetup_r+0xba>
 8006790:	4b25      	ldr	r3, [pc, #148]	; (8006828 <__swsetup_r+0xd4>)
 8006792:	429c      	cmp	r4, r3
 8006794:	d101      	bne.n	800679a <__swsetup_r+0x46>
 8006796:	68ac      	ldr	r4, [r5, #8]
 8006798:	e7eb      	b.n	8006772 <__swsetup_r+0x1e>
 800679a:	4b24      	ldr	r3, [pc, #144]	; (800682c <__swsetup_r+0xd8>)
 800679c:	429c      	cmp	r4, r3
 800679e:	bf08      	it	eq
 80067a0:	68ec      	ldreq	r4, [r5, #12]
 80067a2:	e7e6      	b.n	8006772 <__swsetup_r+0x1e>
 80067a4:	0758      	lsls	r0, r3, #29
 80067a6:	d512      	bpl.n	80067ce <__swsetup_r+0x7a>
 80067a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067aa:	b141      	cbz	r1, 80067be <__swsetup_r+0x6a>
 80067ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067b0:	4299      	cmp	r1, r3
 80067b2:	d002      	beq.n	80067ba <__swsetup_r+0x66>
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 fa5b 	bl	8006c70 <_free_r>
 80067ba:	2300      	movs	r3, #0
 80067bc:	6363      	str	r3, [r4, #52]	; 0x34
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	2300      	movs	r3, #0
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f043 0308 	orr.w	r3, r3, #8
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	b94b      	cbnz	r3, 80067ee <__swsetup_r+0x9a>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e4:	d003      	beq.n	80067ee <__swsetup_r+0x9a>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 fa01 	bl	8006bf0 <__smakebuf_r>
 80067ee:	89a0      	ldrh	r0, [r4, #12]
 80067f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067f4:	f010 0301 	ands.w	r3, r0, #1
 80067f8:	d00a      	beq.n	8006810 <__swsetup_r+0xbc>
 80067fa:	2300      	movs	r3, #0
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6963      	ldr	r3, [r4, #20]
 8006800:	425b      	negs	r3, r3
 8006802:	61a3      	str	r3, [r4, #24]
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	b943      	cbnz	r3, 800681a <__swsetup_r+0xc6>
 8006808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800680c:	d1ba      	bne.n	8006784 <__swsetup_r+0x30>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	0781      	lsls	r1, r0, #30
 8006812:	bf58      	it	pl
 8006814:	6963      	ldrpl	r3, [r4, #20]
 8006816:	60a3      	str	r3, [r4, #8]
 8006818:	e7f4      	b.n	8006804 <__swsetup_r+0xb0>
 800681a:	2000      	movs	r0, #0
 800681c:	e7f7      	b.n	800680e <__swsetup_r+0xba>
 800681e:	bf00      	nop
 8006820:	20000014 	.word	0x20000014
 8006824:	08007130 	.word	0x08007130
 8006828:	08007150 	.word	0x08007150
 800682c:	08007110 	.word	0x08007110

08006830 <__sflush_r>:
 8006830:	898a      	ldrh	r2, [r1, #12]
 8006832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006836:	4605      	mov	r5, r0
 8006838:	0710      	lsls	r0, r2, #28
 800683a:	460c      	mov	r4, r1
 800683c:	d458      	bmi.n	80068f0 <__sflush_r+0xc0>
 800683e:	684b      	ldr	r3, [r1, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc05      	bgt.n	8006850 <__sflush_r+0x20>
 8006844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	dc02      	bgt.n	8006850 <__sflush_r+0x20>
 800684a:	2000      	movs	r0, #0
 800684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006852:	2e00      	cmp	r6, #0
 8006854:	d0f9      	beq.n	800684a <__sflush_r+0x1a>
 8006856:	2300      	movs	r3, #0
 8006858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800685c:	682f      	ldr	r7, [r5, #0]
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	d032      	beq.n	80068c8 <__sflush_r+0x98>
 8006862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	075a      	lsls	r2, r3, #29
 8006868:	d505      	bpl.n	8006876 <__sflush_r+0x46>
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	1ac0      	subs	r0, r0, r3
 800686e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006870:	b10b      	cbz	r3, 8006876 <__sflush_r+0x46>
 8006872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006874:	1ac0      	subs	r0, r0, r3
 8006876:	2300      	movs	r3, #0
 8006878:	4602      	mov	r2, r0
 800687a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800687c:	6a21      	ldr	r1, [r4, #32]
 800687e:	4628      	mov	r0, r5
 8006880:	47b0      	blx	r6
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	d106      	bne.n	8006896 <__sflush_r+0x66>
 8006888:	6829      	ldr	r1, [r5, #0]
 800688a:	291d      	cmp	r1, #29
 800688c:	d82c      	bhi.n	80068e8 <__sflush_r+0xb8>
 800688e:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <__sflush_r+0x108>)
 8006890:	40ca      	lsrs	r2, r1
 8006892:	07d6      	lsls	r6, r2, #31
 8006894:	d528      	bpl.n	80068e8 <__sflush_r+0xb8>
 8006896:	2200      	movs	r2, #0
 8006898:	6062      	str	r2, [r4, #4]
 800689a:	04d9      	lsls	r1, r3, #19
 800689c:	6922      	ldr	r2, [r4, #16]
 800689e:	6022      	str	r2, [r4, #0]
 80068a0:	d504      	bpl.n	80068ac <__sflush_r+0x7c>
 80068a2:	1c42      	adds	r2, r0, #1
 80068a4:	d101      	bne.n	80068aa <__sflush_r+0x7a>
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	b903      	cbnz	r3, 80068ac <__sflush_r+0x7c>
 80068aa:	6560      	str	r0, [r4, #84]	; 0x54
 80068ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ae:	602f      	str	r7, [r5, #0]
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d0ca      	beq.n	800684a <__sflush_r+0x1a>
 80068b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068b8:	4299      	cmp	r1, r3
 80068ba:	d002      	beq.n	80068c2 <__sflush_r+0x92>
 80068bc:	4628      	mov	r0, r5
 80068be:	f000 f9d7 	bl	8006c70 <_free_r>
 80068c2:	2000      	movs	r0, #0
 80068c4:	6360      	str	r0, [r4, #52]	; 0x34
 80068c6:	e7c1      	b.n	800684c <__sflush_r+0x1c>
 80068c8:	6a21      	ldr	r1, [r4, #32]
 80068ca:	2301      	movs	r3, #1
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b0      	blx	r6
 80068d0:	1c41      	adds	r1, r0, #1
 80068d2:	d1c7      	bne.n	8006864 <__sflush_r+0x34>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0c4      	beq.n	8006864 <__sflush_r+0x34>
 80068da:	2b1d      	cmp	r3, #29
 80068dc:	d001      	beq.n	80068e2 <__sflush_r+0xb2>
 80068de:	2b16      	cmp	r3, #22
 80068e0:	d101      	bne.n	80068e6 <__sflush_r+0xb6>
 80068e2:	602f      	str	r7, [r5, #0]
 80068e4:	e7b1      	b.n	800684a <__sflush_r+0x1a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e7ad      	b.n	800684c <__sflush_r+0x1c>
 80068f0:	690f      	ldr	r7, [r1, #16]
 80068f2:	2f00      	cmp	r7, #0
 80068f4:	d0a9      	beq.n	800684a <__sflush_r+0x1a>
 80068f6:	0793      	lsls	r3, r2, #30
 80068f8:	680e      	ldr	r6, [r1, #0]
 80068fa:	bf08      	it	eq
 80068fc:	694b      	ldreq	r3, [r1, #20]
 80068fe:	600f      	str	r7, [r1, #0]
 8006900:	bf18      	it	ne
 8006902:	2300      	movne	r3, #0
 8006904:	eba6 0807 	sub.w	r8, r6, r7
 8006908:	608b      	str	r3, [r1, #8]
 800690a:	f1b8 0f00 	cmp.w	r8, #0
 800690e:	dd9c      	ble.n	800684a <__sflush_r+0x1a>
 8006910:	6a21      	ldr	r1, [r4, #32]
 8006912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006914:	4643      	mov	r3, r8
 8006916:	463a      	mov	r2, r7
 8006918:	4628      	mov	r0, r5
 800691a:	47b0      	blx	r6
 800691c:	2800      	cmp	r0, #0
 800691e:	dc06      	bgt.n	800692e <__sflush_r+0xfe>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e78e      	b.n	800684c <__sflush_r+0x1c>
 800692e:	4407      	add	r7, r0
 8006930:	eba8 0800 	sub.w	r8, r8, r0
 8006934:	e7e9      	b.n	800690a <__sflush_r+0xda>
 8006936:	bf00      	nop
 8006938:	20400001 	.word	0x20400001

0800693c <_fflush_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	690b      	ldr	r3, [r1, #16]
 8006940:	4605      	mov	r5, r0
 8006942:	460c      	mov	r4, r1
 8006944:	b913      	cbnz	r3, 800694c <_fflush_r+0x10>
 8006946:	2500      	movs	r5, #0
 8006948:	4628      	mov	r0, r5
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	b118      	cbz	r0, 8006956 <_fflush_r+0x1a>
 800694e:	6983      	ldr	r3, [r0, #24]
 8006950:	b90b      	cbnz	r3, 8006956 <_fflush_r+0x1a>
 8006952:	f000 f887 	bl	8006a64 <__sinit>
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <_fflush_r+0x6c>)
 8006958:	429c      	cmp	r4, r3
 800695a:	d11b      	bne.n	8006994 <_fflush_r+0x58>
 800695c:	686c      	ldr	r4, [r5, #4]
 800695e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0ef      	beq.n	8006946 <_fflush_r+0xa>
 8006966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006968:	07d0      	lsls	r0, r2, #31
 800696a:	d404      	bmi.n	8006976 <_fflush_r+0x3a>
 800696c:	0599      	lsls	r1, r3, #22
 800696e:	d402      	bmi.n	8006976 <_fflush_r+0x3a>
 8006970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006972:	f000 f915 	bl	8006ba0 <__retarget_lock_acquire_recursive>
 8006976:	4628      	mov	r0, r5
 8006978:	4621      	mov	r1, r4
 800697a:	f7ff ff59 	bl	8006830 <__sflush_r>
 800697e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006980:	07da      	lsls	r2, r3, #31
 8006982:	4605      	mov	r5, r0
 8006984:	d4e0      	bmi.n	8006948 <_fflush_r+0xc>
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	059b      	lsls	r3, r3, #22
 800698a:	d4dd      	bmi.n	8006948 <_fflush_r+0xc>
 800698c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800698e:	f000 f908 	bl	8006ba2 <__retarget_lock_release_recursive>
 8006992:	e7d9      	b.n	8006948 <_fflush_r+0xc>
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <_fflush_r+0x70>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d101      	bne.n	800699e <_fflush_r+0x62>
 800699a:	68ac      	ldr	r4, [r5, #8]
 800699c:	e7df      	b.n	800695e <_fflush_r+0x22>
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <_fflush_r+0x74>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	bf08      	it	eq
 80069a4:	68ec      	ldreq	r4, [r5, #12]
 80069a6:	e7da      	b.n	800695e <_fflush_r+0x22>
 80069a8:	08007130 	.word	0x08007130
 80069ac:	08007150 	.word	0x08007150
 80069b0:	08007110 	.word	0x08007110

080069b4 <std>:
 80069b4:	2300      	movs	r3, #0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	e9c0 3300 	strd	r3, r3, [r0]
 80069be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069c2:	6083      	str	r3, [r0, #8]
 80069c4:	8181      	strh	r1, [r0, #12]
 80069c6:	6643      	str	r3, [r0, #100]	; 0x64
 80069c8:	81c2      	strh	r2, [r0, #14]
 80069ca:	6183      	str	r3, [r0, #24]
 80069cc:	4619      	mov	r1, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	305c      	adds	r0, #92	; 0x5c
 80069d2:	f7ff fdef 	bl	80065b4 <memset>
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <std+0x38>)
 80069d8:	6263      	str	r3, [r4, #36]	; 0x24
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <std+0x3c>)
 80069dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <std+0x40>)
 80069e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <std+0x44>)
 80069e4:	6224      	str	r4, [r4, #32]
 80069e6:	6323      	str	r3, [r4, #48]	; 0x30
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	bf00      	nop
 80069ec:	08006e51 	.word	0x08006e51
 80069f0:	08006e73 	.word	0x08006e73
 80069f4:	08006eab 	.word	0x08006eab
 80069f8:	08006ecf 	.word	0x08006ecf

080069fc <_cleanup_r>:
 80069fc:	4901      	ldr	r1, [pc, #4]	; (8006a04 <_cleanup_r+0x8>)
 80069fe:	f000 b8af 	b.w	8006b60 <_fwalk_reent>
 8006a02:	bf00      	nop
 8006a04:	0800693d 	.word	0x0800693d

08006a08 <__sfmoreglue>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	2268      	movs	r2, #104	; 0x68
 8006a0c:	1e4d      	subs	r5, r1, #1
 8006a0e:	4355      	muls	r5, r2
 8006a10:	460e      	mov	r6, r1
 8006a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a16:	f000 f997 	bl	8006d48 <_malloc_r>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	b140      	cbz	r0, 8006a30 <__sfmoreglue+0x28>
 8006a1e:	2100      	movs	r1, #0
 8006a20:	e9c0 1600 	strd	r1, r6, [r0]
 8006a24:	300c      	adds	r0, #12
 8006a26:	60a0      	str	r0, [r4, #8]
 8006a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a2c:	f7ff fdc2 	bl	80065b4 <memset>
 8006a30:	4620      	mov	r0, r4
 8006a32:	bd70      	pop	{r4, r5, r6, pc}

08006a34 <__sfp_lock_acquire>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__sfp_lock_acquire+0x8>)
 8006a36:	f000 b8b3 	b.w	8006ba0 <__retarget_lock_acquire_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20014500 	.word	0x20014500

08006a40 <__sfp_lock_release>:
 8006a40:	4801      	ldr	r0, [pc, #4]	; (8006a48 <__sfp_lock_release+0x8>)
 8006a42:	f000 b8ae 	b.w	8006ba2 <__retarget_lock_release_recursive>
 8006a46:	bf00      	nop
 8006a48:	20014500 	.word	0x20014500

08006a4c <__sinit_lock_acquire>:
 8006a4c:	4801      	ldr	r0, [pc, #4]	; (8006a54 <__sinit_lock_acquire+0x8>)
 8006a4e:	f000 b8a7 	b.w	8006ba0 <__retarget_lock_acquire_recursive>
 8006a52:	bf00      	nop
 8006a54:	20014501 	.word	0x20014501

08006a58 <__sinit_lock_release>:
 8006a58:	4801      	ldr	r0, [pc, #4]	; (8006a60 <__sinit_lock_release+0x8>)
 8006a5a:	f000 b8a2 	b.w	8006ba2 <__retarget_lock_release_recursive>
 8006a5e:	bf00      	nop
 8006a60:	20014501 	.word	0x20014501

08006a64 <__sinit>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4604      	mov	r4, r0
 8006a68:	f7ff fff0 	bl	8006a4c <__sinit_lock_acquire>
 8006a6c:	69a3      	ldr	r3, [r4, #24]
 8006a6e:	b11b      	cbz	r3, 8006a78 <__sinit+0x14>
 8006a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a74:	f7ff bff0 	b.w	8006a58 <__sinit_lock_release>
 8006a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <__sinit+0x68>)
 8006a80:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <__sinit+0x6c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a86:	42a3      	cmp	r3, r4
 8006a88:	bf04      	itt	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	61a3      	streq	r3, [r4, #24]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 f820 	bl	8006ad4 <__sfp>
 8006a94:	6060      	str	r0, [r4, #4]
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f81c 	bl	8006ad4 <__sfp>
 8006a9c:	60a0      	str	r0, [r4, #8]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f818 	bl	8006ad4 <__sfp>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	60e0      	str	r0, [r4, #12]
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	6860      	ldr	r0, [r4, #4]
 8006aac:	f7ff ff82 	bl	80069b4 <std>
 8006ab0:	68a0      	ldr	r0, [r4, #8]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	2109      	movs	r1, #9
 8006ab6:	f7ff ff7d 	bl	80069b4 <std>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	2112      	movs	r1, #18
 8006ac0:	f7ff ff78 	bl	80069b4 <std>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	61a3      	str	r3, [r4, #24]
 8006ac8:	e7d2      	b.n	8006a70 <__sinit+0xc>
 8006aca:	bf00      	nop
 8006acc:	0800710c 	.word	0x0800710c
 8006ad0:	080069fd 	.word	0x080069fd

08006ad4 <__sfp>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	f7ff ffac 	bl	8006a34 <__sfp_lock_acquire>
 8006adc:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <__sfp+0x84>)
 8006ade:	681e      	ldr	r6, [r3, #0]
 8006ae0:	69b3      	ldr	r3, [r6, #24]
 8006ae2:	b913      	cbnz	r3, 8006aea <__sfp+0x16>
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f7ff ffbd 	bl	8006a64 <__sinit>
 8006aea:	3648      	adds	r6, #72	; 0x48
 8006aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	d503      	bpl.n	8006afc <__sfp+0x28>
 8006af4:	6833      	ldr	r3, [r6, #0]
 8006af6:	b30b      	cbz	r3, 8006b3c <__sfp+0x68>
 8006af8:	6836      	ldr	r6, [r6, #0]
 8006afa:	e7f7      	b.n	8006aec <__sfp+0x18>
 8006afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b00:	b9d5      	cbnz	r5, 8006b38 <__sfp+0x64>
 8006b02:	4b16      	ldr	r3, [pc, #88]	; (8006b5c <__sfp+0x88>)
 8006b04:	60e3      	str	r3, [r4, #12]
 8006b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b0c:	f000 f847 	bl	8006b9e <__retarget_lock_init_recursive>
 8006b10:	f7ff ff96 	bl	8006a40 <__sfp_lock_release>
 8006b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b1c:	6025      	str	r5, [r4, #0]
 8006b1e:	61a5      	str	r5, [r4, #24]
 8006b20:	2208      	movs	r2, #8
 8006b22:	4629      	mov	r1, r5
 8006b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b28:	f7ff fd44 	bl	80065b4 <memset>
 8006b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b34:	4620      	mov	r0, r4
 8006b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b38:	3468      	adds	r4, #104	; 0x68
 8006b3a:	e7d9      	b.n	8006af0 <__sfp+0x1c>
 8006b3c:	2104      	movs	r1, #4
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f7ff ff62 	bl	8006a08 <__sfmoreglue>
 8006b44:	4604      	mov	r4, r0
 8006b46:	6030      	str	r0, [r6, #0]
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d1d5      	bne.n	8006af8 <__sfp+0x24>
 8006b4c:	f7ff ff78 	bl	8006a40 <__sfp_lock_release>
 8006b50:	230c      	movs	r3, #12
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	e7ee      	b.n	8006b34 <__sfp+0x60>
 8006b56:	bf00      	nop
 8006b58:	0800710c 	.word	0x0800710c
 8006b5c:	ffff0001 	.word	0xffff0001

08006b60 <_fwalk_reent>:
 8006b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b64:	4606      	mov	r6, r0
 8006b66:	4688      	mov	r8, r1
 8006b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b6c:	2700      	movs	r7, #0
 8006b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b72:	f1b9 0901 	subs.w	r9, r9, #1
 8006b76:	d505      	bpl.n	8006b84 <_fwalk_reent+0x24>
 8006b78:	6824      	ldr	r4, [r4, #0]
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	d1f7      	bne.n	8006b6e <_fwalk_reent+0xe>
 8006b7e:	4638      	mov	r0, r7
 8006b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b84:	89ab      	ldrh	r3, [r5, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d907      	bls.n	8006b9a <_fwalk_reent+0x3a>
 8006b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	d003      	beq.n	8006b9a <_fwalk_reent+0x3a>
 8006b92:	4629      	mov	r1, r5
 8006b94:	4630      	mov	r0, r6
 8006b96:	47c0      	blx	r8
 8006b98:	4307      	orrs	r7, r0
 8006b9a:	3568      	adds	r5, #104	; 0x68
 8006b9c:	e7e9      	b.n	8006b72 <_fwalk_reent+0x12>

08006b9e <__retarget_lock_init_recursive>:
 8006b9e:	4770      	bx	lr

08006ba0 <__retarget_lock_acquire_recursive>:
 8006ba0:	4770      	bx	lr

08006ba2 <__retarget_lock_release_recursive>:
 8006ba2:	4770      	bx	lr

08006ba4 <__swhatbuf_r>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bac:	2900      	cmp	r1, #0
 8006bae:	b096      	sub	sp, #88	; 0x58
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	da08      	bge.n	8006bc8 <__swhatbuf_r+0x24>
 8006bb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	061a      	lsls	r2, r3, #24
 8006bc0:	d410      	bmi.n	8006be4 <__swhatbuf_r+0x40>
 8006bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc6:	e00e      	b.n	8006be6 <__swhatbuf_r+0x42>
 8006bc8:	466a      	mov	r2, sp
 8006bca:	f000 f9a7 	bl	8006f1c <_fstat_r>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	dbf1      	blt.n	8006bb6 <__swhatbuf_r+0x12>
 8006bd2:	9a01      	ldr	r2, [sp, #4]
 8006bd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bdc:	425a      	negs	r2, r3
 8006bde:	415a      	adcs	r2, r3
 8006be0:	602a      	str	r2, [r5, #0]
 8006be2:	e7ee      	b.n	8006bc2 <__swhatbuf_r+0x1e>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	2000      	movs	r0, #0
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	b016      	add	sp, #88	; 0x58
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bf0 <__smakebuf_r>:
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bf4:	079d      	lsls	r5, r3, #30
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	d507      	bpl.n	8006c0c <__smakebuf_r+0x1c>
 8006bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	2301      	movs	r3, #1
 8006c06:	6163      	str	r3, [r4, #20]
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	ab01      	add	r3, sp, #4
 8006c0e:	466a      	mov	r2, sp
 8006c10:	f7ff ffc8 	bl	8006ba4 <__swhatbuf_r>
 8006c14:	9900      	ldr	r1, [sp, #0]
 8006c16:	4605      	mov	r5, r0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f895 	bl	8006d48 <_malloc_r>
 8006c1e:	b948      	cbnz	r0, 8006c34 <__smakebuf_r+0x44>
 8006c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d4ef      	bmi.n	8006c08 <__smakebuf_r+0x18>
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	e7e3      	b.n	8006bfc <__smakebuf_r+0xc>
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <__smakebuf_r+0x7c>)
 8006c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	6163      	str	r3, [r4, #20]
 8006c46:	9b01      	ldr	r3, [sp, #4]
 8006c48:	6120      	str	r0, [r4, #16]
 8006c4a:	b15b      	cbz	r3, 8006c64 <__smakebuf_r+0x74>
 8006c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f975 	bl	8006f40 <_isatty_r>
 8006c56:	b128      	cbz	r0, 8006c64 <__smakebuf_r+0x74>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	89a0      	ldrh	r0, [r4, #12]
 8006c66:	4305      	orrs	r5, r0
 8006c68:	81a5      	strh	r5, [r4, #12]
 8006c6a:	e7cd      	b.n	8006c08 <__smakebuf_r+0x18>
 8006c6c:	080069fd 	.word	0x080069fd

08006c70 <_free_r>:
 8006c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c72:	2900      	cmp	r1, #0
 8006c74:	d044      	beq.n	8006d00 <_free_r+0x90>
 8006c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c7a:	9001      	str	r0, [sp, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c82:	bfb8      	it	lt
 8006c84:	18e4      	addlt	r4, r4, r3
 8006c86:	f000 f97d 	bl	8006f84 <__malloc_lock>
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <_free_r+0x94>)
 8006c8c:	9801      	ldr	r0, [sp, #4]
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	b933      	cbnz	r3, 8006ca0 <_free_r+0x30>
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	6014      	str	r4, [r2, #0]
 8006c96:	b003      	add	sp, #12
 8006c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c9c:	f000 b978 	b.w	8006f90 <__malloc_unlock>
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d908      	bls.n	8006cb6 <_free_r+0x46>
 8006ca4:	6825      	ldr	r5, [r4, #0]
 8006ca6:	1961      	adds	r1, r4, r5
 8006ca8:	428b      	cmp	r3, r1
 8006caa:	bf01      	itttt	eq
 8006cac:	6819      	ldreq	r1, [r3, #0]
 8006cae:	685b      	ldreq	r3, [r3, #4]
 8006cb0:	1949      	addeq	r1, r1, r5
 8006cb2:	6021      	streq	r1, [r4, #0]
 8006cb4:	e7ed      	b.n	8006c92 <_free_r+0x22>
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	b10b      	cbz	r3, 8006cc0 <_free_r+0x50>
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	d9fa      	bls.n	8006cb6 <_free_r+0x46>
 8006cc0:	6811      	ldr	r1, [r2, #0]
 8006cc2:	1855      	adds	r5, r2, r1
 8006cc4:	42a5      	cmp	r5, r4
 8006cc6:	d10b      	bne.n	8006ce0 <_free_r+0x70>
 8006cc8:	6824      	ldr	r4, [r4, #0]
 8006cca:	4421      	add	r1, r4
 8006ccc:	1854      	adds	r4, r2, r1
 8006cce:	42a3      	cmp	r3, r4
 8006cd0:	6011      	str	r1, [r2, #0]
 8006cd2:	d1e0      	bne.n	8006c96 <_free_r+0x26>
 8006cd4:	681c      	ldr	r4, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	6053      	str	r3, [r2, #4]
 8006cda:	4421      	add	r1, r4
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	e7da      	b.n	8006c96 <_free_r+0x26>
 8006ce0:	d902      	bls.n	8006ce8 <_free_r+0x78>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	6003      	str	r3, [r0, #0]
 8006ce6:	e7d6      	b.n	8006c96 <_free_r+0x26>
 8006ce8:	6825      	ldr	r5, [r4, #0]
 8006cea:	1961      	adds	r1, r4, r5
 8006cec:	428b      	cmp	r3, r1
 8006cee:	bf04      	itt	eq
 8006cf0:	6819      	ldreq	r1, [r3, #0]
 8006cf2:	685b      	ldreq	r3, [r3, #4]
 8006cf4:	6063      	str	r3, [r4, #4]
 8006cf6:	bf04      	itt	eq
 8006cf8:	1949      	addeq	r1, r1, r5
 8006cfa:	6021      	streq	r1, [r4, #0]
 8006cfc:	6054      	str	r4, [r2, #4]
 8006cfe:	e7ca      	b.n	8006c96 <_free_r+0x26>
 8006d00:	b003      	add	sp, #12
 8006d02:	bd30      	pop	{r4, r5, pc}
 8006d04:	20014504 	.word	0x20014504

08006d08 <sbrk_aligned>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4e0e      	ldr	r6, [pc, #56]	; (8006d44 <sbrk_aligned+0x3c>)
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	6831      	ldr	r1, [r6, #0]
 8006d10:	4605      	mov	r5, r0
 8006d12:	b911      	cbnz	r1, 8006d1a <sbrk_aligned+0x12>
 8006d14:	f000 f88c 	bl	8006e30 <_sbrk_r>
 8006d18:	6030      	str	r0, [r6, #0]
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 f887 	bl	8006e30 <_sbrk_r>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	d00a      	beq.n	8006d3c <sbrk_aligned+0x34>
 8006d26:	1cc4      	adds	r4, r0, #3
 8006d28:	f024 0403 	bic.w	r4, r4, #3
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	d007      	beq.n	8006d40 <sbrk_aligned+0x38>
 8006d30:	1a21      	subs	r1, r4, r0
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f87c 	bl	8006e30 <_sbrk_r>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d101      	bne.n	8006d40 <sbrk_aligned+0x38>
 8006d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d40:	4620      	mov	r0, r4
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	20014508 	.word	0x20014508

08006d48 <_malloc_r>:
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	1ccd      	adds	r5, r1, #3
 8006d4e:	f025 0503 	bic.w	r5, r5, #3
 8006d52:	3508      	adds	r5, #8
 8006d54:	2d0c      	cmp	r5, #12
 8006d56:	bf38      	it	cc
 8006d58:	250c      	movcc	r5, #12
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	db01      	blt.n	8006d64 <_malloc_r+0x1c>
 8006d60:	42a9      	cmp	r1, r5
 8006d62:	d905      	bls.n	8006d70 <_malloc_r+0x28>
 8006d64:	230c      	movs	r3, #12
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	2600      	movs	r6, #0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	4e2e      	ldr	r6, [pc, #184]	; (8006e2c <_malloc_r+0xe4>)
 8006d72:	f000 f907 	bl	8006f84 <__malloc_lock>
 8006d76:	6833      	ldr	r3, [r6, #0]
 8006d78:	461c      	mov	r4, r3
 8006d7a:	bb34      	cbnz	r4, 8006dca <_malloc_r+0x82>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f7ff ffc2 	bl	8006d08 <sbrk_aligned>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	4604      	mov	r4, r0
 8006d88:	d14d      	bne.n	8006e26 <_malloc_r+0xde>
 8006d8a:	6834      	ldr	r4, [r6, #0]
 8006d8c:	4626      	mov	r6, r4
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	d140      	bne.n	8006e14 <_malloc_r+0xcc>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	4631      	mov	r1, r6
 8006d96:	4638      	mov	r0, r7
 8006d98:	eb04 0803 	add.w	r8, r4, r3
 8006d9c:	f000 f848 	bl	8006e30 <_sbrk_r>
 8006da0:	4580      	cmp	r8, r0
 8006da2:	d13a      	bne.n	8006e1a <_malloc_r+0xd2>
 8006da4:	6821      	ldr	r1, [r4, #0]
 8006da6:	3503      	adds	r5, #3
 8006da8:	1a6d      	subs	r5, r5, r1
 8006daa:	f025 0503 	bic.w	r5, r5, #3
 8006dae:	3508      	adds	r5, #8
 8006db0:	2d0c      	cmp	r5, #12
 8006db2:	bf38      	it	cc
 8006db4:	250c      	movcc	r5, #12
 8006db6:	4629      	mov	r1, r5
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7ff ffa5 	bl	8006d08 <sbrk_aligned>
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	d02b      	beq.n	8006e1a <_malloc_r+0xd2>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	442b      	add	r3, r5
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	e00e      	b.n	8006de8 <_malloc_r+0xa0>
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	1b52      	subs	r2, r2, r5
 8006dce:	d41e      	bmi.n	8006e0e <_malloc_r+0xc6>
 8006dd0:	2a0b      	cmp	r2, #11
 8006dd2:	d916      	bls.n	8006e02 <_malloc_r+0xba>
 8006dd4:	1961      	adds	r1, r4, r5
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	6025      	str	r5, [r4, #0]
 8006dda:	bf18      	it	ne
 8006ddc:	6059      	strne	r1, [r3, #4]
 8006dde:	6863      	ldr	r3, [r4, #4]
 8006de0:	bf08      	it	eq
 8006de2:	6031      	streq	r1, [r6, #0]
 8006de4:	5162      	str	r2, [r4, r5]
 8006de6:	604b      	str	r3, [r1, #4]
 8006de8:	4638      	mov	r0, r7
 8006dea:	f104 060b 	add.w	r6, r4, #11
 8006dee:	f000 f8cf 	bl	8006f90 <__malloc_unlock>
 8006df2:	f026 0607 	bic.w	r6, r6, #7
 8006df6:	1d23      	adds	r3, r4, #4
 8006df8:	1af2      	subs	r2, r6, r3
 8006dfa:	d0b6      	beq.n	8006d6a <_malloc_r+0x22>
 8006dfc:	1b9b      	subs	r3, r3, r6
 8006dfe:	50a3      	str	r3, [r4, r2]
 8006e00:	e7b3      	b.n	8006d6a <_malloc_r+0x22>
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	bf0c      	ite	eq
 8006e08:	6032      	streq	r2, [r6, #0]
 8006e0a:	605a      	strne	r2, [r3, #4]
 8006e0c:	e7ec      	b.n	8006de8 <_malloc_r+0xa0>
 8006e0e:	4623      	mov	r3, r4
 8006e10:	6864      	ldr	r4, [r4, #4]
 8006e12:	e7b2      	b.n	8006d7a <_malloc_r+0x32>
 8006e14:	4634      	mov	r4, r6
 8006e16:	6876      	ldr	r6, [r6, #4]
 8006e18:	e7b9      	b.n	8006d8e <_malloc_r+0x46>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f000 f8b6 	bl	8006f90 <__malloc_unlock>
 8006e24:	e7a1      	b.n	8006d6a <_malloc_r+0x22>
 8006e26:	6025      	str	r5, [r4, #0]
 8006e28:	e7de      	b.n	8006de8 <_malloc_r+0xa0>
 8006e2a:	bf00      	nop
 8006e2c:	20014504 	.word	0x20014504

08006e30 <_sbrk_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d06      	ldr	r5, [pc, #24]	; (8006e4c <_sbrk_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f000 f8c0 	bl	8006fc0 <_sbrk>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_sbrk_r+0x1a>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_sbrk_r+0x1a>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	2001450c 	.word	0x2001450c

08006e50 <__sread>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	460c      	mov	r4, r1
 8006e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e58:	f000 f8a0 	bl	8006f9c <_read_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	bfab      	itete	ge
 8006e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e62:	89a3      	ldrhlt	r3, [r4, #12]
 8006e64:	181b      	addge	r3, r3, r0
 8006e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e6a:	bfac      	ite	ge
 8006e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e6e:	81a3      	strhlt	r3, [r4, #12]
 8006e70:	bd10      	pop	{r4, pc}

08006e72 <__swrite>:
 8006e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e76:	461f      	mov	r7, r3
 8006e78:	898b      	ldrh	r3, [r1, #12]
 8006e7a:	05db      	lsls	r3, r3, #23
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	4616      	mov	r6, r2
 8006e82:	d505      	bpl.n	8006e90 <__swrite+0x1e>
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	2302      	movs	r3, #2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f000 f868 	bl	8006f60 <_lseek_r>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	f000 b817 	b.w	8006ed8 <_write_r>

08006eaa <__sseek>:
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	460c      	mov	r4, r1
 8006eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb2:	f000 f855 	bl	8006f60 <_lseek_r>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	bf15      	itete	ne
 8006ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ec6:	81a3      	strheq	r3, [r4, #12]
 8006ec8:	bf18      	it	ne
 8006eca:	81a3      	strhne	r3, [r4, #12]
 8006ecc:	bd10      	pop	{r4, pc}

08006ece <__sclose>:
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 b813 	b.w	8006efc <_close_r>
	...

08006ed8 <_write_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	; (8006ef8 <_write_r+0x20>)
 8006edc:	4604      	mov	r4, r0
 8006ede:	4608      	mov	r0, r1
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	602a      	str	r2, [r5, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f7f9 fe8b 	bl	8000c02 <_write>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_write_r+0x1e>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_write_r+0x1e>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	2001450c 	.word	0x2001450c

08006efc <_close_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_close_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7f9 fe97 	bl	8000c3a <_close>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_close_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_close_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	2001450c 	.word	0x2001450c

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	; (8006f3c <_fstat_r+0x20>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7f9 fe92 	bl	8000c52 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2001450c 	.word	0x2001450c

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	; (8006f5c <_isatty_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7f9 fe91 	bl	8000c72 <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	2001450c 	.word	0x2001450c

08006f60 <_lseek_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	; (8006f80 <_lseek_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7f9 fe8a 	bl	8000c88 <_lseek>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_lseek_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_lseek_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	2001450c 	.word	0x2001450c

08006f84 <__malloc_lock>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__malloc_lock+0x8>)
 8006f86:	f7ff be0b 	b.w	8006ba0 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	200144ff 	.word	0x200144ff

08006f90 <__malloc_unlock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__malloc_unlock+0x8>)
 8006f92:	f7ff be06 	b.w	8006ba2 <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	200144ff 	.word	0x200144ff

08006f9c <_read_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d07      	ldr	r5, [pc, #28]	; (8006fbc <_read_r+0x20>)
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	602a      	str	r2, [r5, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7f9 fe0c 	bl	8000bc8 <_read>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_read_r+0x1e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_read_r+0x1e>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	2001450c 	.word	0x2001450c

08006fc0 <_sbrk>:
 8006fc0:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <_sbrk+0x14>)
 8006fc2:	6811      	ldr	r1, [r2, #0]
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	b909      	cbnz	r1, 8006fcc <_sbrk+0xc>
 8006fc8:	4903      	ldr	r1, [pc, #12]	; (8006fd8 <_sbrk+0x18>)
 8006fca:	6011      	str	r1, [r2, #0]
 8006fcc:	6810      	ldr	r0, [r2, #0]
 8006fce:	4403      	add	r3, r0
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	4770      	bx	lr
 8006fd4:	20014510 	.word	0x20014510
 8006fd8:	20014518 	.word	0x20014518

08006fdc <_init>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr

08006fe8 <_fini>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr
