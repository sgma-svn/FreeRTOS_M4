
FreeRTOS_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005200  08005200  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005200  08005200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005208  08005208  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e24  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e9c  20012e9c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1bb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f2  00000000  00000000  0002f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bdb  00000000  00000000  00033680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107c8  00000000  00000000  0005625b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2990  00000000  00000000  00066a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001393b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004544  00000000  00000000  00139404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005144 	.word	0x08005144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005144 	.word	0x08005144

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fbdd 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f841 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8a9 	bl	8000638 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler,"Task-1",200, "Task-1",2,&task1_handle);
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2302      	movs	r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x80>)
 80004f2:	22c8      	movs	r2, #200	; 0xc8
 80004f4:	4917      	ldr	r1, [pc, #92]	; (8000554 <main+0x80>)
 80004f6:	4818      	ldr	r0, [pc, #96]	; (8000558 <main+0x84>)
 80004f8:	f002 fb70 	bl	8002bdc <xTaskCreate>
 80004fc:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00a      	beq.n	800051a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000508:	f383 8811 	msr	BASEPRI, r3
 800050c:	f3bf 8f6f 	isb	sy
 8000510:	f3bf 8f4f 	dsb	sy
 8000514:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000516:	bf00      	nop
 8000518:	e7fe      	b.n	8000518 <main+0x44>

  status = xTaskCreate(task2_handler,"Task-2",200, "Task-2",2,&task2_handle);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2302      	movs	r3, #2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0x88>)
 8000524:	22c8      	movs	r2, #200	; 0xc8
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <main+0x88>)
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x8c>)
 800052a:	f002 fb57 	bl	8002bdc <xTaskCreate>
 800052e:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d00a      	beq.n	800054c <main+0x78>
        __asm volatile
 8000536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053a:	f383 8811 	msr	BASEPRI, r3
 800053e:	f3bf 8f6f 	isb	sy
 8000542:	f3bf 8f4f 	dsb	sy
 8000546:	60fb      	str	r3, [r7, #12]
    }
 8000548:	bf00      	nop
 800054a:	e7fe      	b.n	800054a <main+0x76>

    // Start freeRTOS Scheduler
    vTaskStartScheduler();
 800054c:	f002 fc7e 	bl	8002e4c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x7c>
 8000552:	bf00      	nop
 8000554:	0800515c 	.word	0x0800515c
 8000558:	080008f5 	.word	0x080008f5
 800055c:	08005164 	.word	0x08005164
 8000560:	08000919 	.word	0x08000919

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 f8d2 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fe2f 	bl	800124c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f9b4 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f890 	bl	800173c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f99d 	bl	8000960 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	4ba2      	ldr	r3, [pc, #648]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4aa1      	ldr	r2, [pc, #644]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b9f      	ldr	r3, [pc, #636]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	4b9b      	ldr	r3, [pc, #620]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a9a      	ldr	r2, [pc, #616]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b98      	ldr	r3, [pc, #608]	; (80008dc <MX_GPIO_Init+0x2a4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	4b94      	ldr	r3, [pc, #592]	; (80008dc <MX_GPIO_Init+0x2a4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a93      	ldr	r2, [pc, #588]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b91      	ldr	r3, [pc, #580]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b8d      	ldr	r3, [pc, #564]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a8c      	ldr	r2, [pc, #560]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b8a      	ldr	r3, [pc, #552]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b86      	ldr	r3, [pc, #536]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a85      	ldr	r2, [pc, #532]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b83      	ldr	r3, [pc, #524]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b7f      	ldr	r3, [pc, #508]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a7e      	ldr	r2, [pc, #504]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	4879      	ldr	r0, [pc, #484]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 80006fc:	f000 fd8c 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	4877      	ldr	r0, [pc, #476]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 8000706:	f000 fd87 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070a:	2200      	movs	r2, #0
 800070c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000710:	4875      	ldr	r0, [pc, #468]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 8000712:	f000 fd81 	bl	8001218 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000716:	2308      	movs	r3, #8
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	486c      	ldr	r0, [pc, #432]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 800072e:	f000 fbd7 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4866      	ldr	r0, [pc, #408]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800074a:	f000 fbc9 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075e:	2305      	movs	r3, #5
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	485e      	ldr	r0, [pc, #376]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800076a:	f000 fbb9 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	2301      	movs	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	485a      	ldr	r0, [pc, #360]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000784:	f000 fbac 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000788:	2310      	movs	r3, #16
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000798:	2306      	movs	r3, #6
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4852      	ldr	r0, [pc, #328]	; (80008ec <MX_GPIO_Init+0x2b4>)
 80007a4:	f000 fb9c 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a8:	23e0      	movs	r3, #224	; 0xe0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b8:	2305      	movs	r3, #5
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	484a      	ldr	r0, [pc, #296]	; (80008ec <MX_GPIO_Init+0x2b4>)
 80007c4:	f000 fb8c 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c8:	2304      	movs	r3, #4
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4845      	ldr	r0, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80007dc:	f000 fb80 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f2:	2305      	movs	r3, #5
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	483c      	ldr	r0, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80007fe:	f000 fb6f 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000806:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4833      	ldr	r0, [pc, #204]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 800081c:	f000 fb60 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000820:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000832:	2306      	movs	r3, #6
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4829      	ldr	r0, [pc, #164]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800083e:	f000 fb4f 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000858:	f000 fb42 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800085c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086e:	230a      	movs	r3, #10
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	481c      	ldr	r0, [pc, #112]	; (80008ec <MX_GPIO_Init+0x2b4>)
 800087a:	f000 fb31 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800087e:	2320      	movs	r3, #32
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4815      	ldr	r0, [pc, #84]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 8000892:	f000 fb25 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000896:	f44f 7310 	mov.w	r3, #576	; 0x240
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80008b4:	f000 fb14 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 80008ce:	f000 fb07 	bl	8000ee0 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400

080008f4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)parameters);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f003 ff83 	bl	8004808 <puts>
		taskYIELD();
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <task1_handler+0x20>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)parameters);
 8000912:	e7f3      	b.n	80008fc <task1_handler+0x8>
 8000914:	e000ed04 	.word	0xe000ed04

08000918 <task2_handler>:
	}
}
static void task2_handler(void* parameters)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	while(1)
		{
			printf("%s\n",(char*)parameters);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f003 ff71 	bl	8004808 <puts>
			taskYIELD();
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <task2_handler+0x20>)
 8000928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	f3bf 8f6f 	isb	sy
			printf("%s\n",(char*)parameters);
 8000936:	e7f3      	b.n	8000920 <task2_handler+0x8>
 8000938:	e000ed04 	.word	0xe000ed04

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 f9c5 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a32      	ldr	r2, [pc, #200]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <HAL_InitTick+0xe4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f8ae 	bl	8001b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a02:	f001 f893 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a06:	6378      	str	r0, [r7, #52]	; 0x34
 8000a08:	e004      	b.n	8000a14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0a:	f001 f88f 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <HAL_InitTick+0xf0>)
 8000a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a4a:	f001 f8b5 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d11b      	bne.n	8000a94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a5e:	f001 f905 	bl	8001c6c <HAL_TIM_Base_Start_IT>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d111      	bne.n	8000a94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a70:	2036      	movs	r0, #54	; 0x36
 8000a72:	f000 fa27 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d808      	bhi.n	8000a8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2036      	movs	r0, #54	; 0x36
 8000a82:	f000 fa03 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_InitTick+0xf4>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e002      	b.n	8000a94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3738      	adds	r7, #56	; 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	20000094 	.word	0x20000094
 8000aac:	40001000 	.word	0x40001000
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM6_DAC_IRQHandler+0x10>)
 8000ae6:	f001 f931 	bl	8001d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000094 	.word	0x20000094

08000af4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <ITM_SendChar+0x48>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <ITM_SendChar+0x48>)
 8000b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b08:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <ITM_SendChar+0x4c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <ITM_SendChar+0x4c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b16:	bf00      	nop
 8000b18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f8      	beq.n	8000b18 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000edfc 	.word	0xe000edfc
 8000b40:	e0000e00 	.word	0xe0000e00

08000b44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
  }

  return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffab 	bl	8000af4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
  }
  return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f003 fd21 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc2d 	bl	80004d4 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c88:	08005210 	.word	0x08005210
  ldr r2, =_sbss
 8000c8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c90:	20012e9c 	.word	0x20012e9c

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fe78 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe4e 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000dc 	.word	0x200000dc

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000dc 	.word	0x200000dc

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e16b      	b.n	80011d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 815a 	bne.w	80011ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80b4 	beq.w	80011ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b60      	ldr	r3, [pc, #384]	; (80011ec <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a5f      	ldr	r2, [pc, #380]	; (80011ec <HAL_GPIO_Init+0x30c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <HAL_GPIO_Init+0x310>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x314>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x318>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x31c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x320>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x324>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x328>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x32c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x330>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x20a>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x310>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_GPIO_Init+0x334>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae90 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcfe 	bl	8000d04 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcfa 	bl	8000d04 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcea 	bl	8000d04 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce6 	bl	8000d04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc9f 	bl	8000d04 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc9b 	bl	8000d04 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc7e 	bl	8000d04 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc7a 	bl	8000d04 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc5e 	bl	8000d04 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc5a 	bl	8000d04 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc47 	bl	8000d04 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc43 	bl	8000d04 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc03 	bl	8000d04 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fbff 	bl	8000d04 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbc4 	bl	8000d04 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fbc0 	bl	8000d04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbae 	bl	8000d04 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbaa 	bl	8000d04 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb7e 	bl	8000d04 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb7a 	bl	8000d04 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb4f 	bl	8000d04 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb38 	bl	8000d04 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fa6a 	bl	8000d04 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa66 	bl	8000d04 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f86a 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08005184 	.word	0x08005184
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b094      	sub	sp, #80	; 0x50
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80e1 	bhi.w	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e0db      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001940:	e0db      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001946:	e0d8      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
 8001968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197a:	4622      	mov	r2, r4
 800197c:	462b      	mov	r3, r5
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	6139      	str	r1, [r7, #16]
 8001998:	4629      	mov	r1, r5
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ac:	4659      	mov	r1, fp
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4651      	mov	r1, sl
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4651      	mov	r1, sl
 80019bc:	ebb2 0801 	subs.w	r8, r2, r1
 80019c0:	4659      	mov	r1, fp
 80019c2:	eb63 0901 	sbc.w	r9, r3, r1
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	eb18 0303 	adds.w	r3, r8, r3
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	462b      	mov	r3, r5
 80019e8:	eb49 0303 	adc.w	r3, r9, r3
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fa:	4629      	mov	r1, r5
 80019fc:	024b      	lsls	r3, r1, #9
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a04:	4621      	mov	r1, r4
 8001a06:	024a      	lsls	r2, r1, #9
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a18:	f7fe fbda 	bl	80001d0 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4611      	mov	r1, r2
 8001a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a40:	4642      	mov	r2, r8
 8001a42:	464b      	mov	r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0159      	lsls	r1, r3, #5
 8001a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a52:	0150      	lsls	r0, r2, #5
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a78:	ebb2 040a 	subs.w	r4, r2, sl
 8001a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	00eb      	lsls	r3, r5, #3
 8001a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	18e3      	adds	r3, r4, r3
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	028b      	lsls	r3, r1, #10
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab8:	4621      	mov	r1, r4
 8001aba:	028a      	lsls	r2, r1, #10
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001acc:	f7fe fb80 	bl	80001d0 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af2:	e002      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3750      	adds	r7, #80	; 0x50
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08005194 	.word	0x08005194

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f839 	bl	8001c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 f9d8 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e04e      	b.n	8001d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d01d      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d010      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e007      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40010400 	.word	0x40010400
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40001800 	.word	0x40001800

08001d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0202 	mvn.w	r2, #2
 8001d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8ee 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8e0 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8f1 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0204 	mvn.w	r2, #4
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8c4 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8b6 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8c7 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0208 	mvn.w	r2, #8
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f89a 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f88c 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f89d 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0210 	mvn.w	r2, #16
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f870 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f862 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f873 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0201 	mvn.w	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd36 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f902 	bl	8002100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f838 	bl	8001f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8cc 	bl	80020ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d027      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d023      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d017      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <TIM_Base_SetConfig+0x128>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a25      	ldr	r2, [pc, #148]	; (80020e0 <TIM_Base_SetConfig+0x134>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <TIM_Base_SetConfig+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <TIM_Base_SetConfig+0x13c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40010400 	.word	0x40010400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	40001800 	.word	0x40001800
 80020e4:	40001c00 	.word	0x40001c00
 80020e8:	40002000 	.word	0x40002000

080020ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 0208 	add.w	r2, r3, #8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0208 	add.w	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d103      	bne.n	80021d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e00c      	b.n	80021f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3308      	adds	r3, #8
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e002      	b.n	80021e4 <vListInsert+0x2e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d2f6      	bcs.n	80021de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6852      	ldr	r2, [r2, #4]
 8002248:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d103      	bne.n	800225c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <xQueueGenericReset+0x2a>
        __asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	60bb      	str	r3, [r7, #8]
    }
 80022a2:	bf00      	nop
 80022a4:	e7fe      	b.n	80022a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022a6:	f001 fee7 	bl	8004078 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	441a      	add	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	3b01      	subs	r3, #1
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	441a      	add	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00f      	beq.n	8002324 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3310      	adds	r3, #16
 8002308:	4618      	mov	r0, r3
 800230a:	f000 ffdf 	bl	80032cc <xTaskRemoveFromEventList>
 800230e:	e009      	b.n	8002324 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3310      	adds	r3, #16
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fefd 	bl	8002114 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3324      	adds	r3, #36	; 0x24
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fef8 	bl	8002114 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002324:	f001 fed8 	bl	80040d8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002332:	b580      	push	{r7, lr}
 8002334:	b08c      	sub	sp, #48	; 0x30
 8002336:	af02      	add	r7, sp, #8
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	61bb      	str	r3, [r7, #24]
    }
 8002358:	bf00      	nop
 800235a:	e7fe      	b.n	800235a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <xQueueGenericCreate+0x48>
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	d101      	bne.n	800237e <xQueueGenericCreate+0x4c>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <xQueueGenericCreate+0x4e>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericCreate+0x68>
        __asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	617b      	str	r3, [r7, #20]
    }
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023a0:	d90a      	bls.n	80023b8 <xQueueGenericCreate+0x86>
        __asm volatile
 80023a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	613b      	str	r3, [r7, #16]
    }
 80023b4:	bf00      	nop
 80023b6:	e7fe      	b.n	80023b6 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 ff7d 	bl	80042bc <pvPortMalloc>
 80023c2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00d      	beq.n	80023e6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3350      	adds	r3, #80	; 0x50
 80023d2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f805 	bl	80023f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
    }
 80023e8:	4618      	mov	r0, r3
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e002      	b.n	8002412 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800241e:	2101      	movs	r1, #1
 8002420:	69b8      	ldr	r0, [r7, #24]
 8002422:	f7ff ff2b 	bl	800227c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08e      	sub	sp, #56	; 0x38
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <xQueueGenericSend+0x32>
        __asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <xQueueGenericSend+0x40>
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <xQueueGenericSend+0x44>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <xQueueGenericSend+0x46>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xQueueGenericSend+0x60>
        __asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d103      	bne.n	80024a6 <xQueueGenericSend+0x6e>
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <xQueueGenericSend+0x72>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <xQueueGenericSend+0x74>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <xQueueGenericSend+0x8e>
        __asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	623b      	str	r3, [r7, #32]
    }
 80024c2:	bf00      	nop
 80024c4:	e7fe      	b.n	80024c4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024c6:	f001 f897 	bl	80035f8 <xTaskGetSchedulerState>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <xQueueGenericSend+0x9e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <xQueueGenericSend+0xa2>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueGenericSend+0xa4>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueGenericSend+0xbe>
        __asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61fb      	str	r3, [r7, #28]
    }
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024f6:	f001 fdbf 	bl	8004078 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <xQueueGenericSend+0xd4>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d112      	bne.n	8002532 <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002512:	f000 f9f5 	bl	8002900 <prvCopyDataToQueue>
 8002516:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	3324      	adds	r3, #36	; 0x24
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fed1 	bl	80032cc <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800252a:	f001 fdd5 	bl	80040d8 <vPortExitCritical>
                return pdPASS;
 800252e:	2301      	movs	r3, #1
 8002530:	e062      	b.n	80025f8 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002538:	f001 fdce 	bl	80040d8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800253c:	2300      	movs	r3, #0
 800253e:	e05b      	b.n	80025f8 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4618      	mov	r0, r3
 800254c:	f000 ff20 	bl	8003390 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002550:	2301      	movs	r3, #1
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002554:	f001 fdc0 	bl	80040d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002558:	f000 fcca 	bl	8002ef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800255c:	f001 fd8c 	bl	8004078 <vPortEnterCritical>
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002566:	b25b      	sxtb	r3, r3
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d103      	bne.n	8002576 <xQueueGenericSend+0x13e>
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800257c:	b25b      	sxtb	r3, r3
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002582:	d103      	bne.n	800258c <xQueueGenericSend+0x154>
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800258c:	f001 fda4 	bl	80040d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002590:	1d3a      	adds	r2, r7, #4
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f000 ff0f 	bl	80033bc <xTaskCheckForTimeOut>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d123      	bne.n	80025ec <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a6:	f000 faa3 	bl	8002af0 <prvIsQueueFull>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d017      	beq.n	80025e0 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	3310      	adds	r3, #16
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fe37 	bl	800322c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c0:	f000 fa2e 	bl	8002a20 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025c4:	f000 fca2 	bl	8002f0c <xTaskResumeAll>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d193      	bne.n	80024f6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <xQueueGenericSend+0x1c8>)
 80025d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	e78a      	b.n	80024f6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e2:	f000 fa1d 	bl	8002a20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025e6:	f000 fc91 	bl	8002f0c <xTaskResumeAll>
 80025ea:	e784      	b.n	80024f6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ee:	f000 fa17 	bl	8002a20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025f2:	f000 fc8b 	bl	8002f0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80025f6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3738      	adds	r7, #56	; 0x38
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b090      	sub	sp, #64	; 0x40
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <xQueueGenericSendFromISR+0x3c>
 8002638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <xQueueGenericSendFromISR+0x40>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <xQueueGenericSendFromISR+0x42>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800265c:	bf00      	nop
 800265e:	e7fe      	b.n	800265e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d103      	bne.n	800266e <xQueueGenericSendFromISR+0x6a>
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <xQueueGenericSendFromISR+0x6e>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <xQueueGenericSendFromISR+0x70>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	623b      	str	r3, [r7, #32]
    }
 800268a:	bf00      	nop
 800268c:	e7fe      	b.n	800268c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800268e:	f001 fdd5 	bl	800423c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002692:	f3ef 8211 	mrs	r2, BASEPRI
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	61fa      	str	r2, [r7, #28]
 80026a8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026aa:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <xQueueGenericSendFromISR+0xbc>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d13e      	bne.n	800273e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026d6:	f000 f913 	bl	8002900 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d112      	bne.n	800270a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d025      	beq.n	8002738 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	3324      	adds	r3, #36	; 0x24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fdeb 	bl	80032cc <xTaskRemoveFromEventList>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01d      	beq.n	8002738 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01a      	beq.n	8002738 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e016      	b.n	8002738 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800270a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800270e:	2b7f      	cmp	r3, #127	; 0x7f
 8002710:	d10a      	bne.n	8002728 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	617b      	str	r3, [r7, #20]
    }
 8002724:	bf00      	nop
 8002726:	e7fe      	b.n	8002726 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002728:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800272c:	3301      	adds	r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b25a      	sxtb	r2, r3
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800273c:	e001      	b.n	8002742 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800273e:	2300      	movs	r3, #0
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800274c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002750:	4618      	mov	r0, r3
 8002752:	3740      	adds	r7, #64	; 0x40
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <xQueueReceive+0x30>
        __asm volatile
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	623b      	str	r3, [r7, #32]
    }
 8002784:	bf00      	nop
 8002786:	e7fe      	b.n	8002786 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <xQueueReceive+0x3e>
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <xQueueReceive+0x42>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueReceive+0x44>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xQueueReceive+0x5e>
        __asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	61fb      	str	r3, [r7, #28]
    }
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027b6:	f000 ff1f 	bl	80035f8 <xTaskGetSchedulerState>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <xQueueReceive+0x6e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <xQueueReceive+0x72>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueReceive+0x74>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueReceive+0x8e>
        __asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	61bb      	str	r3, [r7, #24]
    }
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027e6:	f001 fc47 	bl	8004078 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d014      	beq.n	8002820 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fa:	f000 f8eb 	bl	80029d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	3310      	adds	r3, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fd5a 	bl	80032cc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002818:	f001 fc5e 	bl	80040d8 <vPortExitCritical>
                return pdPASS;
 800281c:	2301      	movs	r3, #1
 800281e:	e069      	b.n	80028f4 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002826:	f001 fc57 	bl	80040d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800282a:	2300      	movs	r3, #0
 800282c:	e062      	b.n	80028f4 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fda9 	bl	8003390 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800283e:	2301      	movs	r3, #1
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002842:	f001 fc49 	bl	80040d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002846:	f000 fb53 	bl	8002ef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800284a:	f001 fc15 	bl	8004078 <vPortEnterCritical>
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d103      	bne.n	8002864 <xQueueReceive+0x10c>
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800286a:	b25b      	sxtb	r3, r3
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d103      	bne.n	800287a <xQueueReceive+0x122>
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800287a:	f001 fc2d 	bl	80040d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800287e:	1d3a      	adds	r2, r7, #4
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fd98 	bl	80033bc <xTaskCheckForTimeOut>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d123      	bne.n	80028da <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002894:	f000 f916 	bl	8002ac4 <prvIsQueueEmpty>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d017      	beq.n	80028ce <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fcc0 	bl	800322c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ae:	f000 f8b7 	bl	8002a20 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028b2:	f000 fb2b 	bl	8002f0c <xTaskResumeAll>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d194      	bne.n	80027e6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <xQueueReceive+0x1a4>)
 80028be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	e78b      	b.n	80027e6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d0:	f000 f8a6 	bl	8002a20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028d4:	f000 fb1a 	bl	8002f0c <xTaskResumeAll>
 80028d8:	e785      	b.n	80027e6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028dc:	f000 f8a0 	bl	8002a20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028e0:	f000 fb14 	bl	8002f0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e6:	f000 f8ed 	bl	8002ac4 <prvIsQueueEmpty>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f43f af7a 	beq.w	80027e6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80028f2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	e000ed04 	.word	0xe000ed04

08002900 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d14d      	bne.n	80029c2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fe82 	bl	8003634 <xTaskPriorityDisinherit>
 8002930:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e043      	b.n	80029c2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d119      	bne.n	8002974 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6858      	ldr	r0, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	461a      	mov	r2, r3
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	f001 fed8 	bl	8004700 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	429a      	cmp	r2, r3
 8002968:	d32b      	bcc.n	80029c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e026      	b.n	80029c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68d8      	ldr	r0, [r3, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	461a      	mov	r2, r3
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	f001 febe 	bl	8004700 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	425b      	negs	r3, r3
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	425b      	negs	r3, r3
 80029aa:	441a      	add	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d105      	bne.n	80029c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	3b01      	subs	r3, #1
 80029c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80029ca:	697b      	ldr	r3, [r7, #20]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d018      	beq.n	8002a18 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	441a      	add	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d303      	bcc.n	8002a08 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	461a      	mov	r2, r3
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f001 fe74 	bl	8004700 <memcpy>
    }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a28:	f001 fb26 	bl	8004078 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a32:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a34:	e011      	b.n	8002a5a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fc42 	bl	80032cc <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a4e:	f000 fd1b 	bl	8003488 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	dce9      	bgt.n	8002a36 <prvUnlockQueue+0x16>
 8002a62:	e000      	b.n	8002a66 <prvUnlockQueue+0x46>
                        break;
 8002a64:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a6e:	f001 fb33 	bl	80040d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a72:	f001 fb01 	bl	8004078 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a7c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a7e:	e011      	b.n	8002aa4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3310      	adds	r3, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fc1d 	bl	80032cc <xTaskRemoveFromEventList>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a98:	f000 fcf6 	bl	8003488 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a9c:	7bbb      	ldrb	r3, [r7, #14]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	dce9      	bgt.n	8002a80 <prvUnlockQueue+0x60>
 8002aac:	e000      	b.n	8002ab0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002aae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	22ff      	movs	r2, #255	; 0xff
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ab8:	f001 fb0e 	bl	80040d8 <vPortExitCritical>
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002acc:	f001 fad4 	bl	8004078 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e001      	b.n	8002ae2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ae2:	f001 faf9 	bl	80040d8 <vPortExitCritical>

    return xReturn;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002af8:	f001 fabe 	bl	8004078 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d102      	bne.n	8002b0e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e001      	b.n	8002b12 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b12:	f001 fae1 	bl	80040d8 <vPortExitCritical>

    return xReturn;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e014      	b.n	8002b5a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <vQueueAddToRegistry+0x50>)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <vQueueAddToRegistry+0x50>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <vQueueAddToRegistry+0x50>)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002b52:	e006      	b.n	8002b62 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b07      	cmp	r3, #7
 8002b5e:	d9e7      	bls.n	8002b30 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200000e0 	.word	0x200000e0

08002b74 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b84:	f001 fa78 	bl	8004078 <vPortEnterCritical>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d103      	bne.n	8002b9e <vQueueWaitForMessageRestricted+0x2a>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d103      	bne.n	8002bb4 <vQueueWaitForMessageRestricted+0x40>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb4:	f001 fa90 	bl	80040d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fb53 	bl	8003274 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff26 	bl	8002a20 <prvUnlockQueue>
    }
 8002bd4:	bf00      	nop
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08c      	sub	sp, #48	; 0x30
 8002be0:	af04      	add	r7, sp, #16
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fb63 	bl	80042bc <pvPortMalloc>
 8002bf6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bfe:	2058      	movs	r0, #88	; 0x58
 8002c00:	f001 fb5c 	bl	80042bc <pvPortMalloc>
 8002c04:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
 8002c12:	e005      	b.n	8002c20 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f001 fc31 	bl	800447c <vPortFree>
 8002c1a:	e001      	b.n	8002c20 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d013      	beq.n	8002c4e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9303      	str	r3, [sp, #12]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	9302      	str	r3, [sp, #8]
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f80e 	bl	8002c5e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c42:	69f8      	ldr	r0, [r7, #28]
 8002c44:	f000 f8a2 	bl	8002d8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e002      	b.n	8002c54 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c54:	69bb      	ldr	r3, [r7, #24]
    }
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b088      	sub	sp, #32
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	21a5      	movs	r1, #165	; 0xa5
 8002c78:	f001 fd50 	bl	800471c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c86:	3b01      	subs	r3, #1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f023 0307 	bic.w	r3, r3, #7
 8002c94:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	617b      	str	r3, [r7, #20]
    }
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01f      	beq.n	8002cfc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e012      	b.n	8002ce8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	7819      	ldrb	r1, [r3, #0]
 8002cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3334      	adds	r3, #52	; 0x34
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d9e9      	bls.n	8002cc2 <prvInitialiseNewTask+0x64>
 8002cee:	e000      	b.n	8002cf2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002cf0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cfa:	e003      	b.n	8002d04 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d901      	bls.n	8002d0e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d18:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fa15 	bl	8002154 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fa10 	bl	8002154 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d38:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	f1c3 0205 	rsb	r2, r3, #5
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	3350      	adds	r3, #80	; 0x50
 8002d4e:	2204      	movs	r2, #4
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fce2 	bl	800471c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	3354      	adds	r3, #84	; 0x54
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fcdb 	bl	800471c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	69b8      	ldr	r0, [r7, #24]
 8002d6c:	f001 f854 	bl	8003e18 <pxPortInitialiseStack>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d82:	bf00      	nop
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d94:	f001 f970 	bl	8004078 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <prvAddNewTaskToReadyList+0xa8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <prvAddNewTaskToReadyList+0xa8>)
 8002da0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <prvAddNewTaskToReadyList+0xac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002daa:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <prvAddNewTaskToReadyList+0xac>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <prvAddNewTaskToReadyList+0xa8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d110      	bne.n	8002dda <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002db8:	f000 fb84 	bl	80034c4 <prvInitialiseTaskLists>
 8002dbc:	e00d      	b.n	8002dda <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <prvAddNewTaskToReadyList+0xb0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <prvAddNewTaskToReadyList+0xac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d802      	bhi.n	8002dda <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002dd4:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <prvAddNewTaskToReadyList+0xac>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <prvAddNewTaskToReadyList+0xb4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <prvAddNewTaskToReadyList+0xb4>)
 8002de2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <prvAddNewTaskToReadyList+0xb4>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <prvAddNewTaskToReadyList+0xb8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <prvAddNewTaskToReadyList+0xb8>)
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <prvAddNewTaskToReadyList+0xbc>)
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7ff f9aa 	bl	800216e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e1a:	f001 f95d 	bl	80040d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <prvAddNewTaskToReadyList+0xb0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <prvAddNewTaskToReadyList+0xac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200001f8 	.word	0x200001f8
 8002e38:	20000120 	.word	0x20000120
 8002e3c:	20000204 	.word	0x20000204
 8002e40:	20000214 	.word	0x20000214
 8002e44:	20000200 	.word	0x20000200
 8002e48:	20000124 	.word	0x20000124

08002e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <vTaskStartScheduler+0x88>)
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2282      	movs	r2, #130	; 0x82
 8002e5e:	491e      	ldr	r1, [pc, #120]	; (8002ed8 <vTaskStartScheduler+0x8c>)
 8002e60:	481e      	ldr	r0, [pc, #120]	; (8002edc <vTaskStartScheduler+0x90>)
 8002e62:	f7ff febb 	bl	8002bdc <xTaskCreate>
 8002e66:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e6e:	f000 fcc1 	bl	80037f4 <xTimerCreateTimerTask>
 8002e72:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d116      	bne.n	8002ea8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	60bb      	str	r3, [r7, #8]
    }
 8002e8c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <vTaskStartScheduler+0x94>)
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <vTaskStartScheduler+0x98>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <vTaskStartScheduler+0x9c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ea2:	f001 f847 	bl	8003f34 <xPortStartScheduler>
 8002ea6:	e00e      	b.n	8002ec6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d10a      	bne.n	8002ec6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	607b      	str	r3, [r7, #4]
    }
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <vTaskStartScheduler+0xa0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000021c 	.word	0x2000021c
 8002ed8:	0800516c 	.word	0x0800516c
 8002edc:	080034a1 	.word	0x080034a1
 8002ee0:	20000218 	.word	0x20000218
 8002ee4:	20000204 	.word	0x20000204
 8002ee8:	200001fc 	.word	0x200001fc
 8002eec:	2000000c 	.word	0x2000000c

08002ef0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <vTaskSuspendAll+0x18>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <vTaskSuspendAll+0x18>)
 8002efc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	20000220 	.word	0x20000220

08002f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <xTaskResumeAll+0xfc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	603b      	str	r3, [r7, #0]
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f38:	f001 f89e 	bl	8004078 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f3c:	4b32      	ldr	r3, [pc, #200]	; (8003008 <xTaskResumeAll+0xfc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	4a31      	ldr	r2, [pc, #196]	; (8003008 <xTaskResumeAll+0xfc>)
 8002f44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <xTaskResumeAll+0xfc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d155      	bne.n	8002ffa <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	; (800300c <xTaskResumeAll+0x100>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d051      	beq.n	8002ffa <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f56:	e02e      	b.n	8002fb6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <xTaskResumeAll+0x104>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3318      	adds	r3, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f95f 	bl	8002228 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f95a 	bl	8002228 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <xTaskResumeAll+0x108>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	4a24      	ldr	r2, [pc, #144]	; (8003014 <xTaskResumeAll+0x108>)
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4a21      	ldr	r2, [pc, #132]	; (8003018 <xTaskResumeAll+0x10c>)
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f7ff f8e6 	bl	800216e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <xTaskResumeAll+0x110>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d302      	bcc.n	8002fb6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <xTaskResumeAll+0x114>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <xTaskResumeAll+0x104>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1cc      	bne.n	8002f58 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fc4:	f000 fafc 	bl	80035c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <xTaskResumeAll+0x118>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fd4:	f000 f838 	bl	8003048 <xTaskIncrementTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <xTaskResumeAll+0x114>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f1      	bne.n	8002fd4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <xTaskResumeAll+0x118>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <xTaskResumeAll+0x114>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ffa:	f001 f86d 	bl	80040d8 <vPortExitCritical>

    return xAlreadyYielded;
 8002ffe:	687b      	ldr	r3, [r7, #4]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000220 	.word	0x20000220
 800300c:	200001f8 	.word	0x200001f8
 8003010:	200001b8 	.word	0x200001b8
 8003014:	20000200 	.word	0x20000200
 8003018:	20000124 	.word	0x20000124
 800301c:	20000120 	.word	0x20000120
 8003020:	2000020c 	.word	0x2000020c
 8003024:	20000208 	.word	0x20000208

08003028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <xTaskGetTickCount+0x1c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003034:	687b      	ldr	r3, [r7, #4]
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	200001fc 	.word	0x200001fc

08003048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <xTaskIncrementTick+0x108>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d16f      	bne.n	800313a <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800305a:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <xTaskIncrementTick+0x10c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003062:	4a3c      	ldr	r2, [pc, #240]	; (8003154 <xTaskIncrementTick+0x10c>)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d120      	bne.n	80030b0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800306e:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <xTaskIncrementTick+0x110>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <xTaskIncrementTick+0x46>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	603b      	str	r3, [r7, #0]
    }
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xTaskIncrementTick+0x44>
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <xTaskIncrementTick+0x110>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <xTaskIncrementTick+0x114>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <xTaskIncrementTick+0x110>)
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4a2f      	ldr	r2, [pc, #188]	; (800315c <xTaskIncrementTick+0x114>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <xTaskIncrementTick+0x118>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <xTaskIncrementTick+0x118>)
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	f000 fa88 	bl	80035c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <xTaskIncrementTick+0x11c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d344      	bcc.n	8003144 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ba:	4b27      	ldr	r3, [pc, #156]	; (8003158 <xTaskIncrementTick+0x110>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d104      	bne.n	80030ce <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <xTaskIncrementTick+0x11c>)
 80030c6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ca:	601a      	str	r2, [r3, #0]
                    break;
 80030cc:	e03a      	b.n	8003144 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <xTaskIncrementTick+0x110>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d203      	bcs.n	80030ee <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <xTaskIncrementTick+0x11c>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030ec:	e02a      	b.n	8003144 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3304      	adds	r3, #4
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f898 	bl	8002228 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3318      	adds	r3, #24
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff f88f 	bl	8002228 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <xTaskIncrementTick+0x120>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	4a13      	ldr	r2, [pc, #76]	; (8003168 <xTaskIncrementTick+0x120>)
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4a10      	ldr	r2, [pc, #64]	; (800316c <xTaskIncrementTick+0x124>)
 800312a:	441a      	add	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7ff f81b 	bl	800216e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003138:	e7bf      	b.n	80030ba <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <xTaskIncrementTick+0x128>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <xTaskIncrementTick+0x128>)
 8003142:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003144:	697b      	ldr	r3, [r7, #20]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000220 	.word	0x20000220
 8003154:	200001fc 	.word	0x200001fc
 8003158:	200001b0 	.word	0x200001b0
 800315c:	200001b4 	.word	0x200001b4
 8003160:	20000210 	.word	0x20000210
 8003164:	20000218 	.word	0x20000218
 8003168:	20000200 	.word	0x20000200
 800316c:	20000124 	.word	0x20000124
 8003170:	20000208 	.word	0x20000208

08003174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <vTaskSwitchContext+0xa4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <vTaskSwitchContext+0xa8>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003188:	e03f      	b.n	800320a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <vTaskSwitchContext+0xa8>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <vTaskSwitchContext+0xac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f1c3 031f 	rsb	r3, r3, #31
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	491f      	ldr	r1, [pc, #124]	; (8003224 <vTaskSwitchContext+0xb0>)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	607b      	str	r3, [r7, #4]
    }
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <vTaskSwitchContext+0x5a>
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <vTaskSwitchContext+0xb0>)
 80031dc:	4413      	add	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3308      	adds	r3, #8
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d104      	bne.n	8003200 <vTaskSwitchContext+0x8c>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4a08      	ldr	r2, [pc, #32]	; (8003228 <vTaskSwitchContext+0xb4>)
 8003208:	6013      	str	r3, [r2, #0]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000220 	.word	0x20000220
 800321c:	2000020c 	.word	0x2000020c
 8003220:	20000200 	.word	0x20000200
 8003224:	20000124 	.word	0x20000124
 8003228:	20000120 	.word	0x20000120

0800322c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	60fb      	str	r3, [r7, #12]
    }
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <vTaskPlaceOnEventList+0x44>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3318      	adds	r3, #24
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe ffab 	bl	80021b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003260:	2101      	movs	r1, #1
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f000 fa60 	bl	8003728 <prvAddCurrentTaskToDelayedList>
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000120 	.word	0x20000120

08003274 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	617b      	str	r3, [r7, #20]
    }
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3318      	adds	r3, #24
 80032a2:	4619      	mov	r1, r3
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7fe ff62 	bl	800216e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	f000 fa35 	bl	8003728 <prvAddCurrentTaskToDelayedList>
    }
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000120 	.word	0x20000120

080032cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	60fb      	str	r3, [r7, #12]
    }
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3318      	adds	r3, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe ff93 	bl	8002228 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <xTaskRemoveFromEventList+0xac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11c      	bne.n	8003344 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3304      	adds	r3, #4
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff8a 	bl	8002228 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <xTaskRemoveFromEventList+0xb0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4313      	orrs	r3, r2
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <xTaskRemoveFromEventList+0xb0>)
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a13      	ldr	r2, [pc, #76]	; (8003380 <xTaskRemoveFromEventList+0xb4>)
 8003334:	441a      	add	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3304      	adds	r3, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7fe ff16 	bl	800216e <vListInsertEnd>
 8003342:	e005      	b.n	8003350 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	3318      	adds	r3, #24
 8003348:	4619      	mov	r1, r3
 800334a:	480e      	ldr	r0, [pc, #56]	; (8003384 <xTaskRemoveFromEventList+0xb8>)
 800334c:	f7fe ff0f 	bl	800216e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <xTaskRemoveFromEventList+0xbc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	429a      	cmp	r2, r3
 800335c:	d905      	bls.n	800336a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <xTaskRemoveFromEventList+0xc0>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e001      	b.n	800336e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800336e:	697b      	ldr	r3, [r7, #20]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000220 	.word	0x20000220
 800337c:	20000200 	.word	0x20000200
 8003380:	20000124 	.word	0x20000124
 8003384:	200001b8 	.word	0x200001b8
 8003388:	20000120 	.word	0x20000120
 800338c:	2000020c 	.word	0x2000020c

08003390 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <vTaskInternalSetTimeOutState+0x24>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <vTaskInternalSetTimeOutState+0x28>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	605a      	str	r2, [r3, #4]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20000210 	.word	0x20000210
 80033b8:	200001fc 	.word	0x200001fc

080033bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	613b      	str	r3, [r7, #16]
    }
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60fb      	str	r3, [r7, #12]
    }
 80033fa:	bf00      	nop
 80033fc:	e7fe      	b.n	80033fc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80033fe:	f000 fe3b 	bl	8004078 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003402:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <xTaskCheckForTimeOut+0xc4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d102      	bne.n	8003422 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e026      	b.n	8003470 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <xTaskCheckForTimeOut+0xc8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d00a      	beq.n	8003444 <xTaskCheckForTimeOut+0x88>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	429a      	cmp	r2, r3
 8003436:	d305      	bcc.n	8003444 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e015      	b.n	8003470 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	429a      	cmp	r2, r3
 800344c:	d20b      	bcs.n	8003466 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ff98 	bl	8003390 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e004      	b.n	8003470 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003470:	f000 fe32 	bl	80040d8 <vPortExitCritical>

    return xReturn;
 8003474:	69fb      	ldr	r3, [r7, #28]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200001fc 	.word	0x200001fc
 8003484:	20000210 	.word	0x20000210

08003488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <vTaskMissedYield+0x14>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	2000020c 	.word	0x2000020c

080034a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034a8:	f000 f84c 	bl	8003544 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <prvIdleTask+0x20>)
 80034ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80034bc:	e7f4      	b.n	80034a8 <prvIdleTask+0x8>
 80034be:	bf00      	nop
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	e00c      	b.n	80034ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <prvInitialiseTaskLists+0x60>)
 80034dc:	4413      	add	r3, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fe18 	bl	8002114 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3301      	adds	r3, #1
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d9ef      	bls.n	80034d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80034f0:	480d      	ldr	r0, [pc, #52]	; (8003528 <prvInitialiseTaskLists+0x64>)
 80034f2:	f7fe fe0f 	bl	8002114 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <prvInitialiseTaskLists+0x68>)
 80034f8:	f7fe fe0c 	bl	8002114 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80034fc:	480c      	ldr	r0, [pc, #48]	; (8003530 <prvInitialiseTaskLists+0x6c>)
 80034fe:	f7fe fe09 	bl	8002114 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003502:	480c      	ldr	r0, [pc, #48]	; (8003534 <prvInitialiseTaskLists+0x70>)
 8003504:	f7fe fe06 	bl	8002114 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003508:	480b      	ldr	r0, [pc, #44]	; (8003538 <prvInitialiseTaskLists+0x74>)
 800350a:	f7fe fe03 	bl	8002114 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <prvInitialiseTaskLists+0x78>)
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <prvInitialiseTaskLists+0x64>)
 8003512:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <prvInitialiseTaskLists+0x7c>)
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <prvInitialiseTaskLists+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000124 	.word	0x20000124
 8003528:	20000188 	.word	0x20000188
 800352c:	2000019c 	.word	0x2000019c
 8003530:	200001b8 	.word	0x200001b8
 8003534:	200001cc 	.word	0x200001cc
 8003538:	200001e4 	.word	0x200001e4
 800353c:	200001b0 	.word	0x200001b0
 8003540:	200001b4 	.word	0x200001b4

08003544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800354a:	e019      	b.n	8003580 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800354c:	f000 fd94 	bl	8004078 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003550:	4b10      	ldr	r3, [pc, #64]	; (8003594 <prvCheckTasksWaitingTermination+0x50>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe fe63 	bl	8002228 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <prvCheckTasksWaitingTermination+0x54>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <prvCheckTasksWaitingTermination+0x54>)
 800356a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <prvCheckTasksWaitingTermination+0x58>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <prvCheckTasksWaitingTermination+0x58>)
 8003574:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003576:	f000 fdaf 	bl	80040d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f810 	bl	80035a0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <prvCheckTasksWaitingTermination+0x58>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e1      	bne.n	800354c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200001cc 	.word	0x200001cc
 8003598:	200001f8 	.word	0x200001f8
 800359c:	200001e0 	.word	0x200001e0

080035a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 ff65 	bl	800447c <vPortFree>
                vPortFree( pxTCB );
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 ff62 	bl	800447c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <prvResetNextTaskUnblockTime+0x30>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <prvResetNextTaskUnblockTime+0x34>)
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80035d6:	e005      	b.n	80035e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <prvResetNextTaskUnblockTime+0x30>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <prvResetNextTaskUnblockTime+0x34>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	200001b0 	.word	0x200001b0
 80035f4:	20000218 	.word	0x20000218

080035f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <xTaskGetSchedulerState+0x34>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003606:	2301      	movs	r3, #1
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	e008      	b.n	800361e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <xTaskGetSchedulerState+0x38>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003614:	2302      	movs	r3, #2
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	e001      	b.n	800361e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800361e:	687b      	ldr	r3, [r7, #4]
    }
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000204 	.word	0x20000204
 8003630:	20000220 	.word	0x20000220

08003634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <xTaskPriorityDisinherit+0xe8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d00a      	beq.n	800366a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
    }
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60bb      	str	r3, [r7, #8]
    }
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	429a      	cmp	r2, r3
 800369c:	d039      	beq.n	8003712 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d135      	bne.n	8003712 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fdbc 	bl	8002228 <uxListRemove>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	2201      	movs	r2, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43da      	mvns	r2, r3
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <xTaskPriorityDisinherit+0xec>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4013      	ands	r3, r2
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <xTaskPriorityDisinherit+0xec>)
 80036ca:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f1c3 0205 	rsb	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2201      	movs	r2, #1
 80036e6:	409a      	lsls	r2, r3
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <xTaskPriorityDisinherit+0xec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <xTaskPriorityDisinherit+0xec>)
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <xTaskPriorityDisinherit+0xf0>)
 8003700:	441a      	add	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	3304      	adds	r3, #4
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fe fd30 	bl	800216e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800370e:	2301      	movs	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003712:	697b      	ldr	r3, [r7, #20]
    }
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000120 	.word	0x20000120
 8003720:	20000200 	.word	0x20000200
 8003724:	20000124 	.word	0x20000124

08003728 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003738:	4b28      	ldr	r3, [pc, #160]	; (80037dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3304      	adds	r3, #4
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fd72 	bl	8002228 <uxListRemove>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	2201      	movs	r2, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43da      	mvns	r2, r3
 8003758:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4013      	ands	r3, r2
 800375e:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003760:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d10a      	bne.n	8003780 <prvAddCurrentTaskToDelayedList+0x58>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	481a      	ldr	r0, [pc, #104]	; (80037e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800377a:	f7fe fcf8 	bl	800216e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800377e:	e026      	b.n	80037ce <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d209      	bcs.n	80037ac <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f7fe fd06 	bl	80021b6 <vListInsert>
}
 80037aa:	e010      	b.n	80037ce <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7fe fcfc 	bl	80021b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d202      	bcs.n	80037ce <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80037c8:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6013      	str	r3, [r2, #0]
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200001fc 	.word	0x200001fc
 80037dc:	20000120 	.word	0x20000120
 80037e0:	20000200 	.word	0x20000200
 80037e4:	200001e4 	.word	0x200001e4
 80037e8:	200001b4 	.word	0x200001b4
 80037ec:	200001b0 	.word	0x200001b0
 80037f0:	20000218 	.word	0x20000218

080037f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037fe:	f000 fad5 	bl	8003dac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <xTimerCreateTimerTask+0x54>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <xTimerCreateTimerTask+0x58>)
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2302      	movs	r3, #2
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003818:	490d      	ldr	r1, [pc, #52]	; (8003850 <xTimerCreateTimerTask+0x5c>)
 800381a:	480e      	ldr	r0, [pc, #56]	; (8003854 <xTimerCreateTimerTask+0x60>)
 800381c:	f7ff f9de 	bl	8002bdc <xTaskCreate>
 8003820:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	603b      	str	r3, [r7, #0]
    }
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800383e:	687b      	ldr	r3, [r7, #4]
    }
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000254 	.word	0x20000254
 800384c:	20000258 	.word	0x20000258
 8003850:	08005174 	.word	0x08005174
 8003854:	0800398d 	.word	0x0800398d

08003858 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	623b      	str	r3, [r7, #32]
    }
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <xTimerGenericCommand+0x98>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d02a      	beq.n	80038e4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b05      	cmp	r3, #5
 800389e:	dc18      	bgt.n	80038d2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80038a0:	f7ff feaa 	bl	80035f8 <xTaskGetSchedulerState>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d109      	bne.n	80038be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <xTimerGenericCommand+0x98>)
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f107 0114 	add.w	r1, r7, #20
 80038b2:	2300      	movs	r3, #0
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	f7fe fdbf 	bl	8002438 <xQueueGenericSend>
 80038ba:	6278      	str	r0, [r7, #36]	; 0x24
 80038bc:	e012      	b.n	80038e4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <xTimerGenericCommand+0x98>)
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	f107 0114 	add.w	r1, r7, #20
 80038c6:	2300      	movs	r3, #0
 80038c8:	2200      	movs	r2, #0
 80038ca:	f7fe fdb5 	bl	8002438 <xQueueGenericSend>
 80038ce:	6278      	str	r0, [r7, #36]	; 0x24
 80038d0:	e008      	b.n	80038e4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <xTimerGenericCommand+0x98>)
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	f107 0114 	add.w	r1, r7, #20
 80038da:	2300      	movs	r3, #0
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	f7fe fe91 	bl	8002604 <xQueueGenericSendFromISR>
 80038e2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80038e6:	4618      	mov	r0, r3
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000254 	.word	0x20000254

080038f4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <prvProcessExpiredTimer+0x94>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fc8b 	bl	8002228 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d022      	beq.n	8003966 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	18d1      	adds	r1, r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	6978      	ldr	r0, [r7, #20]
 800392e:	f000 f8d1 	bl	8003ad4 <prvInsertTimerInActiveList>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01f      	beq.n	8003978 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003938:	2300      	movs	r3, #0
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2300      	movs	r3, #0
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	2100      	movs	r1, #0
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff88 	bl	8003858 <xTimerGenericCommand>
 8003948:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d113      	bne.n	8003978 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60fb      	str	r3, [r7, #12]
    }
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	4798      	blx	r3
    }
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000024c 	.word	0x2000024c

0800398c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003994:	f107 0308 	add.w	r3, r7, #8
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f857 	bl	8003a4c <prvGetNextExpireTime>
 800399e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f803 	bl	80039b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039aa:	f000 f8d5 	bl	8003b58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ae:	e7f1      	b.n	8003994 <prvTimerTask+0x8>

080039b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039ba:	f7ff fa99 	bl	8002ef0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f866 	bl	8003a94 <prvSampleTimeNow>
 80039c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d130      	bne.n	8003a32 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <prvProcessTimerOrBlockTask+0x3c>
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d806      	bhi.n	80039ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039de:	f7ff fa95 	bl	8002f0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff85 	bl	80038f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039ea:	e024      	b.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <prvProcessTimerOrBlockTask+0x90>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <prvProcessTimerOrBlockTask+0x50>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <prvProcessTimerOrBlockTask+0x52>
 8003a00:	2300      	movs	r3, #0
 8003a02:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <prvProcessTimerOrBlockTask+0x94>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7ff f8af 	bl	8002b74 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a16:	f7ff fa79 	bl	8002f0c <xTaskResumeAll>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <prvProcessTimerOrBlockTask+0x98>)
 8003a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
    }
 8003a30:	e001      	b.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a32:	f7ff fa6b 	bl	8002f0c <xTaskResumeAll>
    }
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000250 	.word	0x20000250
 8003a44:	20000254 	.word	0x20000254
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <prvGetNextExpireTime+0x44>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <prvGetNextExpireTime+0x16>
 8003a5e:	2201      	movs	r2, #1
 8003a60:	e000      	b.n	8003a64 <prvGetNextExpireTime+0x18>
 8003a62:	2200      	movs	r2, #0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <prvGetNextExpireTime+0x44>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e001      	b.n	8003a80 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a80:	68fb      	ldr	r3, [r7, #12]
    }
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000024c 	.word	0x2000024c

08003a94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a9c:	f7ff fac4 	bl	8003028 <xTaskGetTickCount>
 8003aa0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <prvSampleTimeNow+0x3c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d205      	bcs.n	8003ab8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003aac:	f000 f91a 	bl	8003ce4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003abe:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <prvSampleTimeNow+0x3c>)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000025c 	.word	0x2000025c

08003ad4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d812      	bhi.n	8003b20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e01b      	b.n	8003b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <prvInsertTimerInActiveList+0x7c>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe fb4c 	bl	80021b6 <vListInsert>
 8003b1e:	e012      	b.n	8003b46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d206      	bcs.n	8003b36 <prvInsertTimerInActiveList+0x62>
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e007      	b.n	8003b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <prvInsertTimerInActiveList+0x80>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7fe fb38 	bl	80021b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b46:	697b      	ldr	r3, [r7, #20]
    }
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000250 	.word	0x20000250
 8003b54:	2000024c 	.word	0x2000024c

08003b58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b5e:	e0ae      	b.n	8003cbe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f2c0 80aa 	blt.w	8003cbc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	3304      	adds	r3, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fb55 	bl	8002228 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff87 	bl	8003a94 <prvSampleTimeNow>
 8003b86:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b09      	cmp	r3, #9
 8003b8c:	f200 8097 	bhi.w	8003cbe <prvProcessReceivedCommands+0x166>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <prvProcessReceivedCommands+0x40>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bc1 	.word	0x08003bc1
 8003ba4:	08003c35 	.word	0x08003c35
 8003ba8:	08003c49 	.word	0x08003c49
 8003bac:	08003c93 	.word	0x08003c93
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bc1 	.word	0x08003bc1
 8003bb8:	08003c35 	.word	0x08003c35
 8003bbc:	08003c49 	.word	0x08003c49
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	18d1      	adds	r1, r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003be0:	f7ff ff78 	bl	8003ad4 <prvInsertTimerInActiveList>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d069      	beq.n	8003cbe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05e      	beq.n	8003cbe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	441a      	add	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c12:	f7ff fe21 	bl	8003858 <xTimerGenericCommand>
 8003c16:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d14f      	bne.n	8003cbe <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	61bb      	str	r3, [r7, #24]
    }
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c46:	e03a      	b.n	8003cbe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	617b      	str	r3, [r7, #20]
    }
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	18d1      	adds	r1, r2, r3
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c8c:	f7ff ff22 	bl	8003ad4 <prvInsertTimerInActiveList>
                        break;
 8003c90:	e015      	b.n	8003cbe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ca2:	f000 fbeb 	bl	800447c <vPortFree>
 8003ca6:	e00a      	b.n	8003cbe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cba:	e000      	b.n	8003cbe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003cbc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cbe:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <prvProcessReceivedCommands+0x188>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f107 0108 	add.w	r1, r7, #8
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fd45 	bl	8002758 <xQueueReceive>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f af45 	bne.w	8003b60 <prvProcessReceivedCommands+0x8>
        }
    }
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000254 	.word	0x20000254

08003ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cea:	e048      	b.n	8003d7e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cec:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <prvSwitchTimerLists+0xc0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf6:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <prvSwitchTimerLists+0xc0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fa8f 	bl	8002228 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d02e      	beq.n	8003d7e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d90e      	bls.n	8003d50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d3e:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <prvSwitchTimerLists+0xc0>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f7fe fa34 	bl	80021b6 <vListInsert>
 8003d4e:	e016      	b.n	8003d7e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2300      	movs	r3, #0
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fd7c 	bl	8003858 <xTimerGenericCommand>
 8003d60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	603b      	str	r3, [r7, #0]
    }
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <prvSwitchTimerLists+0xc0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1b1      	bne.n	8003cec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <prvSwitchTimerLists+0xc0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <prvSwitchTimerLists+0xc4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <prvSwitchTimerLists+0xc0>)
 8003d94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d96:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <prvSwitchTimerLists+0xc4>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	6013      	str	r3, [r2, #0]
    }
 8003d9c:	bf00      	nop
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	2000024c 	.word	0x2000024c
 8003da8:	20000250 	.word	0x20000250

08003dac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003db0:	f000 f962 	bl	8004078 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <prvCheckForValidListAndQueue+0x54>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11d      	bne.n	8003df8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003dbc:	4811      	ldr	r0, [pc, #68]	; (8003e04 <prvCheckForValidListAndQueue+0x58>)
 8003dbe:	f7fe f9a9 	bl	8002114 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003dc2:	4811      	ldr	r0, [pc, #68]	; (8003e08 <prvCheckForValidListAndQueue+0x5c>)
 8003dc4:	f7fe f9a6 	bl	8002114 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <prvCheckForValidListAndQueue+0x60>)
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <prvCheckForValidListAndQueue+0x58>)
 8003dcc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <prvCheckForValidListAndQueue+0x64>)
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <prvCheckForValidListAndQueue+0x5c>)
 8003dd2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	210c      	movs	r1, #12
 8003dd8:	200a      	movs	r0, #10
 8003dda:	f7fe faaa 	bl	8002332 <xQueueGenericCreate>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <prvCheckForValidListAndQueue+0x54>)
 8003de2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvCheckForValidListAndQueue+0x54>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <prvCheckForValidListAndQueue+0x54>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4908      	ldr	r1, [pc, #32]	; (8003e14 <prvCheckForValidListAndQueue+0x68>)
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fe94 	bl	8002b20 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003df8:	f000 f96e 	bl	80040d8 <vPortExitCritical>
    }
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000254 	.word	0x20000254
 8003e04:	20000224 	.word	0x20000224
 8003e08:	20000238 	.word	0x20000238
 8003e0c:	2000024c 	.word	0x2000024c
 8003e10:	20000250 	.word	0x20000250
 8003e14:	0800517c 	.word	0x0800517c

08003e18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3b04      	subs	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b04      	subs	r3, #4
 8003e36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0201 	bic.w	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b04      	subs	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <pxPortInitialiseStack+0x64>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b14      	subs	r3, #20
 8003e52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3b04      	subs	r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f06f 0202 	mvn.w	r2, #2
 8003e66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3b20      	subs	r3, #32
 8003e6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	08003e81 	.word	0x08003e81

08003e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <prvTaskExitError+0x54>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d00a      	beq.n	8003eaa <prvTaskExitError+0x2a>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60fb      	str	r3, [r7, #12]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <prvTaskExitError+0x28>
        __asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	60bb      	str	r3, [r7, #8]
    }
 8003ebc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ebe:	bf00      	nop
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0fc      	beq.n	8003ec0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	20000010 	.word	0x20000010
	...

08003ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <pxCurrentTCBConst2>)
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	6808      	ldr	r0, [r1, #0]
 8003ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	f380 8809 	msr	PSP, r0
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8811 	msr	BASEPRI, r0
 8003efa:	4770      	bx	lr
 8003efc:	f3af 8000 	nop.w

08003f00 <pxCurrentTCBConst2>:
 8003f00:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f08:	4808      	ldr	r0, [pc, #32]	; (8003f2c <prvPortStartFirstTask+0x24>)
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	6800      	ldr	r0, [r0, #0]
 8003f0e:	f380 8808 	msr	MSP, r0
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f380 8814 	msr	CONTROL, r0
 8003f1a:	b662      	cpsie	i
 8003f1c:	b661      	cpsie	f
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	df00      	svc	0
 8003f28:	bf00      	nop
 8003f2a:	0000      	.short	0x0000
 8003f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop

08003f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f3a:	4b46      	ldr	r3, [pc, #280]	; (8004054 <xPortStartScheduler+0x120>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a46      	ldr	r2, [pc, #280]	; (8004058 <xPortStartScheduler+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10a      	bne.n	8003f5a <xPortStartScheduler+0x26>
        __asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	613b      	str	r3, [r7, #16]
    }
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <xPortStartScheduler+0x120>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <xPortStartScheduler+0x128>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10a      	bne.n	8003f7a <xPortStartScheduler+0x46>
        __asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60fb      	str	r3, [r7, #12]
    }
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <xPortStartScheduler+0x12c>)
 8003f7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b31      	ldr	r3, [pc, #196]	; (8004064 <xPortStartScheduler+0x130>)
 8003fa0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <xPortStartScheduler+0x134>)
 8003fa4:	2207      	movs	r2, #7
 8003fa6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fa8:	e009      	b.n	8003fbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003faa:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <xPortStartScheduler+0x134>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <xPortStartScheduler+0x134>)
 8003fb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d0ef      	beq.n	8003faa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <xPortStartScheduler+0x134>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1c3 0307 	rsb	r3, r3, #7
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00a      	beq.n	8003fec <xPortStartScheduler+0xb8>
        __asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	60bb      	str	r3, [r7, #8]
    }
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <xPortStartScheduler+0x134>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <xPortStartScheduler+0x134>)
 8003ff4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ff6:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <xPortStartScheduler+0x134>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <xPortStartScheduler+0x134>)
 8004000:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <xPortStartScheduler+0x138>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <xPortStartScheduler+0x138>)
 8004010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004014:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <xPortStartScheduler+0x138>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <xPortStartScheduler+0x138>)
 800401c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004022:	f000 f8db 	bl	80041dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <xPortStartScheduler+0x13c>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800402c:	f000 f8fa 	bl	8004224 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <xPortStartScheduler+0x140>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <xPortStartScheduler+0x140>)
 8004036:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800403a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800403c:	f7ff ff64 	bl	8003f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004040:	f7ff f898 	bl	8003174 <vTaskSwitchContext>
    prvTaskExitError();
 8004044:	f7ff ff1c 	bl	8003e80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	e000ed00 	.word	0xe000ed00
 8004058:	410fc271 	.word	0x410fc271
 800405c:	410fc270 	.word	0x410fc270
 8004060:	e000e400 	.word	0xe000e400
 8004064:	20000260 	.word	0x20000260
 8004068:	20000264 	.word	0x20000264
 800406c:	e000ed20 	.word	0xe000ed20
 8004070:	20000010 	.word	0x20000010
 8004074:	e000ef34 	.word	0xe000ef34

08004078 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
        __asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
    }
 8004090:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <vPortEnterCritical+0x58>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <vPortEnterCritical+0x58>)
 800409a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <vPortEnterCritical+0x58>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10f      	bne.n	80040c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <vPortEnterCritical+0x5c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
    }
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <vPortEnterCritical+0x4a>
    }
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000010 	.word	0x20000010
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <vPortExitCritical+0x50>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <vPortExitCritical+0x24>
        __asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	607b      	str	r3, [r7, #4]
    }
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <vPortExitCritical+0x50>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3b01      	subs	r3, #1
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <vPortExitCritical+0x50>)
 8004104:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <vPortExitCritical+0x50>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <vPortExitCritical+0x42>
 800410e:	2300      	movs	r3, #0
 8004110:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f383 8811 	msr	BASEPRI, r3
    }
 8004118:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000010 	.word	0x20000010
 800412c:	00000000 	.word	0x00000000

08004130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004130:	f3ef 8009 	mrs	r0, PSP
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4b15      	ldr	r3, [pc, #84]	; (8004190 <pxCurrentTCBConst>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	f01e 0f10 	tst.w	lr, #16
 8004140:	bf08      	it	eq
 8004142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	6010      	str	r0, [r2, #0]
 800414c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004154:	f380 8811 	msr	BASEPRI, r0
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f7ff f808 	bl	8003174 <vTaskSwitchContext>
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f380 8811 	msr	BASEPRI, r0
 800416c:	bc09      	pop	{r0, r3}
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6808      	ldr	r0, [r1, #0]
 8004172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004176:	f01e 0f10 	tst.w	lr, #16
 800417a:	bf08      	it	eq
 800417c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004180:	f380 8809 	msr	PSP, r0
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst>:
 8004190:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
        __asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	607b      	str	r3, [r7, #4]
    }
 80041b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041b2:	f7fe ff49 	bl	8003048 <xTaskIncrementTick>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <SysTick_Handler+0x40>)
 80041be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f383 8811 	msr	BASEPRI, r3
    }
 80041ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <vPortSetupTimerInterrupt+0x34>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <vPortSetupTimerInterrupt+0x38>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <vPortSetupTimerInterrupt+0x3c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <vPortSetupTimerInterrupt+0x40>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	4a09      	ldr	r2, [pc, #36]	; (8004220 <vPortSetupTimerInterrupt+0x44>)
 80041fa:	3b01      	subs	r3, #1
 80041fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <vPortSetupTimerInterrupt+0x34>)
 8004200:	2207      	movs	r2, #7
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e010 	.word	0xe000e010
 8004214:	e000e018 	.word	0xe000e018
 8004218:	20000000 	.word	0x20000000
 800421c:	10624dd3 	.word	0x10624dd3
 8004220:	e000e014 	.word	0xe000e014

08004224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004234 <vPortEnableVFP+0x10>
 8004228:	6801      	ldr	r1, [r0, #0]
 800422a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800422e:	6001      	str	r1, [r0, #0]
 8004230:	4770      	bx	lr
 8004232:	0000      	.short	0x0000
 8004234:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop

0800423c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004242:	f3ef 8305 	mrs	r3, IPSR
 8004246:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	d914      	bls.n	8004278 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <vPortValidateInterruptPriority+0x70>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <vPortValidateInterruptPriority+0x74>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	7afa      	ldrb	r2, [r7, #11]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20a      	bcs.n	8004278 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <vPortValidateInterruptPriority+0x78>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <vPortValidateInterruptPriority+0x7c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d90a      	bls.n	800429e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	603b      	str	r3, [r7, #0]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <vPortValidateInterruptPriority+0x60>
    }
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e3f0 	.word	0xe000e3f0
 80042b0:	20000260 	.word	0x20000260
 80042b4:	e000ed0c 	.word	0xe000ed0c
 80042b8:	20000264 	.word	0x20000264

080042bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80042c8:	f7fe fe12 	bl	8002ef0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042cc:	4b65      	ldr	r3, [pc, #404]	; (8004464 <pvPortMalloc+0x1a8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042d4:	f000 f934 	bl	8004540 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042d8:	4b63      	ldr	r3, [pc, #396]	; (8004468 <pvPortMalloc+0x1ac>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 80a7 	bne.w	8004434 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02d      	beq.n	8004348 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80042ec:	2208      	movs	r2, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d227      	bcs.n	8004348 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80042f8:	2208      	movs	r2, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	3308      	adds	r3, #8
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d214      	bcs.n	8004342 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f023 0307 	bic.w	r3, r3, #7
 800431e:	3308      	adds	r3, #8
 8004320:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <pvPortMalloc+0x92>
        __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	617b      	str	r3, [r7, #20]
    }
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004346:	e002      	b.n	800434e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e000      	b.n	8004350 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800434e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06e      	beq.n	8004434 <pvPortMalloc+0x178>
 8004356:	4b45      	ldr	r3, [pc, #276]	; (800446c <pvPortMalloc+0x1b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d869      	bhi.n	8004434 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <pvPortMalloc+0x1b4>)
 8004362:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004364:	4b42      	ldr	r3, [pc, #264]	; (8004470 <pvPortMalloc+0x1b4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800436a:	e004      	b.n	8004376 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d903      	bls.n	8004388 <pvPortMalloc+0xcc>
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f1      	bne.n	800436c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <pvPortMalloc+0x1a8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	429a      	cmp	r2, r3
 8004390:	d050      	beq.n	8004434 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2208      	movs	r2, #8
 8004398:	4413      	add	r3, r2
 800439a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	2308      	movs	r3, #8
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d91f      	bls.n	80043f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <pvPortMalloc+0x120>
        __asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	613b      	str	r3, [r7, #16]
    }
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043ee:	69b8      	ldr	r0, [r7, #24]
 80043f0:	f000 f908 	bl	8004604 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <pvPortMalloc+0x1b0>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <pvPortMalloc+0x1b0>)
 8004400:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <pvPortMalloc+0x1b0>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <pvPortMalloc+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d203      	bcs.n	8004416 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <pvPortMalloc+0x1b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a18      	ldr	r2, [pc, #96]	; (8004474 <pvPortMalloc+0x1b8>)
 8004414:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <pvPortMalloc+0x1ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	431a      	orrs	r2, r3
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <pvPortMalloc+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <pvPortMalloc+0x1bc>)
 8004432:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004434:	f7fe fd6a 	bl	8002f0c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <pvPortMalloc+0x19c>
        __asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
    }
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <pvPortMalloc+0x19a>
    return pvReturn;
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20012e70 	.word	0x20012e70
 8004468:	20012e84 	.word	0x20012e84
 800446c:	20012e74 	.word	0x20012e74
 8004470:	20012e68 	.word	0x20012e68
 8004474:	20012e78 	.word	0x20012e78
 8004478:	20012e7c 	.word	0x20012e7c

0800447c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d04d      	beq.n	800452a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800448e:	2308      	movs	r3, #8
 8004490:	425b      	negs	r3, r3
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <vPortFree+0xb8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <vPortFree+0x44>
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	60fb      	str	r3, [r7, #12]
    }
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <vPortFree+0x62>
        __asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60bb      	str	r3, [r7, #8]
    }
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <vPortFree+0xb8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11a      	bne.n	800452a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <vPortFree+0xb8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	401a      	ands	r2, r3
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004504:	f7fe fcf4 	bl	8002ef0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <vPortFree+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4413      	add	r3, r2
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <vPortFree+0xbc>)
 8004514:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004516:	6938      	ldr	r0, [r7, #16]
 8004518:	f000 f874 	bl	8004604 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <vPortFree+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a06      	ldr	r2, [pc, #24]	; (800453c <vPortFree+0xc0>)
 8004524:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004526:	f7fe fcf1 	bl	8002f0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20012e84 	.word	0x20012e84
 8004538:	20012e74 	.word	0x20012e74
 800453c:	20012e80 	.word	0x20012e80

08004540 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004546:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800454a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <prvHeapInit+0xac>)
 800454e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3307      	adds	r3, #7
 800455e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <prvHeapInit+0xac>)
 8004570:	4413      	add	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <prvHeapInit+0xb0>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <prvHeapInit+0xb0>)
 8004580:	2200      	movs	r2, #0
 8004582:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800458c:	2208      	movs	r2, #8
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <prvHeapInit+0xb4>)
 80045a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <prvHeapInit+0xb4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <prvHeapInit+0xb4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <prvHeapInit+0xb4>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <prvHeapInit+0xb8>)
 80045ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a09      	ldr	r2, [pc, #36]	; (80045fc <prvHeapInit+0xbc>)
 80045d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <prvHeapInit+0xc0>)
 80045da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000268 	.word	0x20000268
 80045f0:	20012e68 	.word	0x20012e68
 80045f4:	20012e70 	.word	0x20012e70
 80045f8:	20012e78 	.word	0x20012e78
 80045fc:	20012e74 	.word	0x20012e74
 8004600:	20012e84 	.word	0x20012e84

08004604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <prvInsertBlockIntoFreeList+0xac>)
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <prvInsertBlockIntoFreeList+0x14>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d8f7      	bhi.n	8004612 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	4413      	add	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d108      	bne.n	8004646 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	441a      	add	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d118      	bne.n	800468c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d00d      	beq.n	8004682 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e008      	b.n	8004694 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e003      	b.n	8004694 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d002      	beq.n	80046a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20012e68 	.word	0x20012e68
 80046b4:	20012e70 	.word	0x20012e70

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	; (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	; (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	; (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 fd3a 	bl	8005144 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08005208 	.word	0x08005208
 80046f4:	08005208 	.word	0x08005208
 80046f8:	08005208 	.word	0x08005208
 80046fc:	0800520c 	.word	0x0800520c

08004700 <memcpy>:
 8004700:	440a      	add	r2, r1
 8004702:	4291      	cmp	r1, r2
 8004704:	f100 33ff 	add.w	r3, r0, #4294967295
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	4770      	bx	lr
 800470c:	b510      	push	{r4, lr}
 800470e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004716:	4291      	cmp	r1, r2
 8004718:	d1f9      	bne.n	800470e <memcpy+0xe>
 800471a:	bd10      	pop	{r4, pc}

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <_puts_r>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460e      	mov	r6, r1
 8004730:	4605      	mov	r5, r0
 8004732:	b118      	cbz	r0, 800473c <_puts_r+0x10>
 8004734:	6983      	ldr	r3, [r0, #24]
 8004736:	b90b      	cbnz	r3, 800473c <_puts_r+0x10>
 8004738:	f000 fa48 	bl	8004bcc <__sinit>
 800473c:	69ab      	ldr	r3, [r5, #24]
 800473e:	68ac      	ldr	r4, [r5, #8]
 8004740:	b913      	cbnz	r3, 8004748 <_puts_r+0x1c>
 8004742:	4628      	mov	r0, r5
 8004744:	f000 fa42 	bl	8004bcc <__sinit>
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <_puts_r+0xd0>)
 800474a:	429c      	cmp	r4, r3
 800474c:	d120      	bne.n	8004790 <_puts_r+0x64>
 800474e:	686c      	ldr	r4, [r5, #4]
 8004750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d405      	bmi.n	8004762 <_puts_r+0x36>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	0598      	lsls	r0, r3, #22
 800475a:	d402      	bmi.n	8004762 <_puts_r+0x36>
 800475c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800475e:	f000 fad3 	bl	8004d08 <__retarget_lock_acquire_recursive>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	0719      	lsls	r1, r3, #28
 8004766:	d51d      	bpl.n	80047a4 <_puts_r+0x78>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	b1db      	cbz	r3, 80047a4 <_puts_r+0x78>
 800476c:	3e01      	subs	r6, #1
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004774:	3b01      	subs	r3, #1
 8004776:	60a3      	str	r3, [r4, #8]
 8004778:	bb39      	cbnz	r1, 80047ca <_puts_r+0x9e>
 800477a:	2b00      	cmp	r3, #0
 800477c:	da38      	bge.n	80047f0 <_puts_r+0xc4>
 800477e:	4622      	mov	r2, r4
 8004780:	210a      	movs	r1, #10
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f848 	bl	8004818 <__swbuf_r>
 8004788:	3001      	adds	r0, #1
 800478a:	d011      	beq.n	80047b0 <_puts_r+0x84>
 800478c:	250a      	movs	r5, #10
 800478e:	e011      	b.n	80047b4 <_puts_r+0x88>
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <_puts_r+0xd4>)
 8004792:	429c      	cmp	r4, r3
 8004794:	d101      	bne.n	800479a <_puts_r+0x6e>
 8004796:	68ac      	ldr	r4, [r5, #8]
 8004798:	e7da      	b.n	8004750 <_puts_r+0x24>
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <_puts_r+0xd8>)
 800479c:	429c      	cmp	r4, r3
 800479e:	bf08      	it	eq
 80047a0:	68ec      	ldreq	r4, [r5, #12]
 80047a2:	e7d5      	b.n	8004750 <_puts_r+0x24>
 80047a4:	4621      	mov	r1, r4
 80047a6:	4628      	mov	r0, r5
 80047a8:	f000 f888 	bl	80048bc <__swsetup_r>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d0dd      	beq.n	800476c <_puts_r+0x40>
 80047b0:	f04f 35ff 	mov.w	r5, #4294967295
 80047b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b6:	07da      	lsls	r2, r3, #31
 80047b8:	d405      	bmi.n	80047c6 <_puts_r+0x9a>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	059b      	lsls	r3, r3, #22
 80047be:	d402      	bmi.n	80047c6 <_puts_r+0x9a>
 80047c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047c2:	f000 faa2 	bl	8004d0a <__retarget_lock_release_recursive>
 80047c6:	4628      	mov	r0, r5
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da04      	bge.n	80047d8 <_puts_r+0xac>
 80047ce:	69a2      	ldr	r2, [r4, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	dc06      	bgt.n	80047e2 <_puts_r+0xb6>
 80047d4:	290a      	cmp	r1, #10
 80047d6:	d004      	beq.n	80047e2 <_puts_r+0xb6>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	7019      	strb	r1, [r3, #0]
 80047e0:	e7c5      	b.n	800476e <_puts_r+0x42>
 80047e2:	4622      	mov	r2, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f817 	bl	8004818 <__swbuf_r>
 80047ea:	3001      	adds	r0, #1
 80047ec:	d1bf      	bne.n	800476e <_puts_r+0x42>
 80047ee:	e7df      	b.n	80047b0 <_puts_r+0x84>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	250a      	movs	r5, #10
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	701d      	strb	r5, [r3, #0]
 80047fa:	e7db      	b.n	80047b4 <_puts_r+0x88>
 80047fc:	080051c0 	.word	0x080051c0
 8004800:	080051e0 	.word	0x080051e0
 8004804:	080051a0 	.word	0x080051a0

08004808 <puts>:
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <puts+0xc>)
 800480a:	4601      	mov	r1, r0
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f7ff bf8d 	b.w	800472c <_puts_r>
 8004812:	bf00      	nop
 8004814:	20000014 	.word	0x20000014

08004818 <__swbuf_r>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	460e      	mov	r6, r1
 800481c:	4614      	mov	r4, r2
 800481e:	4605      	mov	r5, r0
 8004820:	b118      	cbz	r0, 800482a <__swbuf_r+0x12>
 8004822:	6983      	ldr	r3, [r0, #24]
 8004824:	b90b      	cbnz	r3, 800482a <__swbuf_r+0x12>
 8004826:	f000 f9d1 	bl	8004bcc <__sinit>
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <__swbuf_r+0x98>)
 800482c:	429c      	cmp	r4, r3
 800482e:	d12b      	bne.n	8004888 <__swbuf_r+0x70>
 8004830:	686c      	ldr	r4, [r5, #4]
 8004832:	69a3      	ldr	r3, [r4, #24]
 8004834:	60a3      	str	r3, [r4, #8]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	071a      	lsls	r2, r3, #28
 800483a:	d52f      	bpl.n	800489c <__swbuf_r+0x84>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	b36b      	cbz	r3, 800489c <__swbuf_r+0x84>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1ac0      	subs	r0, r0, r3
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	b2f6      	uxtb	r6, r6
 800484a:	4283      	cmp	r3, r0
 800484c:	4637      	mov	r7, r6
 800484e:	dc04      	bgt.n	800485a <__swbuf_r+0x42>
 8004850:	4621      	mov	r1, r4
 8004852:	4628      	mov	r0, r5
 8004854:	f000 f926 	bl	8004aa4 <_fflush_r>
 8004858:	bb30      	cbnz	r0, 80048a8 <__swbuf_r+0x90>
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	3b01      	subs	r3, #1
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	701e      	strb	r6, [r3, #0]
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	3001      	adds	r0, #1
 800486c:	4283      	cmp	r3, r0
 800486e:	d004      	beq.n	800487a <__swbuf_r+0x62>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d506      	bpl.n	8004884 <__swbuf_r+0x6c>
 8004876:	2e0a      	cmp	r6, #10
 8004878:	d104      	bne.n	8004884 <__swbuf_r+0x6c>
 800487a:	4621      	mov	r1, r4
 800487c:	4628      	mov	r0, r5
 800487e:	f000 f911 	bl	8004aa4 <_fflush_r>
 8004882:	b988      	cbnz	r0, 80048a8 <__swbuf_r+0x90>
 8004884:	4638      	mov	r0, r7
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <__swbuf_r+0x9c>)
 800488a:	429c      	cmp	r4, r3
 800488c:	d101      	bne.n	8004892 <__swbuf_r+0x7a>
 800488e:	68ac      	ldr	r4, [r5, #8]
 8004890:	e7cf      	b.n	8004832 <__swbuf_r+0x1a>
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <__swbuf_r+0xa0>)
 8004894:	429c      	cmp	r4, r3
 8004896:	bf08      	it	eq
 8004898:	68ec      	ldreq	r4, [r5, #12]
 800489a:	e7ca      	b.n	8004832 <__swbuf_r+0x1a>
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f80c 	bl	80048bc <__swsetup_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0cb      	beq.n	8004840 <__swbuf_r+0x28>
 80048a8:	f04f 37ff 	mov.w	r7, #4294967295
 80048ac:	e7ea      	b.n	8004884 <__swbuf_r+0x6c>
 80048ae:	bf00      	nop
 80048b0:	080051c0 	.word	0x080051c0
 80048b4:	080051e0 	.word	0x080051e0
 80048b8:	080051a0 	.word	0x080051a0

080048bc <__swsetup_r>:
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <__swsetup_r+0xcc>)
 80048be:	b570      	push	{r4, r5, r6, lr}
 80048c0:	681d      	ldr	r5, [r3, #0]
 80048c2:	4606      	mov	r6, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	b125      	cbz	r5, 80048d2 <__swsetup_r+0x16>
 80048c8:	69ab      	ldr	r3, [r5, #24]
 80048ca:	b913      	cbnz	r3, 80048d2 <__swsetup_r+0x16>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 f97d 	bl	8004bcc <__sinit>
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <__swsetup_r+0xd0>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d10f      	bne.n	80048f8 <__swsetup_r+0x3c>
 80048d8:	686c      	ldr	r4, [r5, #4]
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e0:	0719      	lsls	r1, r3, #28
 80048e2:	d42c      	bmi.n	800493e <__swsetup_r+0x82>
 80048e4:	06dd      	lsls	r5, r3, #27
 80048e6:	d411      	bmi.n	800490c <__swsetup_r+0x50>
 80048e8:	2309      	movs	r3, #9
 80048ea:	6033      	str	r3, [r6, #0]
 80048ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	f04f 30ff 	mov.w	r0, #4294967295
 80048f6:	e03e      	b.n	8004976 <__swsetup_r+0xba>
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <__swsetup_r+0xd4>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d101      	bne.n	8004902 <__swsetup_r+0x46>
 80048fe:	68ac      	ldr	r4, [r5, #8]
 8004900:	e7eb      	b.n	80048da <__swsetup_r+0x1e>
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <__swsetup_r+0xd8>)
 8004904:	429c      	cmp	r4, r3
 8004906:	bf08      	it	eq
 8004908:	68ec      	ldreq	r4, [r5, #12]
 800490a:	e7e6      	b.n	80048da <__swsetup_r+0x1e>
 800490c:	0758      	lsls	r0, r3, #29
 800490e:	d512      	bpl.n	8004936 <__swsetup_r+0x7a>
 8004910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004912:	b141      	cbz	r1, 8004926 <__swsetup_r+0x6a>
 8004914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__swsetup_r+0x66>
 800491c:	4630      	mov	r0, r6
 800491e:	f000 fa5b 	bl	8004dd8 <_free_r>
 8004922:	2300      	movs	r3, #0
 8004924:	6363      	str	r3, [r4, #52]	; 0x34
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	2300      	movs	r3, #0
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	b94b      	cbnz	r3, 8004956 <__swsetup_r+0x9a>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494c:	d003      	beq.n	8004956 <__swsetup_r+0x9a>
 800494e:	4621      	mov	r1, r4
 8004950:	4630      	mov	r0, r6
 8004952:	f000 fa01 	bl	8004d58 <__smakebuf_r>
 8004956:	89a0      	ldrh	r0, [r4, #12]
 8004958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800495c:	f010 0301 	ands.w	r3, r0, #1
 8004960:	d00a      	beq.n	8004978 <__swsetup_r+0xbc>
 8004962:	2300      	movs	r3, #0
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	6963      	ldr	r3, [r4, #20]
 8004968:	425b      	negs	r3, r3
 800496a:	61a3      	str	r3, [r4, #24]
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	b943      	cbnz	r3, 8004982 <__swsetup_r+0xc6>
 8004970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004974:	d1ba      	bne.n	80048ec <__swsetup_r+0x30>
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	0781      	lsls	r1, r0, #30
 800497a:	bf58      	it	pl
 800497c:	6963      	ldrpl	r3, [r4, #20]
 800497e:	60a3      	str	r3, [r4, #8]
 8004980:	e7f4      	b.n	800496c <__swsetup_r+0xb0>
 8004982:	2000      	movs	r0, #0
 8004984:	e7f7      	b.n	8004976 <__swsetup_r+0xba>
 8004986:	bf00      	nop
 8004988:	20000014 	.word	0x20000014
 800498c:	080051c0 	.word	0x080051c0
 8004990:	080051e0 	.word	0x080051e0
 8004994:	080051a0 	.word	0x080051a0

08004998 <__sflush_r>:
 8004998:	898a      	ldrh	r2, [r1, #12]
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	0710      	lsls	r0, r2, #28
 80049a2:	460c      	mov	r4, r1
 80049a4:	d458      	bmi.n	8004a58 <__sflush_r+0xc0>
 80049a6:	684b      	ldr	r3, [r1, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	dc05      	bgt.n	80049b8 <__sflush_r+0x20>
 80049ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dc02      	bgt.n	80049b8 <__sflush_r+0x20>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	d0f9      	beq.n	80049b2 <__sflush_r+0x1a>
 80049be:	2300      	movs	r3, #0
 80049c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c4:	682f      	ldr	r7, [r5, #0]
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	d032      	beq.n	8004a30 <__sflush_r+0x98>
 80049ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	075a      	lsls	r2, r3, #29
 80049d0:	d505      	bpl.n	80049de <__sflush_r+0x46>
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d8:	b10b      	cbz	r3, 80049de <__sflush_r+0x46>
 80049da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049dc:	1ac0      	subs	r0, r0, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	4602      	mov	r2, r0
 80049e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e4:	6a21      	ldr	r1, [r4, #32]
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b0      	blx	r6
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	d106      	bne.n	80049fe <__sflush_r+0x66>
 80049f0:	6829      	ldr	r1, [r5, #0]
 80049f2:	291d      	cmp	r1, #29
 80049f4:	d82c      	bhi.n	8004a50 <__sflush_r+0xb8>
 80049f6:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <__sflush_r+0x108>)
 80049f8:	40ca      	lsrs	r2, r1
 80049fa:	07d6      	lsls	r6, r2, #31
 80049fc:	d528      	bpl.n	8004a50 <__sflush_r+0xb8>
 80049fe:	2200      	movs	r2, #0
 8004a00:	6062      	str	r2, [r4, #4]
 8004a02:	04d9      	lsls	r1, r3, #19
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	d504      	bpl.n	8004a14 <__sflush_r+0x7c>
 8004a0a:	1c42      	adds	r2, r0, #1
 8004a0c:	d101      	bne.n	8004a12 <__sflush_r+0x7a>
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	b903      	cbnz	r3, 8004a14 <__sflush_r+0x7c>
 8004a12:	6560      	str	r0, [r4, #84]	; 0x54
 8004a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a16:	602f      	str	r7, [r5, #0]
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d0ca      	beq.n	80049b2 <__sflush_r+0x1a>
 8004a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a20:	4299      	cmp	r1, r3
 8004a22:	d002      	beq.n	8004a2a <__sflush_r+0x92>
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f9d7 	bl	8004dd8 <_free_r>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2e:	e7c1      	b.n	80049b4 <__sflush_r+0x1c>
 8004a30:	6a21      	ldr	r1, [r4, #32]
 8004a32:	2301      	movs	r3, #1
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b0      	blx	r6
 8004a38:	1c41      	adds	r1, r0, #1
 8004a3a:	d1c7      	bne.n	80049cc <__sflush_r+0x34>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0c4      	beq.n	80049cc <__sflush_r+0x34>
 8004a42:	2b1d      	cmp	r3, #29
 8004a44:	d001      	beq.n	8004a4a <__sflush_r+0xb2>
 8004a46:	2b16      	cmp	r3, #22
 8004a48:	d101      	bne.n	8004a4e <__sflush_r+0xb6>
 8004a4a:	602f      	str	r7, [r5, #0]
 8004a4c:	e7b1      	b.n	80049b2 <__sflush_r+0x1a>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	e7ad      	b.n	80049b4 <__sflush_r+0x1c>
 8004a58:	690f      	ldr	r7, [r1, #16]
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d0a9      	beq.n	80049b2 <__sflush_r+0x1a>
 8004a5e:	0793      	lsls	r3, r2, #30
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	bf08      	it	eq
 8004a64:	694b      	ldreq	r3, [r1, #20]
 8004a66:	600f      	str	r7, [r1, #0]
 8004a68:	bf18      	it	ne
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	eba6 0807 	sub.w	r8, r6, r7
 8004a70:	608b      	str	r3, [r1, #8]
 8004a72:	f1b8 0f00 	cmp.w	r8, #0
 8004a76:	dd9c      	ble.n	80049b2 <__sflush_r+0x1a>
 8004a78:	6a21      	ldr	r1, [r4, #32]
 8004a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	463a      	mov	r2, r7
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b0      	blx	r6
 8004a84:	2800      	cmp	r0, #0
 8004a86:	dc06      	bgt.n	8004a96 <__sflush_r+0xfe>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e78e      	b.n	80049b4 <__sflush_r+0x1c>
 8004a96:	4407      	add	r7, r0
 8004a98:	eba8 0800 	sub.w	r8, r8, r0
 8004a9c:	e7e9      	b.n	8004a72 <__sflush_r+0xda>
 8004a9e:	bf00      	nop
 8004aa0:	20400001 	.word	0x20400001

08004aa4 <_fflush_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	b913      	cbnz	r3, 8004ab4 <_fflush_r+0x10>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	b118      	cbz	r0, 8004abe <_fflush_r+0x1a>
 8004ab6:	6983      	ldr	r3, [r0, #24]
 8004ab8:	b90b      	cbnz	r3, 8004abe <_fflush_r+0x1a>
 8004aba:	f000 f887 	bl	8004bcc <__sinit>
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <_fflush_r+0x6c>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d11b      	bne.n	8004afc <_fflush_r+0x58>
 8004ac4:	686c      	ldr	r4, [r5, #4]
 8004ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <_fflush_r+0xa>
 8004ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ad0:	07d0      	lsls	r0, r2, #31
 8004ad2:	d404      	bmi.n	8004ade <_fflush_r+0x3a>
 8004ad4:	0599      	lsls	r1, r3, #22
 8004ad6:	d402      	bmi.n	8004ade <_fflush_r+0x3a>
 8004ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ada:	f000 f915 	bl	8004d08 <__retarget_lock_acquire_recursive>
 8004ade:	4628      	mov	r0, r5
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	f7ff ff59 	bl	8004998 <__sflush_r>
 8004ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae8:	07da      	lsls	r2, r3, #31
 8004aea:	4605      	mov	r5, r0
 8004aec:	d4e0      	bmi.n	8004ab0 <_fflush_r+0xc>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	059b      	lsls	r3, r3, #22
 8004af2:	d4dd      	bmi.n	8004ab0 <_fflush_r+0xc>
 8004af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af6:	f000 f908 	bl	8004d0a <__retarget_lock_release_recursive>
 8004afa:	e7d9      	b.n	8004ab0 <_fflush_r+0xc>
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_fflush_r+0x70>)
 8004afe:	429c      	cmp	r4, r3
 8004b00:	d101      	bne.n	8004b06 <_fflush_r+0x62>
 8004b02:	68ac      	ldr	r4, [r5, #8]
 8004b04:	e7df      	b.n	8004ac6 <_fflush_r+0x22>
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <_fflush_r+0x74>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	bf08      	it	eq
 8004b0c:	68ec      	ldreq	r4, [r5, #12]
 8004b0e:	e7da      	b.n	8004ac6 <_fflush_r+0x22>
 8004b10:	080051c0 	.word	0x080051c0
 8004b14:	080051e0 	.word	0x080051e0
 8004b18:	080051a0 	.word	0x080051a0

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2a:	6083      	str	r3, [r0, #8]
 8004b2c:	8181      	strh	r1, [r0, #12]
 8004b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b30:	81c2      	strh	r2, [r0, #14]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	; 0x5c
 8004b3a:	f7ff fdef 	bl	800471c <memset>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x38>)
 8004b40:	6263      	str	r3, [r4, #36]	; 0x24
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x3c>)
 8004b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x40>)
 8004b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <std+0x44>)
 8004b4c:	6224      	str	r4, [r4, #32]
 8004b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	08004fb9 	.word	0x08004fb9
 8004b58:	08004fdb 	.word	0x08004fdb
 8004b5c:	08005013 	.word	0x08005013
 8004b60:	08005037 	.word	0x08005037

08004b64 <_cleanup_r>:
 8004b64:	4901      	ldr	r1, [pc, #4]	; (8004b6c <_cleanup_r+0x8>)
 8004b66:	f000 b8af 	b.w	8004cc8 <_fwalk_reent>
 8004b6a:	bf00      	nop
 8004b6c:	08004aa5 	.word	0x08004aa5

08004b70 <__sfmoreglue>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	2268      	movs	r2, #104	; 0x68
 8004b74:	1e4d      	subs	r5, r1, #1
 8004b76:	4355      	muls	r5, r2
 8004b78:	460e      	mov	r6, r1
 8004b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7e:	f000 f997 	bl	8004eb0 <_malloc_r>
 8004b82:	4604      	mov	r4, r0
 8004b84:	b140      	cbz	r0, 8004b98 <__sfmoreglue+0x28>
 8004b86:	2100      	movs	r1, #0
 8004b88:	e9c0 1600 	strd	r1, r6, [r0]
 8004b8c:	300c      	adds	r0, #12
 8004b8e:	60a0      	str	r0, [r4, #8]
 8004b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b94:	f7ff fdc2 	bl	800471c <memset>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}

08004b9c <__sfp_lock_acquire>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__sfp_lock_acquire+0x8>)
 8004b9e:	f000 b8b3 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	20012e89 	.word	0x20012e89

08004ba8 <__sfp_lock_release>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	; (8004bb0 <__sfp_lock_release+0x8>)
 8004baa:	f000 b8ae 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	20012e89 	.word	0x20012e89

08004bb4 <__sinit_lock_acquire>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	; (8004bbc <__sinit_lock_acquire+0x8>)
 8004bb6:	f000 b8a7 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004bba:	bf00      	nop
 8004bbc:	20012e8a 	.word	0x20012e8a

08004bc0 <__sinit_lock_release>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__sinit_lock_release+0x8>)
 8004bc2:	f000 b8a2 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20012e8a 	.word	0x20012e8a

08004bcc <__sinit>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
 8004bd0:	f7ff fff0 	bl	8004bb4 <__sinit_lock_acquire>
 8004bd4:	69a3      	ldr	r3, [r4, #24]
 8004bd6:	b11b      	cbz	r3, 8004be0 <__sinit+0x14>
 8004bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bdc:	f7ff bff0 	b.w	8004bc0 <__sinit_lock_release>
 8004be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be4:	6523      	str	r3, [r4, #80]	; 0x50
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <__sinit+0x68>)
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <__sinit+0x6c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	bf04      	itt	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	61a3      	streq	r3, [r4, #24]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 f820 	bl	8004c3c <__sfp>
 8004bfc:	6060      	str	r0, [r4, #4]
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 f81c 	bl	8004c3c <__sfp>
 8004c04:	60a0      	str	r0, [r4, #8]
 8004c06:	4620      	mov	r0, r4
 8004c08:	f000 f818 	bl	8004c3c <__sfp>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60e0      	str	r0, [r4, #12]
 8004c10:	2104      	movs	r1, #4
 8004c12:	6860      	ldr	r0, [r4, #4]
 8004c14:	f7ff ff82 	bl	8004b1c <std>
 8004c18:	68a0      	ldr	r0, [r4, #8]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	2109      	movs	r1, #9
 8004c1e:	f7ff ff7d 	bl	8004b1c <std>
 8004c22:	68e0      	ldr	r0, [r4, #12]
 8004c24:	2202      	movs	r2, #2
 8004c26:	2112      	movs	r1, #18
 8004c28:	f7ff ff78 	bl	8004b1c <std>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61a3      	str	r3, [r4, #24]
 8004c30:	e7d2      	b.n	8004bd8 <__sinit+0xc>
 8004c32:	bf00      	nop
 8004c34:	0800519c 	.word	0x0800519c
 8004c38:	08004b65 	.word	0x08004b65

08004c3c <__sfp>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	4607      	mov	r7, r0
 8004c40:	f7ff ffac 	bl	8004b9c <__sfp_lock_acquire>
 8004c44:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <__sfp+0x84>)
 8004c46:	681e      	ldr	r6, [r3, #0]
 8004c48:	69b3      	ldr	r3, [r6, #24]
 8004c4a:	b913      	cbnz	r3, 8004c52 <__sfp+0x16>
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff ffbd 	bl	8004bcc <__sinit>
 8004c52:	3648      	adds	r6, #72	; 0x48
 8004c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	d503      	bpl.n	8004c64 <__sfp+0x28>
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	b30b      	cbz	r3, 8004ca4 <__sfp+0x68>
 8004c60:	6836      	ldr	r6, [r6, #0]
 8004c62:	e7f7      	b.n	8004c54 <__sfp+0x18>
 8004c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c68:	b9d5      	cbnz	r5, 8004ca0 <__sfp+0x64>
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <__sfp+0x88>)
 8004c6c:	60e3      	str	r3, [r4, #12]
 8004c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c72:	6665      	str	r5, [r4, #100]	; 0x64
 8004c74:	f000 f847 	bl	8004d06 <__retarget_lock_init_recursive>
 8004c78:	f7ff ff96 	bl	8004ba8 <__sfp_lock_release>
 8004c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c84:	6025      	str	r5, [r4, #0]
 8004c86:	61a5      	str	r5, [r4, #24]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c90:	f7ff fd44 	bl	800471c <memset>
 8004c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca0:	3468      	adds	r4, #104	; 0x68
 8004ca2:	e7d9      	b.n	8004c58 <__sfp+0x1c>
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f7ff ff62 	bl	8004b70 <__sfmoreglue>
 8004cac:	4604      	mov	r4, r0
 8004cae:	6030      	str	r0, [r6, #0]
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1d5      	bne.n	8004c60 <__sfp+0x24>
 8004cb4:	f7ff ff78 	bl	8004ba8 <__sfp_lock_release>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	e7ee      	b.n	8004c9c <__sfp+0x60>
 8004cbe:	bf00      	nop
 8004cc0:	0800519c 	.word	0x0800519c
 8004cc4:	ffff0001 	.word	0xffff0001

08004cc8 <_fwalk_reent>:
 8004cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	4606      	mov	r6, r0
 8004cce:	4688      	mov	r8, r1
 8004cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd4:	2700      	movs	r7, #0
 8004cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cda:	f1b9 0901 	subs.w	r9, r9, #1
 8004cde:	d505      	bpl.n	8004cec <_fwalk_reent+0x24>
 8004ce0:	6824      	ldr	r4, [r4, #0]
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	d1f7      	bne.n	8004cd6 <_fwalk_reent+0xe>
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cec:	89ab      	ldrh	r3, [r5, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d907      	bls.n	8004d02 <_fwalk_reent+0x3a>
 8004cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	d003      	beq.n	8004d02 <_fwalk_reent+0x3a>
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	47c0      	blx	r8
 8004d00:	4307      	orrs	r7, r0
 8004d02:	3568      	adds	r5, #104	; 0x68
 8004d04:	e7e9      	b.n	8004cda <_fwalk_reent+0x12>

08004d06 <__retarget_lock_init_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <__retarget_lock_acquire_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <__retarget_lock_release_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <__swhatbuf_r>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	460e      	mov	r6, r1
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	2900      	cmp	r1, #0
 8004d16:	b096      	sub	sp, #88	; 0x58
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	da08      	bge.n	8004d30 <__swhatbuf_r+0x24>
 8004d1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	602a      	str	r2, [r5, #0]
 8004d26:	061a      	lsls	r2, r3, #24
 8004d28:	d410      	bmi.n	8004d4c <__swhatbuf_r+0x40>
 8004d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2e:	e00e      	b.n	8004d4e <__swhatbuf_r+0x42>
 8004d30:	466a      	mov	r2, sp
 8004d32:	f000 f9a7 	bl	8005084 <_fstat_r>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	dbf1      	blt.n	8004d1e <__swhatbuf_r+0x12>
 8004d3a:	9a01      	ldr	r2, [sp, #4]
 8004d3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d44:	425a      	negs	r2, r3
 8004d46:	415a      	adcs	r2, r3
 8004d48:	602a      	str	r2, [r5, #0]
 8004d4a:	e7ee      	b.n	8004d2a <__swhatbuf_r+0x1e>
 8004d4c:	2340      	movs	r3, #64	; 0x40
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	b016      	add	sp, #88	; 0x58
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d58 <__smakebuf_r>:
 8004d58:	898b      	ldrh	r3, [r1, #12]
 8004d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d5c:	079d      	lsls	r5, r3, #30
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	d507      	bpl.n	8004d74 <__smakebuf_r+0x1c>
 8004d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	6163      	str	r3, [r4, #20]
 8004d70:	b002      	add	sp, #8
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	ab01      	add	r3, sp, #4
 8004d76:	466a      	mov	r2, sp
 8004d78:	f7ff ffc8 	bl	8004d0c <__swhatbuf_r>
 8004d7c:	9900      	ldr	r1, [sp, #0]
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f895 	bl	8004eb0 <_malloc_r>
 8004d86:	b948      	cbnz	r0, 8004d9c <__smakebuf_r+0x44>
 8004d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d4ef      	bmi.n	8004d70 <__smakebuf_r+0x18>
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e7e3      	b.n	8004d64 <__smakebuf_r+0xc>
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <__smakebuf_r+0x7c>)
 8004d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	6020      	str	r0, [r4, #0]
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	9b00      	ldr	r3, [sp, #0]
 8004dac:	6163      	str	r3, [r4, #20]
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	6120      	str	r0, [r4, #16]
 8004db2:	b15b      	cbz	r3, 8004dcc <__smakebuf_r+0x74>
 8004db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f975 	bl	80050a8 <_isatty_r>
 8004dbe:	b128      	cbz	r0, 8004dcc <__smakebuf_r+0x74>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	89a0      	ldrh	r0, [r4, #12]
 8004dce:	4305      	orrs	r5, r0
 8004dd0:	81a5      	strh	r5, [r4, #12]
 8004dd2:	e7cd      	b.n	8004d70 <__smakebuf_r+0x18>
 8004dd4:	08004b65 	.word	0x08004b65

08004dd8 <_free_r>:
 8004dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d044      	beq.n	8004e68 <_free_r+0x90>
 8004dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de2:	9001      	str	r0, [sp, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dea:	bfb8      	it	lt
 8004dec:	18e4      	addlt	r4, r4, r3
 8004dee:	f000 f97d 	bl	80050ec <__malloc_lock>
 8004df2:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <_free_r+0x94>)
 8004df4:	9801      	ldr	r0, [sp, #4]
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	b933      	cbnz	r3, 8004e08 <_free_r+0x30>
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6014      	str	r4, [r2, #0]
 8004dfe:	b003      	add	sp, #12
 8004e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e04:	f000 b978 	b.w	80050f8 <__malloc_unlock>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d908      	bls.n	8004e1e <_free_r+0x46>
 8004e0c:	6825      	ldr	r5, [r4, #0]
 8004e0e:	1961      	adds	r1, r4, r5
 8004e10:	428b      	cmp	r3, r1
 8004e12:	bf01      	itttt	eq
 8004e14:	6819      	ldreq	r1, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	1949      	addeq	r1, r1, r5
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	e7ed      	b.n	8004dfa <_free_r+0x22>
 8004e1e:	461a      	mov	r2, r3
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b10b      	cbz	r3, 8004e28 <_free_r+0x50>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d9fa      	bls.n	8004e1e <_free_r+0x46>
 8004e28:	6811      	ldr	r1, [r2, #0]
 8004e2a:	1855      	adds	r5, r2, r1
 8004e2c:	42a5      	cmp	r5, r4
 8004e2e:	d10b      	bne.n	8004e48 <_free_r+0x70>
 8004e30:	6824      	ldr	r4, [r4, #0]
 8004e32:	4421      	add	r1, r4
 8004e34:	1854      	adds	r4, r2, r1
 8004e36:	42a3      	cmp	r3, r4
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	d1e0      	bne.n	8004dfe <_free_r+0x26>
 8004e3c:	681c      	ldr	r4, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	6053      	str	r3, [r2, #4]
 8004e42:	4421      	add	r1, r4
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	e7da      	b.n	8004dfe <_free_r+0x26>
 8004e48:	d902      	bls.n	8004e50 <_free_r+0x78>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	6003      	str	r3, [r0, #0]
 8004e4e:	e7d6      	b.n	8004dfe <_free_r+0x26>
 8004e50:	6825      	ldr	r5, [r4, #0]
 8004e52:	1961      	adds	r1, r4, r5
 8004e54:	428b      	cmp	r3, r1
 8004e56:	bf04      	itt	eq
 8004e58:	6819      	ldreq	r1, [r3, #0]
 8004e5a:	685b      	ldreq	r3, [r3, #4]
 8004e5c:	6063      	str	r3, [r4, #4]
 8004e5e:	bf04      	itt	eq
 8004e60:	1949      	addeq	r1, r1, r5
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	6054      	str	r4, [r2, #4]
 8004e66:	e7ca      	b.n	8004dfe <_free_r+0x26>
 8004e68:	b003      	add	sp, #12
 8004e6a:	bd30      	pop	{r4, r5, pc}
 8004e6c:	20012e8c 	.word	0x20012e8c

08004e70 <sbrk_aligned>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4e0e      	ldr	r6, [pc, #56]	; (8004eac <sbrk_aligned+0x3c>)
 8004e74:	460c      	mov	r4, r1
 8004e76:	6831      	ldr	r1, [r6, #0]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b911      	cbnz	r1, 8004e82 <sbrk_aligned+0x12>
 8004e7c:	f000 f88c 	bl	8004f98 <_sbrk_r>
 8004e80:	6030      	str	r0, [r6, #0]
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 f887 	bl	8004f98 <_sbrk_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	d00a      	beq.n	8004ea4 <sbrk_aligned+0x34>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d007      	beq.n	8004ea8 <sbrk_aligned+0x38>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f87c 	bl	8004f98 <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <sbrk_aligned+0x38>
 8004ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	20012e90 	.word	0x20012e90

08004eb0 <_malloc_r>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	1ccd      	adds	r5, r1, #3
 8004eb6:	f025 0503 	bic.w	r5, r5, #3
 8004eba:	3508      	adds	r5, #8
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	bf38      	it	cc
 8004ec0:	250c      	movcc	r5, #12
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	db01      	blt.n	8004ecc <_malloc_r+0x1c>
 8004ec8:	42a9      	cmp	r1, r5
 8004eca:	d905      	bls.n	8004ed8 <_malloc_r+0x28>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed8:	4e2e      	ldr	r6, [pc, #184]	; (8004f94 <_malloc_r+0xe4>)
 8004eda:	f000 f907 	bl	80050ec <__malloc_lock>
 8004ede:	6833      	ldr	r3, [r6, #0]
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	bb34      	cbnz	r4, 8004f32 <_malloc_r+0x82>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f7ff ffc2 	bl	8004e70 <sbrk_aligned>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	4604      	mov	r4, r0
 8004ef0:	d14d      	bne.n	8004f8e <_malloc_r+0xde>
 8004ef2:	6834      	ldr	r4, [r6, #0]
 8004ef4:	4626      	mov	r6, r4
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	d140      	bne.n	8004f7c <_malloc_r+0xcc>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	4631      	mov	r1, r6
 8004efe:	4638      	mov	r0, r7
 8004f00:	eb04 0803 	add.w	r8, r4, r3
 8004f04:	f000 f848 	bl	8004f98 <_sbrk_r>
 8004f08:	4580      	cmp	r8, r0
 8004f0a:	d13a      	bne.n	8004f82 <_malloc_r+0xd2>
 8004f0c:	6821      	ldr	r1, [r4, #0]
 8004f0e:	3503      	adds	r5, #3
 8004f10:	1a6d      	subs	r5, r5, r1
 8004f12:	f025 0503 	bic.w	r5, r5, #3
 8004f16:	3508      	adds	r5, #8
 8004f18:	2d0c      	cmp	r5, #12
 8004f1a:	bf38      	it	cc
 8004f1c:	250c      	movcc	r5, #12
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4638      	mov	r0, r7
 8004f22:	f7ff ffa5 	bl	8004e70 <sbrk_aligned>
 8004f26:	3001      	adds	r0, #1
 8004f28:	d02b      	beq.n	8004f82 <_malloc_r+0xd2>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	442b      	add	r3, r5
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	e00e      	b.n	8004f50 <_malloc_r+0xa0>
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	1b52      	subs	r2, r2, r5
 8004f36:	d41e      	bmi.n	8004f76 <_malloc_r+0xc6>
 8004f38:	2a0b      	cmp	r2, #11
 8004f3a:	d916      	bls.n	8004f6a <_malloc_r+0xba>
 8004f3c:	1961      	adds	r1, r4, r5
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	6025      	str	r5, [r4, #0]
 8004f42:	bf18      	it	ne
 8004f44:	6059      	strne	r1, [r3, #4]
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	bf08      	it	eq
 8004f4a:	6031      	streq	r1, [r6, #0]
 8004f4c:	5162      	str	r2, [r4, r5]
 8004f4e:	604b      	str	r3, [r1, #4]
 8004f50:	4638      	mov	r0, r7
 8004f52:	f104 060b 	add.w	r6, r4, #11
 8004f56:	f000 f8cf 	bl	80050f8 <__malloc_unlock>
 8004f5a:	f026 0607 	bic.w	r6, r6, #7
 8004f5e:	1d23      	adds	r3, r4, #4
 8004f60:	1af2      	subs	r2, r6, r3
 8004f62:	d0b6      	beq.n	8004ed2 <_malloc_r+0x22>
 8004f64:	1b9b      	subs	r3, r3, r6
 8004f66:	50a3      	str	r3, [r4, r2]
 8004f68:	e7b3      	b.n	8004ed2 <_malloc_r+0x22>
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	bf0c      	ite	eq
 8004f70:	6032      	streq	r2, [r6, #0]
 8004f72:	605a      	strne	r2, [r3, #4]
 8004f74:	e7ec      	b.n	8004f50 <_malloc_r+0xa0>
 8004f76:	4623      	mov	r3, r4
 8004f78:	6864      	ldr	r4, [r4, #4]
 8004f7a:	e7b2      	b.n	8004ee2 <_malloc_r+0x32>
 8004f7c:	4634      	mov	r4, r6
 8004f7e:	6876      	ldr	r6, [r6, #4]
 8004f80:	e7b9      	b.n	8004ef6 <_malloc_r+0x46>
 8004f82:	230c      	movs	r3, #12
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4638      	mov	r0, r7
 8004f88:	f000 f8b6 	bl	80050f8 <__malloc_unlock>
 8004f8c:	e7a1      	b.n	8004ed2 <_malloc_r+0x22>
 8004f8e:	6025      	str	r5, [r4, #0]
 8004f90:	e7de      	b.n	8004f50 <_malloc_r+0xa0>
 8004f92:	bf00      	nop
 8004f94:	20012e8c 	.word	0x20012e8c

08004f98 <_sbrk_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d06      	ldr	r5, [pc, #24]	; (8004fb4 <_sbrk_r+0x1c>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	f000 f8c0 	bl	8005128 <_sbrk>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_sbrk_r+0x1a>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_sbrk_r+0x1a>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20012e94 	.word	0x20012e94

08004fb8 <__sread>:
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	460c      	mov	r4, r1
 8004fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc0:	f000 f8a0 	bl	8005104 <_read_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	bfab      	itete	ge
 8004fc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fca:	89a3      	ldrhlt	r3, [r4, #12]
 8004fcc:	181b      	addge	r3, r3, r0
 8004fce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fd2:	bfac      	ite	ge
 8004fd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fd6:	81a3      	strhlt	r3, [r4, #12]
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <__swrite>:
 8004fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	461f      	mov	r7, r3
 8004fe0:	898b      	ldrh	r3, [r1, #12]
 8004fe2:	05db      	lsls	r3, r3, #23
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	4616      	mov	r6, r2
 8004fea:	d505      	bpl.n	8004ff8 <__swrite+0x1e>
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f000 f868 	bl	80050c8 <_lseek_r>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	4632      	mov	r2, r6
 8005006:	463b      	mov	r3, r7
 8005008:	4628      	mov	r0, r5
 800500a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500e:	f000 b817 	b.w	8005040 <_write_r>

08005012 <__sseek>:
 8005012:	b510      	push	{r4, lr}
 8005014:	460c      	mov	r4, r1
 8005016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501a:	f000 f855 	bl	80050c8 <_lseek_r>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	bf15      	itete	ne
 8005024:	6560      	strne	r0, [r4, #84]	; 0x54
 8005026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800502a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800502e:	81a3      	strheq	r3, [r4, #12]
 8005030:	bf18      	it	ne
 8005032:	81a3      	strhne	r3, [r4, #12]
 8005034:	bd10      	pop	{r4, pc}

08005036 <__sclose>:
 8005036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503a:	f000 b813 	b.w	8005064 <_close_r>
	...

08005040 <_write_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d07      	ldr	r5, [pc, #28]	; (8005060 <_write_r+0x20>)
 8005044:	4604      	mov	r4, r0
 8005046:	4608      	mov	r0, r1
 8005048:	4611      	mov	r1, r2
 800504a:	2200      	movs	r2, #0
 800504c:	602a      	str	r2, [r5, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	f7fb fd95 	bl	8000b7e <_write>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_write_r+0x1e>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_write_r+0x1e>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	20012e94 	.word	0x20012e94

08005064 <_close_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d06      	ldr	r5, [pc, #24]	; (8005080 <_close_r+0x1c>)
 8005068:	2300      	movs	r3, #0
 800506a:	4604      	mov	r4, r0
 800506c:	4608      	mov	r0, r1
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	f7fb fda1 	bl	8000bb6 <_close>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_close_r+0x1a>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_close_r+0x1a>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	20012e94 	.word	0x20012e94

08005084 <_fstat_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d07      	ldr	r5, [pc, #28]	; (80050a4 <_fstat_r+0x20>)
 8005088:	2300      	movs	r3, #0
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	f7fb fd9c 	bl	8000bce <_fstat>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d102      	bne.n	80050a0 <_fstat_r+0x1c>
 800509a:	682b      	ldr	r3, [r5, #0]
 800509c:	b103      	cbz	r3, 80050a0 <_fstat_r+0x1c>
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	20012e94 	.word	0x20012e94

080050a8 <_isatty_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d06      	ldr	r5, [pc, #24]	; (80050c4 <_isatty_r+0x1c>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fb fd9b 	bl	8000bee <_isatty>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_isatty_r+0x1a>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_isatty_r+0x1a>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	20012e94 	.word	0x20012e94

080050c8 <_lseek_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d07      	ldr	r5, [pc, #28]	; (80050e8 <_lseek_r+0x20>)
 80050cc:	4604      	mov	r4, r0
 80050ce:	4608      	mov	r0, r1
 80050d0:	4611      	mov	r1, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	602a      	str	r2, [r5, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f7fb fd94 	bl	8000c04 <_lseek>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_lseek_r+0x1e>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_lseek_r+0x1e>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20012e94 	.word	0x20012e94

080050ec <__malloc_lock>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__malloc_lock+0x8>)
 80050ee:	f7ff be0b 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 80050f2:	bf00      	nop
 80050f4:	20012e88 	.word	0x20012e88

080050f8 <__malloc_unlock>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__malloc_unlock+0x8>)
 80050fa:	f7ff be06 	b.w	8004d0a <__retarget_lock_release_recursive>
 80050fe:	bf00      	nop
 8005100:	20012e88 	.word	0x20012e88

08005104 <_read_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d07      	ldr	r5, [pc, #28]	; (8005124 <_read_r+0x20>)
 8005108:	4604      	mov	r4, r0
 800510a:	4608      	mov	r0, r1
 800510c:	4611      	mov	r1, r2
 800510e:	2200      	movs	r2, #0
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fb fd16 	bl	8000b44 <_read>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_read_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_read_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20012e94 	.word	0x20012e94

08005128 <_sbrk>:
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <_sbrk+0x14>)
 800512a:	6811      	ldr	r1, [r2, #0]
 800512c:	4603      	mov	r3, r0
 800512e:	b909      	cbnz	r1, 8005134 <_sbrk+0xc>
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <_sbrk+0x18>)
 8005132:	6011      	str	r1, [r2, #0]
 8005134:	6810      	ldr	r0, [r2, #0]
 8005136:	4403      	add	r3, r0
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4770      	bx	lr
 800513c:	20012e98 	.word	0x20012e98
 8005140:	20012ea0 	.word	0x20012ea0

08005144 <_init>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr

08005150 <_fini>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	bf00      	nop
 8005154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005156:	bc08      	pop	{r3}
 8005158:	469e      	mov	lr, r3
 800515a:	4770      	bx	lr
